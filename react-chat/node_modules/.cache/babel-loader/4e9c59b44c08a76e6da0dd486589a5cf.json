{"ast":null,"code":"var _classCallCheck = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\n// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLNamedNodeMap, XMLNode, isObject;\n\n  var _require = require('./Utility');\n\n  isObject = _require.isObject;\n  XMLNode = require('./XMLNode');\n  NodeType = require('./NodeType');\n  XMLDTDAttList = require('./XMLDTDAttList');\n  XMLDTDEntity = require('./XMLDTDEntity');\n  XMLDTDElement = require('./XMLDTDElement');\n  XMLDTDNotation = require('./XMLDTDNotation');\n  XMLNamedNodeMap = require('./XMLNamedNodeMap'); // Represents doctype declaration\n\n  module.exports = XMLDocType = function () {\n    var XMLDocType = /*#__PURE__*/function (_XMLNode) {\n      \"use strict\";\n\n      _inherits(XMLDocType, _XMLNode);\n\n      var _super = _createSuper(XMLDocType);\n\n      // Initializes a new instance of `XMLDocType`\n      // `parent` the document object\n      // `pubID` public identifier of the external subset\n      // `sysID` system identifier of the external subset\n      function XMLDocType(parent, pubID, sysID) {\n        var _this;\n\n        _classCallCheck(this, XMLDocType);\n\n        var child, i, len, ref;\n        _this = _super.call(this, parent);\n        _this.type = NodeType.DocType; // set DTD name to the name of the root node\n\n        if (parent.children) {\n          ref = parent.children;\n\n          for (i = 0, len = ref.length; i < len; i++) {\n            child = ref[i];\n\n            if (child.type === NodeType.Element) {\n              _this.name = child.name;\n              break;\n            }\n          }\n        }\n\n        _this.documentObject = parent; // arguments may also be passed as an object\n\n        if (isObject(pubID)) {\n          var _pubID = pubID;\n          pubID = _pubID.pubID;\n          sysID = _pubID.sysID;\n        }\n\n        if (sysID == null) {\n          var _ref = [pubID, sysID];\n          sysID = _ref[0];\n          pubID = _ref[1];\n        }\n\n        if (pubID != null) {\n          _this.pubID = _this.stringify.dtdPubID(pubID);\n        }\n\n        if (sysID != null) {\n          _this.sysID = _this.stringify.dtdSysID(sysID);\n        }\n\n        return _this;\n      } // Creates an element type declaration\n      // `name` element name\n      // `value` element content (defaults to #PCDATA)\n\n\n      _createClass(XMLDocType, [{\n        key: \"element\",\n        value: function element(name, value) {\n          var child;\n          child = new XMLDTDElement(this, name, value);\n          this.children.push(child);\n          return this;\n        } // Creates an attribute declaration\n        // `elementName` the name of the element containing this attribute\n        // `attributeName` attribute name\n        // `attributeType` type of the attribute (defaults to CDATA)\n        // `defaultValueType` default value type (either #REQUIRED, #IMPLIED, #FIXED or\n        //                    #DEFAULT) (defaults to #IMPLIED)\n        // `defaultValue` default value of the attribute\n        //                (only used for #FIXED or #DEFAULT)\n\n      }, {\n        key: \"attList\",\n        value: function attList(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n          var child;\n          child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);\n          this.children.push(child);\n          return this;\n        } // Creates a general entity declaration\n        // `name` the name of the entity\n        // `value` internal entity value or an object with external entity details\n        // `value.pubID` public identifier\n        // `value.sysID` system identifier\n        // `value.nData` notation declaration\n\n      }, {\n        key: \"entity\",\n        value: function entity(name, value) {\n          var child;\n          child = new XMLDTDEntity(this, false, name, value);\n          this.children.push(child);\n          return this;\n        } // Creates a parameter entity declaration\n        // `name` the name of the entity\n        // `value` internal entity value or an object with external entity details\n        // `value.pubID` public identifier\n        // `value.sysID` system identifier\n\n      }, {\n        key: \"pEntity\",\n        value: function pEntity(name, value) {\n          var child;\n          child = new XMLDTDEntity(this, true, name, value);\n          this.children.push(child);\n          return this;\n        } // Creates a NOTATION declaration\n        // `name` the name of the notation\n        // `value` an object with external entity details\n        // `value.pubID` public identifier\n        // `value.sysID` system identifier\n\n      }, {\n        key: \"notation\",\n        value: function notation(name, value) {\n          var child;\n          child = new XMLDTDNotation(this, name, value);\n          this.children.push(child);\n          return this;\n        } // Converts to string\n        // `options.pretty` pretty prints the result\n        // `options.indent` indentation for pretty print\n        // `options.offset` how many indentations to add to every line for pretty print\n        // `options.newline` newline sequence for pretty print\n\n      }, {\n        key: \"toString\",\n        value: function toString(options) {\n          return this.options.writer.docType(this, this.options.writer.filterOptions(options));\n        } // Aliases\n\n      }, {\n        key: \"ele\",\n        value: function ele(name, value) {\n          return this.element(name, value);\n        }\n      }, {\n        key: \"att\",\n        value: function att(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n          return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);\n        }\n      }, {\n        key: \"ent\",\n        value: function ent(name, value) {\n          return this.entity(name, value);\n        }\n      }, {\n        key: \"pent\",\n        value: function pent(name, value) {\n          return this.pEntity(name, value);\n        }\n      }, {\n        key: \"not\",\n        value: function not(name, value) {\n          return this.notation(name, value);\n        }\n      }, {\n        key: \"up\",\n        value: function up() {\n          return this.root() || this.documentObject;\n        }\n      }, {\n        key: \"isEqualNode\",\n        value: function isEqualNode(node) {\n          if (!_get(_getPrototypeOf(XMLDocType.prototype), \"isEqualNode\", this).call(this, node)) {\n            return false;\n          }\n\n          if (node.name !== this.name) {\n            return false;\n          }\n\n          if (node.publicId !== this.publicId) {\n            return false;\n          }\n\n          if (node.systemId !== this.systemId) {\n            return false;\n          }\n\n          return true;\n        }\n      }]);\n\n      return XMLDocType;\n    }(XMLNode);\n\n    ; // DOM level 1\n\n    Object.defineProperty(XMLDocType.prototype, 'entities', {\n      get: function get() {\n        var child, i, len, nodes, ref;\n        nodes = {};\n        ref = this.children;\n\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n\n          if (child.type === NodeType.EntityDeclaration && !child.pe) {\n            nodes[child.name] = child;\n          }\n        }\n\n        return new XMLNamedNodeMap(nodes);\n      }\n    });\n    Object.defineProperty(XMLDocType.prototype, 'notations', {\n      get: function get() {\n        var child, i, len, nodes, ref;\n        nodes = {};\n        ref = this.children;\n\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n\n          if (child.type === NodeType.NotationDeclaration) {\n            nodes[child.name] = child;\n          }\n        }\n\n        return new XMLNamedNodeMap(nodes);\n      }\n    }); // DOM level 2\n\n    Object.defineProperty(XMLDocType.prototype, 'publicId', {\n      get: function get() {\n        return this.pubID;\n      }\n    });\n    Object.defineProperty(XMLDocType.prototype, 'systemId', {\n      get: function get() {\n        return this.sysID;\n      }\n    });\n    Object.defineProperty(XMLDocType.prototype, 'internalSubset', {\n      get: function get() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n    return XMLDocType;\n  }.call(this);\n}).call(this);","map":{"version":3,"sources":["/Users/stefanpjanic/Desktop/mango_dev/node_modules/xmlbuilder/lib/XMLDocType.js"],"names":["NodeType","XMLDTDAttList","XMLDTDElement","XMLDTDEntity","XMLDTDNotation","XMLDocType","XMLNamedNodeMap","XMLNode","isObject","require","module","exports","parent","pubID","sysID","child","i","len","ref","type","DocType","children","length","Element","name","documentObject","stringify","dtdPubID","dtdSysID","value","push","elementName","attributeName","attributeType","defaultValueType","defaultValue","options","writer","docType","filterOptions","element","attList","entity","pEntity","notation","root","node","publicId","systemId","Object","defineProperty","prototype","get","nodes","EntityDeclaration","pe","NotationDeclaration","Error","debugInfo","call"],"mappings":"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","sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLNamedNodeMap, XMLNode, isObject;\n\n  ({isObject} = require('./Utility'));\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  XMLDTDAttList = require('./XMLDTDAttList');\n\n  XMLDTDEntity = require('./XMLDTDEntity');\n\n  XMLDTDElement = require('./XMLDTDElement');\n\n  XMLDTDNotation = require('./XMLDTDNotation');\n\n  XMLNamedNodeMap = require('./XMLNamedNodeMap');\n\n  // Represents doctype declaration\n  module.exports = XMLDocType = (function() {\n    class XMLDocType extends XMLNode {\n      // Initializes a new instance of `XMLDocType`\n\n      // `parent` the document object\n\n      // `pubID` public identifier of the external subset\n      // `sysID` system identifier of the external subset\n      constructor(parent, pubID, sysID) {\n        var child, i, len, ref;\n        super(parent);\n        this.type = NodeType.DocType;\n        // set DTD name to the name of the root node\n        if (parent.children) {\n          ref = parent.children;\n          for (i = 0, len = ref.length; i < len; i++) {\n            child = ref[i];\n            if (child.type === NodeType.Element) {\n              this.name = child.name;\n              break;\n            }\n          }\n        }\n        this.documentObject = parent;\n        // arguments may also be passed as an object\n        if (isObject(pubID)) {\n          ({pubID, sysID} = pubID);\n        }\n        if (sysID == null) {\n          [sysID, pubID] = [pubID, sysID];\n        }\n        if (pubID != null) {\n          this.pubID = this.stringify.dtdPubID(pubID);\n        }\n        if (sysID != null) {\n          this.sysID = this.stringify.dtdSysID(sysID);\n        }\n      }\n\n      // Creates an element type declaration\n\n      // `name` element name\n      // `value` element content (defaults to #PCDATA)\n      element(name, value) {\n        var child;\n        child = new XMLDTDElement(this, name, value);\n        this.children.push(child);\n        return this;\n      }\n\n      // Creates an attribute declaration\n\n      // `elementName` the name of the element containing this attribute\n      // `attributeName` attribute name\n      // `attributeType` type of the attribute (defaults to CDATA)\n      // `defaultValueType` default value type (either #REQUIRED, #IMPLIED, #FIXED or\n      //                    #DEFAULT) (defaults to #IMPLIED)\n      // `defaultValue` default value of the attribute\n      //                (only used for #FIXED or #DEFAULT)\n      attList(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n        var child;\n        child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);\n        this.children.push(child);\n        return this;\n      }\n\n      // Creates a general entity declaration\n\n      // `name` the name of the entity\n      // `value` internal entity value or an object with external entity details\n      // `value.pubID` public identifier\n      // `value.sysID` system identifier\n      // `value.nData` notation declaration\n      entity(name, value) {\n        var child;\n        child = new XMLDTDEntity(this, false, name, value);\n        this.children.push(child);\n        return this;\n      }\n\n      // Creates a parameter entity declaration\n\n      // `name` the name of the entity\n      // `value` internal entity value or an object with external entity details\n      // `value.pubID` public identifier\n      // `value.sysID` system identifier\n      pEntity(name, value) {\n        var child;\n        child = new XMLDTDEntity(this, true, name, value);\n        this.children.push(child);\n        return this;\n      }\n\n      // Creates a NOTATION declaration\n\n      // `name` the name of the notation\n      // `value` an object with external entity details\n      // `value.pubID` public identifier\n      // `value.sysID` system identifier\n      notation(name, value) {\n        var child;\n        child = new XMLDTDNotation(this, name, value);\n        this.children.push(child);\n        return this;\n      }\n\n      // Converts to string\n\n      // `options.pretty` pretty prints the result\n      // `options.indent` indentation for pretty print\n      // `options.offset` how many indentations to add to every line for pretty print\n      // `options.newline` newline sequence for pretty print\n      toString(options) {\n        return this.options.writer.docType(this, this.options.writer.filterOptions(options));\n      }\n\n      // Aliases\n      ele(name, value) {\n        return this.element(name, value);\n      }\n\n      att(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n        return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);\n      }\n\n      ent(name, value) {\n        return this.entity(name, value);\n      }\n\n      pent(name, value) {\n        return this.pEntity(name, value);\n      }\n\n      not(name, value) {\n        return this.notation(name, value);\n      }\n\n      up() {\n        return this.root() || this.documentObject;\n      }\n\n      isEqualNode(node) {\n        if (!super.isEqualNode(node)) {\n          return false;\n        }\n        if (node.name !== this.name) {\n          return false;\n        }\n        if (node.publicId !== this.publicId) {\n          return false;\n        }\n        if (node.systemId !== this.systemId) {\n          return false;\n        }\n        return true;\n      }\n\n    };\n\n    // DOM level 1\n    Object.defineProperty(XMLDocType.prototype, 'entities', {\n      get: function() {\n        var child, i, len, nodes, ref;\n        nodes = {};\n        ref = this.children;\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n          if ((child.type === NodeType.EntityDeclaration) && !child.pe) {\n            nodes[child.name] = child;\n          }\n        }\n        return new XMLNamedNodeMap(nodes);\n      }\n    });\n\n    Object.defineProperty(XMLDocType.prototype, 'notations', {\n      get: function() {\n        var child, i, len, nodes, ref;\n        nodes = {};\n        ref = this.children;\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n          if (child.type === NodeType.NotationDeclaration) {\n            nodes[child.name] = child;\n          }\n        }\n        return new XMLNamedNodeMap(nodes);\n      }\n    });\n\n    // DOM level 2\n    Object.defineProperty(XMLDocType.prototype, 'publicId', {\n      get: function() {\n        return this.pubID;\n      }\n    });\n\n    Object.defineProperty(XMLDocType.prototype, 'systemId', {\n      get: function() {\n        return this.sysID;\n      }\n    });\n\n    Object.defineProperty(XMLDocType.prototype, 'internalSubset', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    return XMLDocType;\n\n  }).call(this);\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}