{"ast":null,"code":"var _classCallCheck = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\n// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType, XMLDummy, XMLNode;\n  XMLNode = require('./XMLNode');\n  NodeType = require('./NodeType'); // Represents a  raw node\n\n  module.exports = XMLDummy = /*#__PURE__*/function (_XMLNode) {\n    \"use strict\";\n\n    _inherits(XMLDummy, _XMLNode);\n\n    var _super = _createSuper(XMLDummy);\n\n    // Initializes a new instance of `XMLDummy`\n    // `XMLDummy` is a special node representing a node with \n    // a null value. Dummy nodes are created while recursively\n    // building the XML tree. Simply skipping null values doesn't\n    // work because that would break the recursive chain.\n    function XMLDummy(parent) {\n      var _this;\n\n      _classCallCheck(this, XMLDummy);\n\n      _this = _super.call(this, parent);\n      _this.type = NodeType.Dummy;\n      return _this;\n    } // Creates and returns a deep clone of `this`\n\n\n    _createClass(XMLDummy, [{\n      key: \"clone\",\n      value: function clone() {\n        return Object.create(this);\n      } // Converts the XML fragment to string\n      // `options.pretty` pretty prints the result\n      // `options.indent` indentation for pretty print\n      // `options.offset` how many indentations to add to every line for pretty print\n      // `options.newline` newline sequence for pretty print\n\n    }, {\n      key: \"toString\",\n      value: function toString(options) {\n        return '';\n      }\n    }]);\n\n    return XMLDummy;\n  }(XMLNode);\n}).call(this);","map":{"version":3,"sources":["/Users/stefanpjanic/Desktop/mango_dev/node_modules/xmlbuilder/lib/XMLDummy.js"],"names":["NodeType","XMLDummy","XMLNode","require","module","exports","parent","type","Dummy","Object","create","options","call"],"mappings":";;;;;;;;AAAA;AACA,CAAC,YAAW;AACV,MAAIA,QAAJ,EAAcC,QAAd,EAAwBC,OAAxB;AAEAA,EAAAA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAjB;AAEAH,EAAAA,QAAQ,GAAGG,OAAO,CAAC,YAAD,CAAlB,CALU,CAOV;;AACAC,EAAAA,MAAM,CAACC,OAAP,GAAiBJ,QAAQ;AAAA;;AAAA;;AAAA;;AACvB;AAEA;AACA;AACA;AACA;AACA,sBAAYK,MAAZ,EAAoB;AAAA;;AAAA;;AAClB,gCAAMA,MAAN;AACA,YAAKC,IAAL,GAAYP,QAAQ,CAACQ,KAArB;AAFkB;AAGnB,KAVsB,CAYvB;;;AAZuB;AAAA;AAAA,aAavB,iBAAQ;AACN,eAAOC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAP;AACD,OAfsB,CAiBvB;AAEA;AACA;AACA;AACA;;AAtBuB;AAAA;AAAA,aAuBvB,kBAASC,OAAT,EAAkB;AAChB,eAAO,EAAP;AACD;AAzBsB;;AAAA;AAAA,IAA0BT,OAA1B,CAAzB;AA6BD,CArCD,EAqCGU,IArCH,CAqCQ,IArCR","sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLDummy, XMLNode;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  // Represents a  raw node\n  module.exports = XMLDummy = class XMLDummy extends XMLNode {\n    // Initializes a new instance of `XMLDummy`\n\n    // `XMLDummy` is a special node representing a node with \n    // a null value. Dummy nodes are created while recursively\n    // building the XML tree. Simply skipping null values doesn't\n    // work because that would break the recursive chain.\n    constructor(parent) {\n      super(parent);\n      this.type = NodeType.Dummy;\n    }\n\n    // Creates and returns a deep clone of `this`\n    clone() {\n      return Object.create(this);\n    }\n\n    // Converts the XML fragment to string\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n    toString(options) {\n      return '';\n    }\n\n  };\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}