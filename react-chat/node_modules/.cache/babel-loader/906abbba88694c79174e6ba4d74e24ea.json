{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Cache = void 0;\n\nvar tree_1 = require(\"./utils/tree\");\n\nvar Entry = /*#__PURE__*/function () {\n  function Entry(value, revision) {\n    _classCallCheck(this, Entry);\n\n    this.value = value;\n    this.revision = revision || 0;\n  }\n\n  _createClass(Entry, [{\n    key: \"isValid\",\n    get: function get() {\n      return true;\n    }\n  }]);\n\n  return Entry;\n}();\n\nvar Tombstone = /*#__PURE__*/function () {\n  function Tombstone(revision) {\n    _classCallCheck(this, Tombstone);\n\n    this.revision = revision;\n  }\n\n  _createClass(Tombstone, [{\n    key: \"isValid\",\n    get: function get() {\n      return false;\n    }\n  }]);\n\n  return Tombstone;\n}();\n\nvar Cache = /*#__PURE__*/function () {\n  function Cache() {\n    _classCallCheck(this, Cache);\n\n    this.items = new tree_1.TreeMap();\n  }\n\n  _createClass(Cache, [{\n    key: \"store\",\n    value: function store(key, value, revision) {\n      var entry = this.items.get(key);\n\n      if (entry && entry.revision > revision) {\n        if (entry.isValid) {\n          return entry.value;\n        }\n\n        return null;\n      }\n\n      this.items.set(key, new Entry(value, revision));\n      return value;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key, revision) {\n      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var curr = this.items.get(key);\n\n      if (!curr || curr.revision < revision || curr && force === true\n      /* forced delete when revision is unknown */\n      ) {\n          this.items.set(key, new Tombstone(revision));\n        }\n    }\n  }, {\n    key: \"isKnown\",\n    value: function isKnown(key, revision) {\n      var curr = this.items.get(key);\n      return curr && curr.revision >= revision;\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      var entry = this.items.get(key);\n\n      if (entry && entry.isValid) {\n        return entry.value;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      var entry = this.items.get(key);\n      return entry && entry.isValid;\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(callbackfn) {\n      if (this.items) {\n        var _iterator = _createForOfIteratorHelper(this.items),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _step$value = _slicedToArray(_step.value, 2),\n                key = _step$value[0],\n                entry = _step$value[1];\n\n            if (entry.isValid) {\n              callbackfn(key, entry.value);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n  }]);\n\n  return Cache;\n}();\n\nexports.Cache = Cache;\nexports.default = Cache;","map":{"version":3,"sources":["/Users/stefanpjanic/Desktop/mango_dev/node_modules/twilio-sync/lib/cache.js"],"names":["Object","defineProperty","exports","value","Cache","tree_1","require","Entry","revision","Tombstone","items","TreeMap","key","entry","get","isValid","set","force","curr","callbackfn","default"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Cache = void 0;\nconst tree_1 = require(\"./utils/tree\");\nclass Entry {\n    constructor(value, revision) {\n        this.value = value;\n        this.revision = (revision || 0);\n    }\n    get isValid() {\n        return true;\n    }\n}\nclass Tombstone {\n    constructor(revision) {\n        this.revision = revision;\n    }\n    get isValid() {\n        return false;\n    }\n}\nclass Cache {\n    constructor() {\n        this.items = new tree_1.TreeMap();\n    }\n    store(key, value, revision) {\n        let entry = this.items.get(key);\n        if (entry && entry.revision > revision) {\n            if (entry.isValid) {\n                return entry.value;\n            }\n            return null;\n        }\n        this.items.set(key, new Entry(value, revision));\n        return value;\n    }\n    delete(key, revision, force = false) {\n        let curr = this.items.get(key);\n        if (!curr || curr.revision < revision ||\n            (curr && force === true) /* forced delete when revision is unknown */) {\n            this.items.set(key, new Tombstone(revision));\n        }\n    }\n    isKnown(key, revision) {\n        let curr = this.items.get(key);\n        return curr && curr.revision >= revision;\n    }\n    get(key) {\n        let entry = this.items.get(key);\n        if (entry && entry.isValid) {\n            return entry.value;\n        }\n        return null;\n    }\n    has(key) {\n        let entry = this.items.get(key);\n        return entry && entry.isValid;\n    }\n    forEach(callbackfn) {\n        if (this.items) {\n            for (let [key, entry] of this.items) {\n                if (entry.isValid) {\n                    callbackfn(key, entry.value);\n                }\n            }\n        }\n    }\n}\nexports.Cache = Cache;\nexports.default = Cache;\n"]},"metadata":{},"sourceType":"script"}