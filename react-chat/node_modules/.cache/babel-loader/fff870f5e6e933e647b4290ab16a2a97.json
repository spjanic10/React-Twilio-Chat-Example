{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SyncEntity = void 0;\n\nvar SyncEntity = /*#__PURE__*/function () {\n  function SyncEntity(services, removalHandler) {\n    _classCallCheck(this, SyncEntity);\n\n    this.services = services;\n    this.removalHandler = removalHandler;\n    this.subscriptionState = 'none';\n    this._attachedListeners = new Map();\n  }\n\n  _createClass(SyncEntity, [{\n    key: \"_advanceLastEventId\",\n    value: function _advanceLastEventId(eventId, revision) {}\n  }, {\n    key: \"reportFailure\",\n    value: function reportFailure(err) {\n      if (err.status === 404) {\n        // assume that 404 means that entity has been removed while we were away\n        this.onRemoved(false);\n      } else {\n        this.broadcastEventToListeners('failure', err);\n      }\n    }\n    /**\n     * Subscribe to changes of data entity\n     * @private\n     */\n\n  }, {\n    key: \"_subscribe\",\n    value: function _subscribe() {\n      this.services.router.subscribe(this.sid, this);\n    }\n    /**\n     * Unsubscribe from changes of current data entity\n     * @private\n     */\n\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      this.services.router.unsubscribe(this.sid);\n    }\n  }, {\n    key: \"_setSubscriptionState\",\n    value: function _setSubscriptionState(newState) {\n      this.subscriptionState = newState;\n      this.broadcastEventToListeners('_subscriptionStateChanged', newState);\n    }\n    /**\n     * @public\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      this._unsubscribe();\n\n      if (this.removalHandler != null) {\n        this.removalHandler(this.type, this.sid, this.uniqueName);\n      }\n    }\n  }, {\n    key: \"attach\",\n    value: function attach(closeable) {\n      var uuid = closeable.listenerUuid;\n\n      var existingRecord = this._attachedListeners.get(uuid);\n\n      if (existingRecord) {\n        return;\n      }\n\n      if (!this._attachedListeners.size) {\n        // the first one to arrive\n        this._subscribe();\n      }\n\n      this._attachedListeners.set(uuid, closeable);\n    }\n  }, {\n    key: \"detach\",\n    value: function detach(listenerUuid) {\n      this._attachedListeners.delete(listenerUuid);\n\n      if (!this._attachedListeners.size) {\n        // last one out, turn off lights, shut the door\n        this.close(); // invokes unsubscribe and removal handler\n      }\n    }\n  }, {\n    key: \"broadcastEventToListeners\",\n    value: function broadcastEventToListeners(eventName, args) {\n      var _iterator = _createForOfIteratorHelper(this._attachedListeners.values()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var listener = _step.value;\n          listener.emit(eventName, args);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }]);\n\n  return SyncEntity;\n}();\n\nexports.SyncEntity = SyncEntity;\nexports.default = SyncEntity;","map":{"version":3,"sources":["/Users/stefanpjanic/Desktop/mango_dev/node_modules/twilio-sync/lib/entity.js"],"names":["Object","defineProperty","exports","value","SyncEntity","services","removalHandler","subscriptionState","_attachedListeners","Map","eventId","revision","err","status","onRemoved","broadcastEventToListeners","router","subscribe","sid","unsubscribe","newState","_unsubscribe","type","uniqueName","closeable","uuid","listenerUuid","existingRecord","get","size","_subscribe","set","delete","close","eventName","args","values","listener","emit","default"],"mappings":"AAAA;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,UAAR,GAAqB,KAAK,CAA1B;;IACMA,U;AACF,sBAAYC,QAAZ,EAAsBC,cAAtB,EAAsC;AAAA;;AAClC,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKC,iBAAL,GAAyB,MAAzB;AACA,SAAKC,kBAAL,GAA0B,IAAIC,GAAJ,EAA1B;AACH;;;;WACD,6BAAoBC,OAApB,EAA6BC,QAA7B,EAAuC,CACtC;;;WACD,uBAAcC,GAAd,EAAmB;AACf,UAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACpB;AACA,aAAKC,SAAL,CAAe,KAAf;AACH,OAHD,MAIK;AACD,aAAKC,yBAAL,CAA+B,SAA/B,EAA0CH,GAA1C;AACH;AACJ;AACD;AACJ;AACA;AACA;;;;WACI,sBAAa;AACT,WAAKP,QAAL,CAAcW,MAAd,CAAqBC,SAArB,CAA+B,KAAKC,GAApC,EAAyC,IAAzC;AACH;AACD;AACJ;AACA;AACA;;;;WACI,wBAAe;AACX,WAAKb,QAAL,CAAcW,MAAd,CAAqBG,WAArB,CAAiC,KAAKD,GAAtC;AACH;;;WACD,+BAAsBE,QAAtB,EAAgC;AAC5B,WAAKb,iBAAL,GAAyBa,QAAzB;AACA,WAAKL,yBAAL,CAA+B,2BAA/B,EAA4DK,QAA5D;AACH;AACD;AACJ;AACA;;;;WACI,iBAAQ;AACJ,WAAKC,YAAL;;AACA,UAAI,KAAKf,cAAL,IAAuB,IAA3B,EAAiC;AAC7B,aAAKA,cAAL,CAAoB,KAAKgB,IAAzB,EAA+B,KAAKJ,GAApC,EAAyC,KAAKK,UAA9C;AACH;AACJ;;;WACD,gBAAOC,SAAP,EAAkB;AACd,UAAMC,IAAI,GAAGD,SAAS,CAACE,YAAvB;;AACA,UAAMC,cAAc,GAAG,KAAKnB,kBAAL,CAAwBoB,GAAxB,CAA4BH,IAA5B,CAAvB;;AACA,UAAIE,cAAJ,EAAoB;AAChB;AACH;;AACD,UAAI,CAAC,KAAKnB,kBAAL,CAAwBqB,IAA7B,EAAmC;AAC/B;AACA,aAAKC,UAAL;AACH;;AACD,WAAKtB,kBAAL,CAAwBuB,GAAxB,CAA4BN,IAA5B,EAAkCD,SAAlC;AACH;;;WACD,gBAAOE,YAAP,EAAqB;AACjB,WAAKlB,kBAAL,CAAwBwB,MAAxB,CAA+BN,YAA/B;;AACA,UAAI,CAAC,KAAKlB,kBAAL,CAAwBqB,IAA7B,EAAmC;AAC/B;AACA,aAAKI,KAAL,GAF+B,CAEjB;AACjB;AACJ;;;WACD,mCAA0BC,SAA1B,EAAqCC,IAArC,EAA2C;AAAA,iDAClB,KAAK3B,kBAAL,CAAwB4B,MAAxB,EADkB;AAAA;;AAAA;AACvC,4DAAuD;AAAA,cAA9CC,QAA8C;AACnDA,UAAAA,QAAQ,CAACC,IAAT,CAAcJ,SAAd,EAAyBC,IAAzB;AACH;AAHsC;AAAA;AAAA;AAAA;AAAA;AAI1C;;;;;;AAELjC,OAAO,CAACE,UAAR,GAAqBA,UAArB;AACAF,OAAO,CAACqC,OAAR,GAAkBnC,UAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SyncEntity = void 0;\nclass SyncEntity {\n    constructor(services, removalHandler) {\n        this.services = services;\n        this.removalHandler = removalHandler;\n        this.subscriptionState = 'none';\n        this._attachedListeners = new Map();\n    }\n    _advanceLastEventId(eventId, revision) {\n    }\n    reportFailure(err) {\n        if (err.status === 404) {\n            // assume that 404 means that entity has been removed while we were away\n            this.onRemoved(false);\n        }\n        else {\n            this.broadcastEventToListeners('failure', err);\n        }\n    }\n    /**\n     * Subscribe to changes of data entity\n     * @private\n     */\n    _subscribe() {\n        this.services.router.subscribe(this.sid, this);\n    }\n    /**\n     * Unsubscribe from changes of current data entity\n     * @private\n     */\n    _unsubscribe() {\n        this.services.router.unsubscribe(this.sid);\n    }\n    _setSubscriptionState(newState) {\n        this.subscriptionState = newState;\n        this.broadcastEventToListeners('_subscriptionStateChanged', newState);\n    }\n    /**\n     * @public\n     */\n    close() {\n        this._unsubscribe();\n        if (this.removalHandler != null) {\n            this.removalHandler(this.type, this.sid, this.uniqueName);\n        }\n    }\n    attach(closeable) {\n        const uuid = closeable.listenerUuid;\n        const existingRecord = this._attachedListeners.get(uuid);\n        if (existingRecord) {\n            return;\n        }\n        if (!this._attachedListeners.size) {\n            // the first one to arrive\n            this._subscribe();\n        }\n        this._attachedListeners.set(uuid, closeable);\n    }\n    detach(listenerUuid) {\n        this._attachedListeners.delete(listenerUuid);\n        if (!this._attachedListeners.size) {\n            // last one out, turn off lights, shut the door\n            this.close(); // invokes unsubscribe and removal handler\n        }\n    }\n    broadcastEventToListeners(eventName, args) {\n        for (let listener of this._attachedListeners.values()) {\n            listener.emit(eventName, args);\n        }\n    }\n}\nexports.SyncEntity = SyncEntity;\nexports.default = SyncEntity;\n"]},"metadata":{},"sourceType":"script"}