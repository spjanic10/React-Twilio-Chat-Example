{"ast":null,"code":"var _classCallCheck = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\n// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType, XMLDTDEntity, XMLNode, isObject;\n\n  var _require = require('./Utility');\n\n  isObject = _require.isObject;\n  XMLNode = require('./XMLNode');\n  NodeType = require('./NodeType'); // Represents an entity declaration in the DTD\n\n  module.exports = XMLDTDEntity = function () {\n    var XMLDTDEntity = /*#__PURE__*/function (_XMLNode) {\n      \"use strict\";\n\n      _inherits(XMLDTDEntity, _XMLNode);\n\n      var _super = _createSuper(XMLDTDEntity);\n\n      // Initializes a new instance of `XMLDTDEntity`\n      // `parent` the parent `XMLDocType` element\n      // `pe` whether this is a parameter entity or a general entity\n      //      defaults to `false` (general entity)\n      // `name` the name of the entity\n      // `value` internal entity value or an object with external entity details\n      // `value.pubID` public identifier\n      // `value.sysID` system identifier\n      // `value.nData` notation declaration\n      function XMLDTDEntity(parent, pe, name, value) {\n        var _this;\n\n        _classCallCheck(this, XMLDTDEntity);\n\n        _this = _super.call(this, parent);\n\n        if (name == null) {\n          throw new Error(\"Missing DTD entity name. \" + _this.debugInfo(name));\n        }\n\n        if (value == null) {\n          throw new Error(\"Missing DTD entity value. \" + _this.debugInfo(name));\n        }\n\n        _this.pe = !!pe;\n        _this.name = _this.stringify.name(name);\n        _this.type = NodeType.EntityDeclaration;\n\n        if (!isObject(value)) {\n          _this.value = _this.stringify.dtdEntityValue(value);\n          _this.internal = true;\n        } else {\n          if (!value.pubID && !value.sysID) {\n            throw new Error(\"Public and/or system identifiers are required for an external entity. \" + _this.debugInfo(name));\n          }\n\n          if (value.pubID && !value.sysID) {\n            throw new Error(\"System identifier is required for a public external entity. \" + _this.debugInfo(name));\n          }\n\n          _this.internal = false;\n\n          if (value.pubID != null) {\n            _this.pubID = _this.stringify.dtdPubID(value.pubID);\n          }\n\n          if (value.sysID != null) {\n            _this.sysID = _this.stringify.dtdSysID(value.sysID);\n          }\n\n          if (value.nData != null) {\n            _this.nData = _this.stringify.dtdNData(value.nData);\n          }\n\n          if (_this.pe && _this.nData) {\n            throw new Error(\"Notation declaration is not allowed in a parameter entity. \" + _this.debugInfo(name));\n          }\n        }\n\n        return _this;\n      } // Converts the XML fragment to string\n      // `options.pretty` pretty prints the result\n      // `options.indent` indentation for pretty print\n      // `options.offset` how many indentations to add to every line for pretty print\n      // `options.newline` newline sequence for pretty print\n\n\n      _createClass(XMLDTDEntity, [{\n        key: \"toString\",\n        value: function toString(options) {\n          return this.options.writer.dtdEntity(this, this.options.writer.filterOptions(options));\n        }\n      }]);\n\n      return XMLDTDEntity;\n    }(XMLNode);\n\n    ; // DOM level 1\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'publicId', {\n      get: function get() {\n        return this.pubID;\n      }\n    });\n    Object.defineProperty(XMLDTDEntity.prototype, 'systemId', {\n      get: function get() {\n        return this.sysID;\n      }\n    });\n    Object.defineProperty(XMLDTDEntity.prototype, 'notationName', {\n      get: function get() {\n        return this.nData || null;\n      }\n    }); // DOM level 3\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'inputEncoding', {\n      get: function get() {\n        return null;\n      }\n    });\n    Object.defineProperty(XMLDTDEntity.prototype, 'xmlEncoding', {\n      get: function get() {\n        return null;\n      }\n    });\n    Object.defineProperty(XMLDTDEntity.prototype, 'xmlVersion', {\n      get: function get() {\n        return null;\n      }\n    });\n    return XMLDTDEntity;\n  }.call(this);\n}).call(this);","map":{"version":3,"sources":["/Users/stefanpjanic/Desktop/mango_dev/node_modules/xmlbuilder/lib/XMLDTDEntity.js"],"names":["NodeType","XMLDTDEntity","XMLNode","isObject","require","module","exports","parent","pe","name","value","Error","debugInfo","stringify","type","EntityDeclaration","dtdEntityValue","internal","pubID","sysID","dtdPubID","dtdSysID","nData","dtdNData","options","writer","dtdEntity","filterOptions","Object","defineProperty","prototype","get","call"],"mappings":"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","sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLDTDEntity, XMLNode, isObject;\n\n  ({isObject} = require('./Utility'));\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  // Represents an entity declaration in the DTD\n  module.exports = XMLDTDEntity = (function() {\n    class XMLDTDEntity extends XMLNode {\n      // Initializes a new instance of `XMLDTDEntity`\n\n      // `parent` the parent `XMLDocType` element\n      // `pe` whether this is a parameter entity or a general entity\n      //      defaults to `false` (general entity)\n      // `name` the name of the entity\n      // `value` internal entity value or an object with external entity details\n      // `value.pubID` public identifier\n      // `value.sysID` system identifier\n      // `value.nData` notation declaration\n      constructor(parent, pe, name, value) {\n        super(parent);\n        if (name == null) {\n          throw new Error(\"Missing DTD entity name. \" + this.debugInfo(name));\n        }\n        if (value == null) {\n          throw new Error(\"Missing DTD entity value. \" + this.debugInfo(name));\n        }\n        this.pe = !!pe;\n        this.name = this.stringify.name(name);\n        this.type = NodeType.EntityDeclaration;\n        if (!isObject(value)) {\n          this.value = this.stringify.dtdEntityValue(value);\n          this.internal = true;\n        } else {\n          if (!value.pubID && !value.sysID) {\n            throw new Error(\"Public and/or system identifiers are required for an external entity. \" + this.debugInfo(name));\n          }\n          if (value.pubID && !value.sysID) {\n            throw new Error(\"System identifier is required for a public external entity. \" + this.debugInfo(name));\n          }\n          this.internal = false;\n          if (value.pubID != null) {\n            this.pubID = this.stringify.dtdPubID(value.pubID);\n          }\n          if (value.sysID != null) {\n            this.sysID = this.stringify.dtdSysID(value.sysID);\n          }\n          if (value.nData != null) {\n            this.nData = this.stringify.dtdNData(value.nData);\n          }\n          if (this.pe && this.nData) {\n            throw new Error(\"Notation declaration is not allowed in a parameter entity. \" + this.debugInfo(name));\n          }\n        }\n      }\n\n      // Converts the XML fragment to string\n\n      // `options.pretty` pretty prints the result\n      // `options.indent` indentation for pretty print\n      // `options.offset` how many indentations to add to every line for pretty print\n      // `options.newline` newline sequence for pretty print\n      toString(options) {\n        return this.options.writer.dtdEntity(this, this.options.writer.filterOptions(options));\n      }\n\n    };\n\n    // DOM level 1\n    Object.defineProperty(XMLDTDEntity.prototype, 'publicId', {\n      get: function() {\n        return this.pubID;\n      }\n    });\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'systemId', {\n      get: function() {\n        return this.sysID;\n      }\n    });\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'notationName', {\n      get: function() {\n        return this.nData || null;\n      }\n    });\n\n    // DOM level 3\n    Object.defineProperty(XMLDTDEntity.prototype, 'inputEncoding', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'xmlEncoding', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'xmlVersion', {\n      get: function() {\n        return null;\n      }\n    });\n\n    return XMLDTDEntity;\n\n  }).call(this);\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}