{"ast":null,"code":"\"use strict\";\n\nvar _assertThisInitialized = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _get = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _regeneratorRuntime = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SyncDocumentImpl = exports.SyncDocument = void 0;\n\nvar syncerror_1 = require(\"./utils/syncerror\");\n\nvar sanitize_1 = require(\"./utils/sanitize\");\n\nvar logger_1 = require(\"./utils/logger\");\n\nvar entity_1 = require(\"./entity\");\n\nvar mergingqueue_1 = require(\"./mergingqueue\");\n\nvar closeable_1 = require(\"./closeable\");\n\nvar SyncDocumentImpl = /*#__PURE__*/function (_entity_1$SyncEntity) {\n  _inherits(SyncDocumentImpl, _entity_1$SyncEntity);\n\n  var _super = _createSuper(SyncDocumentImpl);\n\n  /**\n   * @private\n   */\n  function SyncDocumentImpl(services, descriptor, removalHandler) {\n    var _this;\n\n    _classCallCheck(this, SyncDocumentImpl);\n\n    _this = _super.call(this, services, removalHandler);\n    _this.isDeleted = false;\n\n    var updateRequestReducer = function updateRequestReducer(acc, input) {\n      return typeof input.ttl === 'number' ? {\n        ttl: input.ttl\n      } : acc;\n    };\n\n    _this.updateMergingQueue = new mergingqueue_1.MergingQueue(updateRequestReducer);\n    _this.descriptor = descriptor;\n    _this.descriptor.data = _this.descriptor.data || {};\n    _this.descriptor.date_updated = new Date(_this.descriptor.date_updated);\n    return _this;\n  } // private props\n\n\n  _createClass(SyncDocumentImpl, [{\n    key: \"uri\",\n    get: function get() {\n      return this.descriptor.url;\n    }\n  }, {\n    key: \"revision\",\n    get: function get() {\n      return this.descriptor.revision;\n    }\n  }, {\n    key: \"lastEventId\",\n    get: function get() {\n      return this.descriptor.last_event_id;\n    }\n  }, {\n    key: \"dateExpires\",\n    get: function get() {\n      return this.descriptor.date_expires;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return 'document';\n    } // below properties are specific to Insights only\n\n  }, {\n    key: \"indexName\",\n    get: function get() {\n      return undefined;\n    }\n  }, {\n    key: \"queryString\",\n    get: function get() {\n      return undefined;\n    } // public props, documented along with class description\n\n  }, {\n    key: \"sid\",\n    get: function get() {\n      return this.descriptor.sid;\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.descriptor.data;\n    }\n  }, {\n    key: \"dateUpdated\",\n    get: function get() {\n      return this.descriptor.date_updated;\n    }\n  }, {\n    key: \"uniqueName\",\n    get: function get() {\n      return this.descriptor.unique_name || null;\n    }\n    /**\n     * Update data entity with new data\n     * @private\n     */\n\n  }, {\n    key: \"_update\",\n    value: function _update(update) {\n      update.date_created = new Date(update.date_created);\n\n      switch (update.type) {\n        case 'document_updated':\n          if (update.id > this.lastEventId) {\n            this.descriptor.last_event_id = update.id;\n            this.descriptor.revision = update.document_revision;\n            this.descriptor.date_updated = update.date_created;\n            this.descriptor.data = update.document_data;\n            this.broadcastEventToListeners('updated', {\n              value: update.document_data,\n              isLocal: false\n            });\n            this.services.storage.update(this.type, this.sid, this.uniqueName, {\n              last_event_id: update.id,\n              revision: update.document_revision,\n              date_updated: update.date_created,\n              data: update.document_data\n            });\n          } else {\n            logger_1.default.trace('Document update skipped, current:', this.lastEventId, ', remote:', update.id);\n          }\n\n          break;\n\n        case 'document_removed':\n          this.onRemoved(false);\n          break;\n      }\n    }\n  }, {\n    key: \"set\",\n    value: function () {\n      var _set = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value, metadataUpdates) {\n        var _this2 = this;\n\n        var input;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                input = metadataUpdates || {};\n                sanitize_1.validateOptionalTtl(input.ttl);\n                return _context.abrupt(\"return\", this.updateMergingQueue.squashAndAdd(input, function (input) {\n                  return _this2._setUnconditionally(value, input.ttl);\n                }));\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function set(_x, _x2) {\n        return _set.apply(this, arguments);\n      }\n\n      return set;\n    }()\n  }, {\n    key: \"mutate\",\n    value: function () {\n      var _mutate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(mutator, metadataUpdates) {\n        var _this3 = this;\n\n        var input;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                input = metadataUpdates || {};\n                sanitize_1.validateOptionalTtl(input.ttl);\n                return _context2.abrupt(\"return\", this.updateMergingQueue.add(input, function (input) {\n                  return _this3._setWithIfMatch(mutator, input.ttl);\n                }));\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function mutate(_x3, _x4) {\n        return _mutate.apply(this, arguments);\n      }\n\n      return mutate;\n    }()\n  }, {\n    key: \"update\",\n    value: function () {\n      var _update2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(obj, metadataUpdates) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this.mutate(function (remote) {\n                  return Object.assign(remote, obj);\n                }, metadataUpdates));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function update(_x5, _x6) {\n        return _update2.apply(this, arguments);\n      }\n\n      return update;\n    }()\n  }, {\n    key: \"setTtl\",\n    value: function () {\n      var _setTtl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(ttl) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                sanitize_1.validateMandatoryTtl(ttl);\n                _context4.next = 3;\n                return this._postUpdateToServer({\n                  ttl: ttl\n                });\n\n              case 3:\n                response = _context4.sent;\n                this.descriptor.date_expires = response.date_expires;\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function setTtl(_x7) {\n        return _setTtl.apply(this, arguments);\n      }\n\n      return setTtl;\n    }()\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_setUnconditionally\",\n    value: function () {\n      var _setUnconditionally2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(value, ttl) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this._postUpdateToServer({\n                  data: value,\n                  revision: undefined,\n                  ttl: ttl\n                });\n\n              case 2:\n                result = _context5.sent;\n\n                this._handleSuccessfulUpdateResult(result);\n\n                return _context5.abrupt(\"return\", this.value);\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function _setUnconditionally(_x8, _x9) {\n        return _setUnconditionally2.apply(this, arguments);\n      }\n\n      return _setUnconditionally;\n    }()\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_setWithIfMatch\",\n    value: function () {\n      var _setWithIfMatch2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(mutatorFunction, ttl) {\n        var data, revision, result;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                data = mutatorFunction(sanitize_1.deepClone(this.value));\n\n                if (!data) {\n                  _context6.next = 22;\n                  break;\n                }\n\n                revision = this.revision;\n                _context6.prev = 3;\n                _context6.next = 6;\n                return this._postUpdateToServer({\n                  data: data,\n                  revision: revision,\n                  ttl: ttl\n                });\n\n              case 6:\n                result = _context6.sent;\n\n                this._handleSuccessfulUpdateResult(result);\n\n                return _context6.abrupt(\"return\", this.value);\n\n              case 11:\n                _context6.prev = 11;\n                _context6.t0 = _context6[\"catch\"](3);\n\n                if (!(_context6.t0.status === 412)) {\n                  _context6.next = 19;\n                  break;\n                }\n\n                _context6.next = 16;\n                return this._softSync();\n\n              case 16:\n                return _context6.abrupt(\"return\", this._setWithIfMatch(mutatorFunction));\n\n              case 19:\n                throw _context6.t0;\n\n              case 20:\n                _context6.next = 23;\n                break;\n\n              case 22:\n                return _context6.abrupt(\"return\", this.value);\n\n              case 23:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[3, 11]]);\n      }));\n\n      function _setWithIfMatch(_x10, _x11) {\n        return _setWithIfMatch2.apply(this, arguments);\n      }\n\n      return _setWithIfMatch;\n    }()\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_handleSuccessfulUpdateResult\",\n    value: function _handleSuccessfulUpdateResult(result) {\n      if (result.last_event_id > this.descriptor.last_event_id) {\n        // Ignore returned value if we already got a newer one\n        this.descriptor.revision = result.revision;\n        this.descriptor.data = result.data;\n        this.descriptor.last_event_id = result.last_event_id;\n        this.descriptor.date_expires = result.date_expires;\n        this.descriptor.date_updated = new Date(result.date_updated);\n        this.services.storage.update(this.type, this.sid, this.uniqueName, {\n          last_event_id: result.last_event_id,\n          revision: result.revision,\n          date_updated: result.date_updated,\n          data: result.data\n        });\n        this.broadcastEventToListeners('updated', {\n          value: this.value,\n          isLocal: true\n        });\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_postUpdateToServer\",\n    value: function () {\n      var _postUpdateToServer2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(request) {\n        var requestBody, ifMatch, response;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (this.isDeleted) {\n                  _context7.next = 17;\n                  break;\n                }\n\n                requestBody = {\n                  data: request.data\n                };\n\n                if (request.ttl !== undefined) {\n                  requestBody.ttl = request.ttl;\n                }\n\n                ifMatch = request.revision;\n                _context7.prev = 4;\n                _context7.next = 7;\n                return this.services.network.post(this.uri, requestBody, ifMatch);\n\n              case 7:\n                response = _context7.sent;\n                return _context7.abrupt(\"return\", {\n                  revision: response.body.revision,\n                  data: request.data,\n                  last_event_id: response.body.last_event_id,\n                  date_updated: response.body.date_updated,\n                  date_expires: response.body.date_expires\n                });\n\n              case 11:\n                _context7.prev = 11;\n                _context7.t0 = _context7[\"catch\"](4);\n\n                if (_context7.t0.status === 404) {\n                  this.onRemoved(false);\n                }\n\n                throw _context7.t0;\n\n              case 15:\n                _context7.next = 18;\n                break;\n\n              case 17:\n                return _context7.abrupt(\"return\", Promise.reject(new syncerror_1.SyncError('The Document has been removed', 404, 54100)));\n\n              case 18:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[4, 11]]);\n      }));\n\n      function _postUpdateToServer(_x12) {\n        return _postUpdateToServer2.apply(this, arguments);\n      }\n\n      return _postUpdateToServer;\n    }()\n    /**\n     * Get new data from server\n     * @private\n     */\n\n  }, {\n    key: \"_softSync\",\n    value: function () {\n      var _softSync2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var _this4 = this;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                return _context8.abrupt(\"return\", this.services.network.get(this.uri).then(function (response) {\n                  var event = {\n                    type: 'document_updated',\n                    id: response.body.last_event_id,\n                    document_revision: response.body.revision,\n                    document_data: response.body.data,\n                    date_created: response.body.date_updated\n                  };\n\n                  _this4._update(event);\n\n                  return _this4;\n                }).catch(function (err) {\n                  if (err.status === 404) {\n                    _this4.onRemoved(false);\n                  } else {\n                    logger_1.default.error(\"Can't get updates for \".concat(_this4.sid, \":\"), err);\n                  }\n                }));\n\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function _softSync() {\n        return _softSync2.apply(this, arguments);\n      }\n\n      return _softSync;\n    }()\n  }, {\n    key: \"onRemoved\",\n    value: function onRemoved(locally) {\n      if (this.isDeleted) {\n        return;\n      } else {\n        this.isDeleted = true;\n\n        this._unsubscribe();\n\n        this.removalHandler(this.type, this.sid, this.uniqueName);\n        this.broadcastEventToListeners('removed', {\n          isLocal: locally\n        });\n      }\n    }\n  }, {\n    key: \"removeDocument\",\n    value: function () {\n      var _removeDocument = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (this.isDeleted) {\n                  _context9.next = 6;\n                  break;\n                }\n\n                _context9.next = 3;\n                return this.services.network.delete(this.uri);\n\n              case 3:\n                this.onRemoved(true);\n                _context9.next = 7;\n                break;\n\n              case 6:\n                return _context9.abrupt(\"return\", Promise.reject(new syncerror_1.SyncError('The Document has been removed', 404, 54100)));\n\n              case 7:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function removeDocument() {\n        return _removeDocument.apply(this, arguments);\n      }\n\n      return removeDocument;\n    }()\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'document';\n    }\n  }]);\n\n  return SyncDocumentImpl;\n}(entity_1.SyncEntity);\n\nexports.SyncDocumentImpl = SyncDocumentImpl;\n/**\n * @class\n * @alias Document\n * @classdesc Represents a Sync Document, the contents of which is a single JSON object.\n * Use the {@link Client#document} method to obtain a reference to a Sync Document.\n * @property {String} sid The immutable identifier of this document, assigned by the system.\n * @property {String} [uniqueName=null] An optional immutable identifier that may be assigned by the programmer\n * to this document during creation. Globally unique among other Documents.\n * @property {Date} dateUpdated Date when the Document was last updated.\n * @property {Object} value The contents of this document.\n *\n * @fires Document#removed\n * @fires Document#updated\n */\n\nvar SyncDocument = /*#__PURE__*/function (_closeable_1$default) {\n  _inherits(SyncDocument, _closeable_1$default);\n\n  var _super2 = _createSuper(SyncDocument);\n\n  function SyncDocument(syncDocumentImpl) {\n    var _this5;\n\n    _classCallCheck(this, SyncDocument);\n\n    _this5 = _super2.call(this);\n    _this5.syncDocumentImpl = syncDocumentImpl;\n\n    _this5.syncDocumentImpl.attach(_assertThisInitialized(_this5));\n\n    return _this5;\n  } // private props\n\n\n  _createClass(SyncDocument, [{\n    key: \"uri\",\n    get: function get() {\n      return this.syncDocumentImpl.uri;\n    }\n  }, {\n    key: \"revision\",\n    get: function get() {\n      return this.syncDocumentImpl.revision;\n    }\n  }, {\n    key: \"lastEventId\",\n    get: function get() {\n      return this.syncDocumentImpl.lastEventId;\n    }\n  }, {\n    key: \"dateExpires\",\n    get: function get() {\n      return this.syncDocumentImpl.dateExpires;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return SyncDocumentImpl.type;\n    } // public props, documented along with class description\n\n  }, {\n    key: \"sid\",\n    get: function get() {\n      return this.syncDocumentImpl.sid;\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this.syncDocumentImpl.value;\n    }\n  }, {\n    key: \"dateUpdated\",\n    get: function get() {\n      return this.syncDocumentImpl.dateUpdated;\n    }\n  }, {\n    key: \"uniqueName\",\n    get: function get() {\n      return this.syncDocumentImpl.uniqueName;\n    }\n    /**\n     * Assign new contents to this document. The current value will be overwritten.\n     * @param {Object} value The new contents to assign.\n     * @param {Document#Metadata} [metadataUpdates] New document metadata.\n     * @returns {Promise<Object>} A promise resolving to the new value of the document.\n     * @public\n     * @example\n     * // Say, the Document value is { name: 'John Smith', age: 34 }\n     * document.set({ name: 'Barbara Oaks' }, { ttl: 86400 })\n     *   .then(function(newValue) {\n     *     // Now the Document value is { name: 'Barbara Oaks' }\n     *     console.log('Document set() successful, new value:', newValue);\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Document set() failed', error);\n     *   });\n     */\n\n  }, {\n    key: \"set\",\n    value: function () {\n      var _set2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(value, metadataUpdates) {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                this.ensureNotClosed();\n                return _context10.abrupt(\"return\", this.syncDocumentImpl.set(value, metadataUpdates));\n\n              case 2:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function set(_x13, _x14) {\n        return _set2.apply(this, arguments);\n      }\n\n      return set;\n    }()\n    /**\n     * Schedules a modification to this document that will apply a mutation function.\n     * @param {Document~Mutator} mutator A function that outputs a new value based on the existing value.\n     * May be called multiple times, particularly if this Document is modified concurrently by remote code.\n     * If the mutation ultimately succeeds, the Document will have made the particular transition described\n     * by this function.\n     * @param {Document#Metadata} [metadataUpdates] New document metadata.\n     * @return {Promise<Object>} Resolves with the most recent Document state, whether the output of a\n     *    successful mutation or a state that prompted graceful cancellation (mutator returned <code>null</code>).\n     * @public\n     * @example\n     * var mutatorFunction = function(currentValue) {\n     *     currentValue.viewCount = (currentValue.viewCount || 0) + 1;\n     *     return currentValue;\n     * };\n     * document.mutate(mutatorFunction, { ttl: 86400 }))\n     *   .then(function(newValue) {\n     *     console.log('Document mutate() successful, new value:', newValue);\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Document mutate() failed', error);\n     *   });\n     */\n\n  }, {\n    key: \"mutate\",\n    value: function () {\n      var _mutate2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(mutator, metadataUpdates) {\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                this.ensureNotClosed();\n                return _context11.abrupt(\"return\", this.syncDocumentImpl.mutate(mutator, metadataUpdates));\n\n              case 2:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function mutate(_x15, _x16) {\n        return _mutate2.apply(this, arguments);\n      }\n\n      return mutate;\n    }()\n    /**\n     * Modify a document by appending new fields (or by overwriting existing ones) with the values from the provided Object.\n     * This is equivalent to\n     * <pre>\n     * document.mutate(function(currentValue) {\n     *   return Object.assign(currentValue, obj));\n     * });\n     * </pre>\n     * @param {Object} obj Specifies the particular (top-level) attributes that will receive new values.\n     * @param {Document#Metadata} [metadataUpdates] New document metadata.\n     * @return {Promise<Object>} A promise resolving to the new value of the document.\n     * @public\n     * @example\n     * // Say, the Document value is { name: 'John Smith' }\n     * document.update({ age: 34 }, { ttl: 86400 })\n     *   .then(function(newValue) {\n     *     // Now the Document value is { name: 'John Smith', age: 34 }\n     *     console.log('Document update() successful, new value:', newValue);\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Document update() failed', error);\n     *   });\n     */\n\n  }, {\n    key: \"update\",\n    value: function () {\n      var _update3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(obj, metadataUpdates) {\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                this.ensureNotClosed();\n                return _context12.abrupt(\"return\", this.syncDocumentImpl.update(obj, metadataUpdates));\n\n              case 2:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function update(_x17, _x18) {\n        return _update3.apply(this, arguments);\n      }\n\n      return update;\n    }()\n    /**\n     * Update the time-to-live of the document.\n     * @param {Number} ttl Specifies the time-to-live in seconds after which the document is subject to automatic deletion. The value 0 means infinity.\n     * @return {Promise<void>} A promise that resolves after the TTL update was successful.\n     * @public\n     * @example\n     * document.setTtl(3600)\n     *   .then(function() {\n     *     console.log('Document setTtl() successful');\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Document setTtl() failed', error);\n     *   });\n     */\n\n  }, {\n    key: \"setTtl\",\n    value: function () {\n      var _setTtl2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(ttl) {\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                this.ensureNotClosed();\n                return _context13.abrupt(\"return\", this.syncDocumentImpl.setTtl(ttl));\n\n              case 2:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function setTtl(_x19) {\n        return _setTtl2.apply(this, arguments);\n      }\n\n      return setTtl;\n    }()\n    /**\n     * Delete a document.\n     * @return {Promise<void>} A promise which resolves if (and only if) the document is ultimately deleted.\n     * @public\n     * @example\n     * document.removeDocument()\n     *   .then(function() {\n     *     console.log('Document removeDocument() successful');\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Document removeDocument() failed', error);\n     *   });\n     */\n\n  }, {\n    key: \"removeDocument\",\n    value: function () {\n      var _removeDocument2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                this.ensureNotClosed();\n                return _context14.abrupt(\"return\", this.syncDocumentImpl.removeDocument());\n\n              case 2:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function removeDocument() {\n        return _removeDocument2.apply(this, arguments);\n      }\n\n      return removeDocument;\n    }()\n    /**\n     * Conclude work with the document instance and remove all event listeners attached to it.\n     * Any subsequent operation on this object will be rejected with error.\n     * Other local copies of this document will continue operating and receiving events normally.\n     * @public\n     * @example\n     * document.close();\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      _get(_getPrototypeOf(SyncDocument.prototype), \"close\", this).call(this);\n\n      this.syncDocumentImpl.detach(this.listenerUuid);\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return SyncDocumentImpl.type;\n    }\n  }]);\n\n  return SyncDocument;\n}(closeable_1.default);\n\nexports.SyncDocument = SyncDocument;\nexports.default = SyncDocument;\n/**\n * Contains Document metadata.\n * @typedef {Object} Document#Metadata\n * @property {Number} [ttl] Specifies the time-to-live in seconds after which the document is subject to automatic deletion.\n * The value 0 means infinity.\n */\n\n/**\n * Applies a transformation to the document value.\n * @callback Document~Mutator\n * @param {Object} currentValue The current value of the document in the cloud.\n * @return {Object} The desired new value for the document or <code>null</code> to gracefully cancel the mutation.\n */\n\n/**\n * Fired when the document is removed, whether the remover was local or remote.\n * @event Document#removed\n * @param {Object} args Arguments provided with the event.\n * @param {Boolean} args.isLocal Equals 'true' if document was removed by local actor, 'false' otherwise.\n * @example\n * document.on('removed', function(args) {\n *   console.log('Document ' + document.sid + ' was removed');\n *   console.log('args.isLocal:', args.isLocal);\n * });\n */\n\n/**\n * Fired when the document's contents have changed, whether the updater was local or remote.\n * @event Document#updated\n * @param {Object} args Arguments provided with the event.\n * @param {Object} args.value A snapshot of the document's new contents.\n * @param {Boolean} args.isLocal Equals 'true' if document was updated by local actor, 'false' otherwise.\n * @example\n * document.on('updated', function(args) {\n *   console.log('Document ' + document.sid + ' was updated');\n *   console.log('args.value: ', args.value);\n *   console.log('args.isLocal: ', args.isLocal);\n * });\n */","map":{"version":3,"sources":["/Users/stefanpjanic/Desktop/mango_dev/node_modules/twilio-sync/lib/syncdocument.js"],"names":["Object","defineProperty","exports","value","SyncDocumentImpl","SyncDocument","syncerror_1","require","sanitize_1","logger_1","entity_1","mergingqueue_1","closeable_1","services","descriptor","removalHandler","isDeleted","updateRequestReducer","acc","input","ttl","updateMergingQueue","MergingQueue","data","date_updated","Date","url","revision","last_event_id","date_expires","undefined","sid","unique_name","update","date_created","type","id","lastEventId","document_revision","document_data","broadcastEventToListeners","isLocal","storage","uniqueName","default","trace","onRemoved","metadataUpdates","validateOptionalTtl","squashAndAdd","_setUnconditionally","mutator","add","_setWithIfMatch","obj","mutate","remote","assign","validateMandatoryTtl","_postUpdateToServer","response","result","_handleSuccessfulUpdateResult","mutatorFunction","deepClone","status","_softSync","request","requestBody","ifMatch","network","post","uri","body","Promise","reject","SyncError","get","then","event","_update","catch","err","error","locally","_unsubscribe","delete","SyncEntity","syncDocumentImpl","attach","dateExpires","dateUpdated","ensureNotClosed","set","setTtl","removeDocument","detach","listenerUuid"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SyncDocumentImpl = exports.SyncDocument = void 0;\nconst syncerror_1 = require(\"./utils/syncerror\");\nconst sanitize_1 = require(\"./utils/sanitize\");\nconst logger_1 = require(\"./utils/logger\");\nconst entity_1 = require(\"./entity\");\nconst mergingqueue_1 = require(\"./mergingqueue\");\nconst closeable_1 = require(\"./closeable\");\nclass SyncDocumentImpl extends entity_1.SyncEntity {\n    /**\n     * @private\n     */\n    constructor(services, descriptor, removalHandler) {\n        super(services, removalHandler);\n        this.isDeleted = false;\n        const updateRequestReducer = (acc, input) => (typeof input.ttl === 'number') ? { ttl: input.ttl }\n            : acc;\n        this.updateMergingQueue = new mergingqueue_1.MergingQueue(updateRequestReducer);\n        this.descriptor = descriptor;\n        this.descriptor.data = this.descriptor.data || {};\n        this.descriptor.date_updated = new Date(this.descriptor.date_updated);\n    }\n    // private props\n    get uri() {\n        return this.descriptor.url;\n    }\n    get revision() {\n        return this.descriptor.revision;\n    }\n    get lastEventId() {\n        return this.descriptor.last_event_id;\n    }\n    get dateExpires() {\n        return this.descriptor.date_expires;\n    }\n    static get type() {\n        return 'document';\n    }\n    get type() {\n        return 'document';\n    }\n    // below properties are specific to Insights only\n    get indexName() {\n        return undefined;\n    }\n    get queryString() {\n        return undefined;\n    }\n    // public props, documented along with class description\n    get sid() {\n        return this.descriptor.sid;\n    }\n    get value() {\n        return this.descriptor.data;\n    }\n    get dateUpdated() {\n        return this.descriptor.date_updated;\n    }\n    get uniqueName() {\n        return this.descriptor.unique_name || null;\n    }\n    /**\n     * Update data entity with new data\n     * @private\n     */\n    _update(update) {\n        update.date_created = new Date(update.date_created);\n        switch (update.type) {\n            case 'document_updated':\n                if (update.id > this.lastEventId) {\n                    this.descriptor.last_event_id = update.id;\n                    this.descriptor.revision = update.document_revision;\n                    this.descriptor.date_updated = update.date_created;\n                    this.descriptor.data = update.document_data;\n                    this.broadcastEventToListeners('updated', { value: update.document_data, isLocal: false });\n                    this.services.storage.update(this.type, this.sid, this.uniqueName, {\n                        last_event_id: update.id,\n                        revision: update.document_revision,\n                        date_updated: update.date_created,\n                        data: update.document_data\n                    });\n                }\n                else {\n                    logger_1.default.trace('Document update skipped, current:', this.lastEventId, ', remote:', update.id);\n                }\n                break;\n            case 'document_removed':\n                this.onRemoved(false);\n                break;\n        }\n    }\n    async set(value, metadataUpdates) {\n        const input = metadataUpdates || {};\n        sanitize_1.validateOptionalTtl(input.ttl);\n        return this.updateMergingQueue.squashAndAdd(input, input => this._setUnconditionally(value, input.ttl));\n    }\n    async mutate(mutator, metadataUpdates) {\n        const input = metadataUpdates || {};\n        sanitize_1.validateOptionalTtl(input.ttl);\n        return this.updateMergingQueue.add(input, input => this._setWithIfMatch(mutator, input.ttl));\n    }\n    async update(obj, metadataUpdates) {\n        return this.mutate(remote => Object.assign(remote, obj), metadataUpdates);\n    }\n    async setTtl(ttl) {\n        sanitize_1.validateMandatoryTtl(ttl);\n        const response = await this._postUpdateToServer({ ttl });\n        this.descriptor.date_expires = response.date_expires;\n    }\n    /**\n     * @private\n     */\n    async _setUnconditionally(value, ttl) {\n        let result = await this._postUpdateToServer({ data: value, revision: undefined, ttl });\n        this._handleSuccessfulUpdateResult(result);\n        return this.value;\n    }\n    /**\n     * @private\n     */\n    async _setWithIfMatch(mutatorFunction, ttl) {\n        let data = mutatorFunction(sanitize_1.deepClone(this.value));\n        if (data) {\n            let revision = this.revision;\n            try {\n                let result = await this._postUpdateToServer({ data, revision, ttl });\n                this._handleSuccessfulUpdateResult(result);\n                return this.value;\n            }\n            catch (error) {\n                if (error.status === 412) {\n                    await this._softSync();\n                    return this._setWithIfMatch(mutatorFunction);\n                }\n                else {\n                    throw error;\n                }\n            }\n        }\n        else {\n            return this.value;\n        }\n    }\n    /**\n     * @private\n     */\n    _handleSuccessfulUpdateResult(result) {\n        if (result.last_event_id > this.descriptor.last_event_id) {\n            // Ignore returned value if we already got a newer one\n            this.descriptor.revision = result.revision;\n            this.descriptor.data = result.data;\n            this.descriptor.last_event_id = result.last_event_id;\n            this.descriptor.date_expires = result.date_expires;\n            this.descriptor.date_updated = new Date(result.date_updated);\n            this.services.storage.update(this.type, this.sid, this.uniqueName, {\n                last_event_id: result.last_event_id,\n                revision: result.revision,\n                date_updated: result.date_updated,\n                data: result.data\n            });\n            this.broadcastEventToListeners('updated', { value: this.value, isLocal: true });\n        }\n    }\n    /**\n     * @private\n     */\n    async _postUpdateToServer(request) {\n        if (!this.isDeleted) {\n            const requestBody = {\n                data: request.data\n            };\n            if (request.ttl !== undefined) {\n                requestBody.ttl = request.ttl;\n            }\n            const ifMatch = request.revision;\n            try {\n                const response = await this.services.network.post(this.uri, requestBody, ifMatch);\n                return {\n                    revision: response.body.revision,\n                    data: request.data,\n                    last_event_id: response.body.last_event_id,\n                    date_updated: response.body.date_updated,\n                    date_expires: response.body.date_expires\n                };\n            }\n            catch (error) {\n                if (error.status === 404) {\n                    this.onRemoved(false);\n                }\n                throw error;\n            }\n        }\n        else {\n            return Promise.reject(new syncerror_1.SyncError('The Document has been removed', 404, 54100));\n        }\n    }\n    /**\n     * Get new data from server\n     * @private\n     */\n    async _softSync() {\n        return this.services.network.get(this.uri)\n            .then(response => {\n            const event = {\n                type: 'document_updated',\n                id: response.body.last_event_id,\n                document_revision: response.body.revision,\n                document_data: response.body.data,\n                date_created: response.body.date_updated\n            };\n            this._update(event);\n            return this;\n        })\n            .catch(err => {\n            if (err.status === 404) {\n                this.onRemoved(false);\n            }\n            else {\n                logger_1.default.error(`Can't get updates for ${this.sid}:`, err);\n            }\n        });\n    }\n    onRemoved(locally) {\n        if (this.isDeleted) {\n            return;\n        }\n        else {\n            this.isDeleted = true;\n            this._unsubscribe();\n            this.removalHandler(this.type, this.sid, this.uniqueName);\n            this.broadcastEventToListeners('removed', { isLocal: locally });\n        }\n    }\n    async removeDocument() {\n        if (!this.isDeleted) {\n            await this.services.network.delete(this.uri);\n            this.onRemoved(true);\n        }\n        else {\n            return Promise.reject(new syncerror_1.SyncError('The Document has been removed', 404, 54100));\n        }\n    }\n}\nexports.SyncDocumentImpl = SyncDocumentImpl;\n/**\n * @class\n * @alias Document\n * @classdesc Represents a Sync Document, the contents of which is a single JSON object.\n * Use the {@link Client#document} method to obtain a reference to a Sync Document.\n * @property {String} sid The immutable identifier of this document, assigned by the system.\n * @property {String} [uniqueName=null] An optional immutable identifier that may be assigned by the programmer\n * to this document during creation. Globally unique among other Documents.\n * @property {Date} dateUpdated Date when the Document was last updated.\n * @property {Object} value The contents of this document.\n *\n * @fires Document#removed\n * @fires Document#updated\n */\nclass SyncDocument extends closeable_1.default {\n    constructor(syncDocumentImpl) {\n        super();\n        this.syncDocumentImpl = syncDocumentImpl;\n        this.syncDocumentImpl.attach(this);\n    }\n    // private props\n    get uri() {\n        return this.syncDocumentImpl.uri;\n    }\n    get revision() {\n        return this.syncDocumentImpl.revision;\n    }\n    get lastEventId() {\n        return this.syncDocumentImpl.lastEventId;\n    }\n    get dateExpires() {\n        return this.syncDocumentImpl.dateExpires;\n    }\n    static get type() {\n        return SyncDocumentImpl.type;\n    }\n    get type() {\n        return SyncDocumentImpl.type;\n    }\n    // public props, documented along with class description\n    get sid() {\n        return this.syncDocumentImpl.sid;\n    }\n    get value() {\n        return this.syncDocumentImpl.value;\n    }\n    get dateUpdated() {\n        return this.syncDocumentImpl.dateUpdated;\n    }\n    get uniqueName() {\n        return this.syncDocumentImpl.uniqueName;\n    }\n    /**\n     * Assign new contents to this document. The current value will be overwritten.\n     * @param {Object} value The new contents to assign.\n     * @param {Document#Metadata} [metadataUpdates] New document metadata.\n     * @returns {Promise<Object>} A promise resolving to the new value of the document.\n     * @public\n     * @example\n     * // Say, the Document value is { name: 'John Smith', age: 34 }\n     * document.set({ name: 'Barbara Oaks' }, { ttl: 86400 })\n     *   .then(function(newValue) {\n     *     // Now the Document value is { name: 'Barbara Oaks' }\n     *     console.log('Document set() successful, new value:', newValue);\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Document set() failed', error);\n     *   });\n     */\n    async set(value, metadataUpdates) {\n        this.ensureNotClosed();\n        return this.syncDocumentImpl.set(value, metadataUpdates);\n    }\n    /**\n     * Schedules a modification to this document that will apply a mutation function.\n     * @param {Document~Mutator} mutator A function that outputs a new value based on the existing value.\n     * May be called multiple times, particularly if this Document is modified concurrently by remote code.\n     * If the mutation ultimately succeeds, the Document will have made the particular transition described\n     * by this function.\n     * @param {Document#Metadata} [metadataUpdates] New document metadata.\n     * @return {Promise<Object>} Resolves with the most recent Document state, whether the output of a\n     *    successful mutation or a state that prompted graceful cancellation (mutator returned <code>null</code>).\n     * @public\n     * @example\n     * var mutatorFunction = function(currentValue) {\n     *     currentValue.viewCount = (currentValue.viewCount || 0) + 1;\n     *     return currentValue;\n     * };\n     * document.mutate(mutatorFunction, { ttl: 86400 }))\n     *   .then(function(newValue) {\n     *     console.log('Document mutate() successful, new value:', newValue);\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Document mutate() failed', error);\n     *   });\n     */\n    async mutate(mutator, metadataUpdates) {\n        this.ensureNotClosed();\n        return this.syncDocumentImpl.mutate(mutator, metadataUpdates);\n    }\n    /**\n     * Modify a document by appending new fields (or by overwriting existing ones) with the values from the provided Object.\n     * This is equivalent to\n     * <pre>\n     * document.mutate(function(currentValue) {\n     *   return Object.assign(currentValue, obj));\n     * });\n     * </pre>\n     * @param {Object} obj Specifies the particular (top-level) attributes that will receive new values.\n     * @param {Document#Metadata} [metadataUpdates] New document metadata.\n     * @return {Promise<Object>} A promise resolving to the new value of the document.\n     * @public\n     * @example\n     * // Say, the Document value is { name: 'John Smith' }\n     * document.update({ age: 34 }, { ttl: 86400 })\n     *   .then(function(newValue) {\n     *     // Now the Document value is { name: 'John Smith', age: 34 }\n     *     console.log('Document update() successful, new value:', newValue);\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Document update() failed', error);\n     *   });\n     */\n    async update(obj, metadataUpdates) {\n        this.ensureNotClosed();\n        return this.syncDocumentImpl.update(obj, metadataUpdates);\n    }\n    /**\n     * Update the time-to-live of the document.\n     * @param {Number} ttl Specifies the time-to-live in seconds after which the document is subject to automatic deletion. The value 0 means infinity.\n     * @return {Promise<void>} A promise that resolves after the TTL update was successful.\n     * @public\n     * @example\n     * document.setTtl(3600)\n     *   .then(function() {\n     *     console.log('Document setTtl() successful');\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Document setTtl() failed', error);\n     *   });\n     */\n    async setTtl(ttl) {\n        this.ensureNotClosed();\n        return this.syncDocumentImpl.setTtl(ttl);\n    }\n    /**\n     * Delete a document.\n     * @return {Promise<void>} A promise which resolves if (and only if) the document is ultimately deleted.\n     * @public\n     * @example\n     * document.removeDocument()\n     *   .then(function() {\n     *     console.log('Document removeDocument() successful');\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Document removeDocument() failed', error);\n     *   });\n     */\n    async removeDocument() {\n        this.ensureNotClosed();\n        return this.syncDocumentImpl.removeDocument();\n    }\n    /**\n     * Conclude work with the document instance and remove all event listeners attached to it.\n     * Any subsequent operation on this object will be rejected with error.\n     * Other local copies of this document will continue operating and receiving events normally.\n     * @public\n     * @example\n     * document.close();\n     */\n    close() {\n        super.close();\n        this.syncDocumentImpl.detach(this.listenerUuid);\n    }\n}\nexports.SyncDocument = SyncDocument;\nexports.default = SyncDocument;\n/**\n * Contains Document metadata.\n * @typedef {Object} Document#Metadata\n * @property {Number} [ttl] Specifies the time-to-live in seconds after which the document is subject to automatic deletion.\n * The value 0 means infinity.\n */\n/**\n * Applies a transformation to the document value.\n * @callback Document~Mutator\n * @param {Object} currentValue The current value of the document in the cloud.\n * @return {Object} The desired new value for the document or <code>null</code> to gracefully cancel the mutation.\n */\n/**\n * Fired when the document is removed, whether the remover was local or remote.\n * @event Document#removed\n * @param {Object} args Arguments provided with the event.\n * @param {Boolean} args.isLocal Equals 'true' if document was removed by local actor, 'false' otherwise.\n * @example\n * document.on('removed', function(args) {\n *   console.log('Document ' + document.sid + ' was removed');\n *   console.log('args.isLocal:', args.isLocal);\n * });\n */\n/**\n * Fired when the document's contents have changed, whether the updater was local or remote.\n * @event Document#updated\n * @param {Object} args Arguments provided with the event.\n * @param {Object} args.value A snapshot of the document's new contents.\n * @param {Boolean} args.isLocal Equals 'true' if document was updated by local actor, 'false' otherwise.\n * @example\n * document.on('updated', function(args) {\n *   console.log('Document ' + document.sid + ' was updated');\n *   console.log('args.value: ', args.value);\n *   console.log('args.isLocal: ', args.isLocal);\n * });\n */\n"]},"metadata":{},"sourceType":"script"}