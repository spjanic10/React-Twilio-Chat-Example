{"ast":null,"code":"var _classCallCheck = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\n// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType, XMLCharacterData, XMLProcessingInstruction;\n  NodeType = require('./NodeType');\n  XMLCharacterData = require('./XMLCharacterData'); // Represents a processing instruction\n\n  module.exports = XMLProcessingInstruction = /*#__PURE__*/function (_XMLCharacterData) {\n    \"use strict\";\n\n    _inherits(XMLProcessingInstruction, _XMLCharacterData);\n\n    var _super = _createSuper(XMLProcessingInstruction);\n\n    // Initializes a new instance of `XMLProcessingInstruction`\n    // `parent` the parent node\n    // `target` instruction target\n    // `value` instruction value\n    function XMLProcessingInstruction(parent, target, value) {\n      var _this;\n\n      _classCallCheck(this, XMLProcessingInstruction);\n\n      _this = _super.call(this, parent);\n\n      if (target == null) {\n        throw new Error(\"Missing instruction target. \" + _this.debugInfo());\n      }\n\n      _this.type = NodeType.ProcessingInstruction;\n      _this.target = _this.stringify.insTarget(target);\n      _this.name = _this.target;\n\n      if (value) {\n        _this.value = _this.stringify.insValue(value);\n      }\n\n      return _this;\n    } // Creates and returns a deep clone of `this`\n\n\n    _createClass(XMLProcessingInstruction, [{\n      key: \"clone\",\n      value: function clone() {\n        return Object.create(this);\n      } // Converts the XML fragment to string\n      // `options.pretty` pretty prints the result\n      // `options.indent` indentation for pretty print\n      // `options.offset` how many indentations to add to every line for pretty print\n      // `options.newline` newline sequence for pretty print\n\n    }, {\n      key: \"toString\",\n      value: function toString(options) {\n        return this.options.writer.processingInstruction(this, this.options.writer.filterOptions(options));\n      }\n    }, {\n      key: \"isEqualNode\",\n      value: function isEqualNode(node) {\n        if (!_get(_getPrototypeOf(XMLProcessingInstruction.prototype), \"isEqualNode\", this).call(this, node)) {\n          return false;\n        }\n\n        if (node.target !== this.target) {\n          return false;\n        }\n\n        return true;\n      }\n    }]);\n\n    return XMLProcessingInstruction;\n  }(XMLCharacterData);\n}).call(this);","map":{"version":3,"sources":["/Users/stefanpjanic/Desktop/mango_dev/node_modules/xmlbuilder/lib/XMLProcessingInstruction.js"],"names":["NodeType","XMLCharacterData","XMLProcessingInstruction","require","module","exports","parent","target","value","Error","debugInfo","type","ProcessingInstruction","stringify","insTarget","name","insValue","Object","create","options","writer","processingInstruction","filterOptions","node","call"],"mappings":";;;;;;;;;;;;AAAA;AACA,CAAC,YAAW;AACV,MAAIA,QAAJ,EAAcC,gBAAd,EAAgCC,wBAAhC;AAEAF,EAAAA,QAAQ,GAAGG,OAAO,CAAC,YAAD,CAAlB;AAEAF,EAAAA,gBAAgB,GAAGE,OAAO,CAAC,oBAAD,CAA1B,CALU,CAOV;;AACAC,EAAAA,MAAM,CAACC,OAAP,GAAiBH,wBAAwB;AAAA;;AAAA;;AAAA;;AACvC;AAEA;AACA;AACA;AACA,sCAAYI,MAAZ,EAAoBC,MAApB,EAA4BC,KAA5B,EAAmC;AAAA;;AAAA;;AACjC,gCAAMF,MAAN;;AACA,UAAIC,MAAM,IAAI,IAAd,EAAoB;AAClB,cAAM,IAAIE,KAAJ,CAAU,iCAAiC,MAAKC,SAAL,EAA3C,CAAN;AACD;;AACD,YAAKC,IAAL,GAAYX,QAAQ,CAACY,qBAArB;AACA,YAAKL,MAAL,GAAc,MAAKM,SAAL,CAAeC,SAAf,CAAyBP,MAAzB,CAAd;AACA,YAAKQ,IAAL,GAAY,MAAKR,MAAjB;;AACA,UAAIC,KAAJ,EAAW;AACT,cAAKA,KAAL,GAAa,MAAKK,SAAL,CAAeG,QAAf,CAAwBR,KAAxB,CAAb;AACD;;AAVgC;AAWlC,KAjBsC,CAmBvC;;;AAnBuC;AAAA;AAAA,aAoBvC,iBAAQ;AACN,eAAOS,MAAM,CAACC,MAAP,CAAc,IAAd,CAAP;AACD,OAtBsC,CAwBvC;AAEA;AACA;AACA;AACA;;AA7BuC;AAAA;AAAA,aA8BvC,kBAASC,OAAT,EAAkB;AAChB,eAAO,KAAKA,OAAL,CAAaC,MAAb,CAAoBC,qBAApB,CAA0C,IAA1C,EAAgD,KAAKF,OAAL,CAAaC,MAAb,CAAoBE,aAApB,CAAkCH,OAAlC,CAAhD,CAAP;AACD;AAhCsC;AAAA;AAAA,aAkCvC,qBAAYI,IAAZ,EAAkB;AAChB,YAAI,2FAAmBA,IAAnB,CAAJ,EAA8B;AAC5B,iBAAO,KAAP;AACD;;AACD,YAAIA,IAAI,CAAChB,MAAL,KAAgB,KAAKA,MAAzB,EAAiC;AAC/B,iBAAO,KAAP;AACD;;AACD,eAAO,IAAP;AACD;AA1CsC;;AAAA;AAAA,IAA0CN,gBAA1C,CAAzC;AA8CD,CAtDD,EAsDGuB,IAtDH,CAsDQ,IAtDR","sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLCharacterData, XMLProcessingInstruction;\n\n  NodeType = require('./NodeType');\n\n  XMLCharacterData = require('./XMLCharacterData');\n\n  // Represents a processing instruction\n  module.exports = XMLProcessingInstruction = class XMLProcessingInstruction extends XMLCharacterData {\n    // Initializes a new instance of `XMLProcessingInstruction`\n\n    // `parent` the parent node\n    // `target` instruction target\n    // `value` instruction value\n    constructor(parent, target, value) {\n      super(parent);\n      if (target == null) {\n        throw new Error(\"Missing instruction target. \" + this.debugInfo());\n      }\n      this.type = NodeType.ProcessingInstruction;\n      this.target = this.stringify.insTarget(target);\n      this.name = this.target;\n      if (value) {\n        this.value = this.stringify.insValue(value);\n      }\n    }\n\n    // Creates and returns a deep clone of `this`\n    clone() {\n      return Object.create(this);\n    }\n\n    // Converts the XML fragment to string\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n    toString(options) {\n      return this.options.writer.processingInstruction(this, this.options.writer.filterOptions(options));\n    }\n\n    isEqualNode(node) {\n      if (!super.isEqualNode(node)) {\n        return false;\n      }\n      if (node.target !== this.target) {\n        return false;\n      }\n      return true;\n    }\n\n  };\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}