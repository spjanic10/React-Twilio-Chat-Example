{"ast":null,"code":"var _classCallCheck = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n// Generated by CoffeeScript 2.4.1\n(function () {\n  // Converts values to strings\n  var XMLStringifier,\n      hasProp = {}.hasOwnProperty;\n\n  module.exports = XMLStringifier = function () {\n    var XMLStringifier = /*#__PURE__*/function () {\n      \"use strict\";\n\n      // Initializes a new instance of `XMLStringifier`\n      // `options.version` The version number string of the XML spec to validate against, e.g. 1.0\n      // `options.noDoubleEncoding` whether existing html entities are encoded: true or false\n      // `options.stringify` a set of functions to use for converting values to strings\n      // `options.noValidation` whether values will be validated and escaped or returned as is\n      function XMLStringifier(options) {\n        _classCallCheck(this, XMLStringifier);\n\n        var key, ref, value; // Checks whether the given string contains legal characters\n        // Fails with an exception on error\n        // `str` the string to check\n\n        this.assertLegalChar = this.assertLegalChar.bind(this); // Checks whether the given string contains legal characters for a name\n        // Fails with an exception on error\n        // `str` the string to check\n\n        this.assertLegalName = this.assertLegalName.bind(this);\n        options || (options = {});\n        this.options = options;\n\n        if (!this.options.version) {\n          this.options.version = '1.0';\n        }\n\n        ref = options.stringify || {};\n\n        for (key in ref) {\n          if (!hasProp.call(ref, key)) continue;\n          value = ref[key];\n          this[key] = value;\n        }\n      } // Defaults\n\n\n      _createClass(XMLStringifier, [{\n        key: \"name\",\n        value: function name(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          return this.assertLegalName('' + val || '');\n        }\n      }, {\n        key: \"text\",\n        value: function text(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          return this.assertLegalChar(this.textEscape('' + val || ''));\n        }\n      }, {\n        key: \"cdata\",\n        value: function cdata(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          val = '' + val || '';\n          val = val.replace(']]>', ']]]]><![CDATA[>');\n          return this.assertLegalChar(val);\n        }\n      }, {\n        key: \"comment\",\n        value: function comment(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          val = '' + val || '';\n\n          if (val.match(/--/)) {\n            throw new Error(\"Comment text cannot contain double-hypen: \" + val);\n          }\n\n          return this.assertLegalChar(val);\n        }\n      }, {\n        key: \"raw\",\n        value: function raw(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          return '' + val || '';\n        }\n      }, {\n        key: \"attValue\",\n        value: function attValue(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          return this.assertLegalChar(this.attEscape(val = '' + val || ''));\n        }\n      }, {\n        key: \"insTarget\",\n        value: function insTarget(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          return this.assertLegalChar('' + val || '');\n        }\n      }, {\n        key: \"insValue\",\n        value: function insValue(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          val = '' + val || '';\n\n          if (val.match(/\\?>/)) {\n            throw new Error(\"Invalid processing instruction value: \" + val);\n          }\n\n          return this.assertLegalChar(val);\n        }\n      }, {\n        key: \"xmlVersion\",\n        value: function xmlVersion(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          val = '' + val || '';\n\n          if (!val.match(/1\\.[0-9]+/)) {\n            throw new Error(\"Invalid version number: \" + val);\n          }\n\n          return val;\n        }\n      }, {\n        key: \"xmlEncoding\",\n        value: function xmlEncoding(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          val = '' + val || '';\n\n          if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {\n            throw new Error(\"Invalid encoding: \" + val);\n          }\n\n          return this.assertLegalChar(val);\n        }\n      }, {\n        key: \"xmlStandalone\",\n        value: function xmlStandalone(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          if (val) {\n            return \"yes\";\n          } else {\n            return \"no\";\n          }\n        }\n      }, {\n        key: \"dtdPubID\",\n        value: function dtdPubID(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          return this.assertLegalChar('' + val || '');\n        }\n      }, {\n        key: \"dtdSysID\",\n        value: function dtdSysID(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          return this.assertLegalChar('' + val || '');\n        }\n      }, {\n        key: \"dtdElementValue\",\n        value: function dtdElementValue(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          return this.assertLegalChar('' + val || '');\n        }\n      }, {\n        key: \"dtdAttType\",\n        value: function dtdAttType(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          return this.assertLegalChar('' + val || '');\n        }\n      }, {\n        key: \"dtdAttDefault\",\n        value: function dtdAttDefault(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          return this.assertLegalChar('' + val || '');\n        }\n      }, {\n        key: \"dtdEntityValue\",\n        value: function dtdEntityValue(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          return this.assertLegalChar('' + val || '');\n        }\n      }, {\n        key: \"dtdNData\",\n        value: function dtdNData(val) {\n          if (this.options.noValidation) {\n            return val;\n          }\n\n          return this.assertLegalChar('' + val || '');\n        }\n      }, {\n        key: \"assertLegalChar\",\n        value: function assertLegalChar(str) {\n          var regex, res;\n\n          if (this.options.noValidation) {\n            return str;\n          }\n\n          regex = '';\n\n          if (this.options.version === '1.0') {\n            // Valid characters from https://www.w3.org/TR/xml/#charsets\n            // any Unicode character, excluding the surrogate blocks, FFFE, and FFFF.\n            // #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]\n            // This ES5 compatible Regexp has been generated using the \"regenerate\" NPM module:\n            //   let xml_10_InvalidChars = regenerate()\n            //     .addRange(0x0000, 0x0008)\n            //     .add(0x000B, 0x000C)\n            //     .addRange(0x000E, 0x001F)\n            //     .addRange(0xD800, 0xDFFF)\n            //     .addRange(0xFFFE, 0xFFFF)\n            regex = /[\\0-\\x08\\x0B\\f\\x0E-\\x1F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n\n            if (res = str.match(regex)) {\n              throw new Error(\"Invalid character in string: \".concat(str, \" at index \").concat(res.index));\n            }\n          } else if (this.options.version === '1.1') {\n            // Valid characters from https://www.w3.org/TR/xml11/#charsets\n            // any Unicode character, excluding the surrogate blocks, FFFE, and FFFF.\n            // [#x1-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]\n            // This ES5 compatible Regexp has been generated using the \"regenerate\" NPM module:\n            //   let xml_11_InvalidChars = regenerate()\n            //     .add(0x0000)\n            //     .addRange(0xD800, 0xDFFF)\n            //     .addRange(0xFFFE, 0xFFFF)\n            regex = /[\\0\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n\n            if (res = str.match(regex)) {\n              throw new Error(\"Invalid character in string: \".concat(str, \" at index \").concat(res.index));\n            }\n          }\n\n          return str;\n        }\n      }, {\n        key: \"assertLegalName\",\n        value: function assertLegalName(str) {\n          var regex;\n\n          if (this.options.noValidation) {\n            return str;\n          }\n\n          this.assertLegalChar(str);\n          regex = /^([:A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])([\\x2D\\.0-:A-Z_a-z\\xB7\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u203F\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])*$/;\n\n          if (!str.match(regex)) {\n            throw new Error(\"Invalid character in name\");\n          }\n\n          return str;\n        } // Escapes special characters in text\n        // See http://www.w3.org/TR/2000/WD-xml-c14n-20000119.html#charescaping\n        // `str` the string to escape\n\n      }, {\n        key: \"textEscape\",\n        value: function textEscape(str) {\n          var ampregex;\n\n          if (this.options.noValidation) {\n            return str;\n          }\n\n          ampregex = this.options.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n          return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\r/g, '&#xD;');\n        } // Escapes special characters in attribute values\n        // See http://www.w3.org/TR/2000/WD-xml-c14n-20000119.html#charescaping\n        // `str` the string to escape\n\n      }, {\n        key: \"attEscape\",\n        value: function attEscape(str) {\n          var ampregex;\n\n          if (this.options.noValidation) {\n            return str;\n          }\n\n          ampregex = this.options.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n          return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/\"/g, '&quot;').replace(/\\t/g, '&#x9;').replace(/\\n/g, '&#xA;').replace(/\\r/g, '&#xD;');\n        }\n      }]);\n\n      return XMLStringifier;\n    }();\n\n    ; // strings to match while converting from JS objects\n\n    XMLStringifier.prototype.convertAttKey = '@';\n    XMLStringifier.prototype.convertPIKey = '?';\n    XMLStringifier.prototype.convertTextKey = '#text';\n    XMLStringifier.prototype.convertCDataKey = '#cdata';\n    XMLStringifier.prototype.convertCommentKey = '#comment';\n    XMLStringifier.prototype.convertRawKey = '#raw';\n    return XMLStringifier;\n  }.call(this);\n}).call(this);","map":{"version":3,"sources":["/Users/stefanpjanic/Desktop/mango_dev/node_modules/xmlbuilder/lib/XMLStringifier.js"],"names":["XMLStringifier","hasProp","hasOwnProperty","module","exports","options","key","ref","value","assertLegalChar","bind","assertLegalName","version","stringify","call","val","noValidation","textEscape","replace","match","Error","attEscape","str","regex","res","index","ampregex","noDoubleEncoding","prototype","convertAttKey","convertPIKey","convertTextKey","convertCDataKey","convertCommentKey","convertRawKey"],"mappings":"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","sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  // Converts values to strings\n  var XMLStringifier,\n    hasProp = {}.hasOwnProperty;\n\n  module.exports = XMLStringifier = (function() {\n    class XMLStringifier {\n      // Initializes a new instance of `XMLStringifier`\n\n      // `options.version` The version number string of the XML spec to validate against, e.g. 1.0\n      // `options.noDoubleEncoding` whether existing html entities are encoded: true or false\n      // `options.stringify` a set of functions to use for converting values to strings\n      // `options.noValidation` whether values will be validated and escaped or returned as is\n      constructor(options) {\n        var key, ref, value;\n        // Checks whether the given string contains legal characters\n        // Fails with an exception on error\n\n        // `str` the string to check\n        this.assertLegalChar = this.assertLegalChar.bind(this);\n        // Checks whether the given string contains legal characters for a name\n        // Fails with an exception on error\n\n        // `str` the string to check\n        this.assertLegalName = this.assertLegalName.bind(this);\n        options || (options = {});\n        this.options = options;\n        if (!this.options.version) {\n          this.options.version = '1.0';\n        }\n        ref = options.stringify || {};\n        for (key in ref) {\n          if (!hasProp.call(ref, key)) continue;\n          value = ref[key];\n          this[key] = value;\n        }\n      }\n\n      // Defaults\n      name(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalName('' + val || '');\n      }\n\n      text(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar(this.textEscape('' + val || ''));\n      }\n\n      cdata(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        val = '' + val || '';\n        val = val.replace(']]>', ']]]]><![CDATA[>');\n        return this.assertLegalChar(val);\n      }\n\n      comment(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        val = '' + val || '';\n        if (val.match(/--/)) {\n          throw new Error(\"Comment text cannot contain double-hypen: \" + val);\n        }\n        return this.assertLegalChar(val);\n      }\n\n      raw(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return '' + val || '';\n      }\n\n      attValue(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar(this.attEscape(val = '' + val || ''));\n      }\n\n      insTarget(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      insValue(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        val = '' + val || '';\n        if (val.match(/\\?>/)) {\n          throw new Error(\"Invalid processing instruction value: \" + val);\n        }\n        return this.assertLegalChar(val);\n      }\n\n      xmlVersion(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        val = '' + val || '';\n        if (!val.match(/1\\.[0-9]+/)) {\n          throw new Error(\"Invalid version number: \" + val);\n        }\n        return val;\n      }\n\n      xmlEncoding(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        val = '' + val || '';\n        if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {\n          throw new Error(\"Invalid encoding: \" + val);\n        }\n        return this.assertLegalChar(val);\n      }\n\n      xmlStandalone(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        if (val) {\n          return \"yes\";\n        } else {\n          return \"no\";\n        }\n      }\n\n      dtdPubID(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      dtdSysID(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      dtdElementValue(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      dtdAttType(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      dtdAttDefault(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      dtdEntityValue(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      dtdNData(val) {\n        if (this.options.noValidation) {\n          return val;\n        }\n        return this.assertLegalChar('' + val || '');\n      }\n\n      assertLegalChar(str) {\n        var regex, res;\n        if (this.options.noValidation) {\n          return str;\n        }\n        regex = '';\n        if (this.options.version === '1.0') {\n          // Valid characters from https://www.w3.org/TR/xml/#charsets\n          // any Unicode character, excluding the surrogate blocks, FFFE, and FFFF.\n          // #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]\n          // This ES5 compatible Regexp has been generated using the \"regenerate\" NPM module:\n          //   let xml_10_InvalidChars = regenerate()\n          //     .addRange(0x0000, 0x0008)\n          //     .add(0x000B, 0x000C)\n          //     .addRange(0x000E, 0x001F)\n          //     .addRange(0xD800, 0xDFFF)\n          //     .addRange(0xFFFE, 0xFFFF)\n          regex = /[\\0-\\x08\\x0B\\f\\x0E-\\x1F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n          if (res = str.match(regex)) {\n            throw new Error(`Invalid character in string: ${str} at index ${res.index}`);\n          }\n        } else if (this.options.version === '1.1') {\n          // Valid characters from https://www.w3.org/TR/xml11/#charsets\n          // any Unicode character, excluding the surrogate blocks, FFFE, and FFFF.\n          // [#x1-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]\n          // This ES5 compatible Regexp has been generated using the \"regenerate\" NPM module:\n          //   let xml_11_InvalidChars = regenerate()\n          //     .add(0x0000)\n          //     .addRange(0xD800, 0xDFFF)\n          //     .addRange(0xFFFE, 0xFFFF)\n          regex = /[\\0\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n          if (res = str.match(regex)) {\n            throw new Error(`Invalid character in string: ${str} at index ${res.index}`);\n          }\n        }\n        return str;\n      }\n\n      assertLegalName(str) {\n        var regex;\n        if (this.options.noValidation) {\n          return str;\n        }\n        this.assertLegalChar(str);\n        regex = /^([:A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])([\\x2D\\.0-:A-Z_a-z\\xB7\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u203F\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])*$/;\n        if (!str.match(regex)) {\n          throw new Error(\"Invalid character in name\");\n        }\n        return str;\n      }\n\n      // Escapes special characters in text\n\n      // See http://www.w3.org/TR/2000/WD-xml-c14n-20000119.html#charescaping\n\n      // `str` the string to escape\n      textEscape(str) {\n        var ampregex;\n        if (this.options.noValidation) {\n          return str;\n        }\n        ampregex = this.options.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n        return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\r/g, '&#xD;');\n      }\n\n      // Escapes special characters in attribute values\n\n      // See http://www.w3.org/TR/2000/WD-xml-c14n-20000119.html#charescaping\n\n      // `str` the string to escape\n      attEscape(str) {\n        var ampregex;\n        if (this.options.noValidation) {\n          return str;\n        }\n        ampregex = this.options.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n        return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/\"/g, '&quot;').replace(/\\t/g, '&#x9;').replace(/\\n/g, '&#xA;').replace(/\\r/g, '&#xD;');\n      }\n\n    };\n\n    // strings to match while converting from JS objects\n    XMLStringifier.prototype.convertAttKey = '@';\n\n    XMLStringifier.prototype.convertPIKey = '?';\n\n    XMLStringifier.prototype.convertTextKey = '#text';\n\n    XMLStringifier.prototype.convertCDataKey = '#cdata';\n\n    XMLStringifier.prototype.convertCommentKey = '#comment';\n\n    XMLStringifier.prototype.convertRawKey = '#raw';\n\n    return XMLStringifier;\n\n  }).call(this);\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}