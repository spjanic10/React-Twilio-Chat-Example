{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Registrar = void 0;\n\nvar events_1 = require(\"events\");\n\nvar registrar_connector_1 = require(\"./registrar.connector\");\n\nvar twilsock_connector_1 = require(\"./twilsock.connector\");\n/**\n * Provides an interface to the ERS registrar\n */\n\n\nvar Registrar = /*#__PURE__*/function (_events_1$EventEmitte) {\n  _inherits(Registrar, _events_1$EventEmitte);\n\n  var _super = _createSuper(Registrar);\n\n  /**\n   * Creates the new instance of registrar client\n   */\n  function Registrar(productId, transport, twilsock, config) {\n    var _this;\n\n    _classCallCheck(this, Registrar);\n\n    _this = _super.call(this);\n    _this.config = config;\n    _this.connectors = new Map();\n\n    var platform = _this.detectPlatform();\n\n    _this.connectors.set('gcm', new registrar_connector_1.RegistrarConnector('gcm', {\n      protocolVersion: 3,\n      productId: productId,\n      platform: platform\n    }, transport, config));\n\n    _this.connectors.set('fcm', new registrar_connector_1.RegistrarConnector('fcm', {\n      protocolVersion: 3,\n      productId: productId,\n      platform: platform\n    }, transport, config));\n\n    _this.connectors.set('apn', new registrar_connector_1.RegistrarConnector('apn', {\n      protocolVersion: 4,\n      productId: productId,\n      platform: platform\n    }, transport, config));\n\n    _this.connectors.set('twilsock', new twilsock_connector_1.TwilsockConnector({\n      productId: productId,\n      platform: platform\n    }, twilsock, config));\n\n    _this.connectors.get('twilsock').on('transportReady', function (state) {\n      return _this.emit('transportReady', state);\n    });\n\n    return _this;\n  }\n  /**\n   *  Sets notification ID.\n   *  If new URI is different from previous, it triggers updating of registration for given channel\n   *\n   *  @param {string} channelType channel type (apn|gcm|fcm|twilsock)\n   *  @param {string} notificationId The notification ID\n   */\n\n\n  _createClass(Registrar, [{\n    key: \"setNotificationId\",\n    value: function setNotificationId(channelType, notificationId) {\n      this.connector(channelType).setNotificationId(notificationId);\n    }\n    /**\n     * Subscribe for given type of message\n     *\n     * @param {String} messageType Message type identifier\n     * @param {String} channelType Channel type, can be 'twilsock', 'gcm' or 'fcm'\n     * @public\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(messageType, channelType) {\n      return this.connector(channelType).subscribe(messageType);\n    }\n    /**\n     * Remove subscription\n     * @param {String} messageType Message type\n     * @param {String} channelType Channel type (twilsock or gcm/fcm)\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(messageType, channelType) {\n      return this.connector(channelType).unsubscribe(messageType);\n    }\n  }, {\n    key: \"updateToken\",\n    value: function updateToken(token) {\n      this.connectors.forEach(function (connector) {\n        return connector.updateToken(token);\n      });\n    }\n    /**\n     * @param {String} type Channel type\n     * @throws {Error} Error with description\n     */\n\n  }, {\n    key: \"connector\",\n    value: function connector(type) {\n      var connector = this.connectors.get(type);\n\n      if (!connector) {\n        throw new Error(\"Unknown channel type: \".concat(type));\n      }\n\n      return connector;\n    }\n    /**\n     * Returns platform string limited to max 128 chars\n     */\n\n  }, {\n    key: \"detectPlatform\",\n    value: function detectPlatform() {\n      var platform = '';\n\n      if (typeof navigator !== 'undefined') {\n        platform = 'unknown';\n\n        if (typeof navigator.product !== 'undefined') {\n          platform = navigator.product;\n        }\n\n        if (typeof navigator.userAgent !== 'undefined') {\n          platform = navigator.userAgent;\n        }\n      } else {\n        platform = 'web';\n      }\n\n      return platform.substring(0, 128);\n    }\n  }]);\n\n  return Registrar;\n}(events_1.EventEmitter);\n\nexports.Registrar = Registrar;","map":{"version":3,"sources":["/Users/stefanpjanic/Desktop/mango_dev/node_modules/twilio-notifications/lib/registrar.js"],"names":["Object","defineProperty","exports","value","Registrar","events_1","require","registrar_connector_1","twilsock_connector_1","productId","transport","twilsock","config","connectors","Map","platform","detectPlatform","set","RegistrarConnector","protocolVersion","TwilsockConnector","get","on","state","emit","channelType","notificationId","connector","setNotificationId","messageType","subscribe","unsubscribe","token","forEach","updateToken","type","Error","navigator","product","userAgent","substring","EventEmitter"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Registrar = void 0;\nconst events_1 = require(\"events\");\nconst registrar_connector_1 = require(\"./registrar.connector\");\nconst twilsock_connector_1 = require(\"./twilsock.connector\");\n/**\n * Provides an interface to the ERS registrar\n */\nclass Registrar extends events_1.EventEmitter {\n    /**\n     * Creates the new instance of registrar client\n     */\n    constructor(productId, transport, twilsock, config) {\n        super();\n        this.config = config;\n        this.connectors = new Map();\n        const platform = this.detectPlatform();\n        this.connectors.set('gcm', new registrar_connector_1.RegistrarConnector('gcm', { protocolVersion: 3, productId, platform }, transport, config));\n        this.connectors.set('fcm', new registrar_connector_1.RegistrarConnector('fcm', { protocolVersion: 3, productId, platform }, transport, config));\n        this.connectors.set('apn', new registrar_connector_1.RegistrarConnector('apn', { protocolVersion: 4, productId, platform }, transport, config));\n        this.connectors.set('twilsock', new twilsock_connector_1.TwilsockConnector({ productId, platform }, twilsock, config));\n        this.connectors.get('twilsock').on('transportReady', state => this.emit('transportReady', state));\n    }\n    /**\n     *  Sets notification ID.\n     *  If new URI is different from previous, it triggers updating of registration for given channel\n     *\n     *  @param {string} channelType channel type (apn|gcm|fcm|twilsock)\n     *  @param {string} notificationId The notification ID\n     */\n    setNotificationId(channelType, notificationId) {\n        this.connector(channelType).setNotificationId(notificationId);\n    }\n    /**\n     * Subscribe for given type of message\n     *\n     * @param {String} messageType Message type identifier\n     * @param {String} channelType Channel type, can be 'twilsock', 'gcm' or 'fcm'\n     * @public\n     */\n    subscribe(messageType, channelType) {\n        return this.connector(channelType).subscribe(messageType);\n    }\n    /**\n     * Remove subscription\n     * @param {String} messageType Message type\n     * @param {String} channelType Channel type (twilsock or gcm/fcm)\n     */\n    unsubscribe(messageType, channelType) {\n        return this.connector(channelType).unsubscribe(messageType);\n    }\n    updateToken(token) {\n        this.connectors.forEach(connector => connector.updateToken(token));\n    }\n    /**\n     * @param {String} type Channel type\n     * @throws {Error} Error with description\n     */\n    connector(type) {\n        let connector = this.connectors.get(type);\n        if (!connector) {\n            throw new Error(`Unknown channel type: ${type}`);\n        }\n        return connector;\n    }\n    /**\n     * Returns platform string limited to max 128 chars\n     */\n    detectPlatform() {\n        let platform = '';\n        if (typeof navigator !== 'undefined') {\n            platform = 'unknown';\n            if (typeof navigator.product !== 'undefined') {\n                platform = navigator.product;\n            }\n            if (typeof navigator.userAgent !== 'undefined') {\n                platform = navigator.userAgent;\n            }\n        }\n        else {\n            platform = 'web';\n        }\n        return platform.substring(0, 128);\n    }\n}\nexports.Registrar = Registrar;\n"]},"metadata":{},"sourceType":"script"}