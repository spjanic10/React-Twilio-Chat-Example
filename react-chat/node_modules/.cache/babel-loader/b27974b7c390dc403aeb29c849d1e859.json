{"ast":null,"code":"var _classCallCheck = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType,\n      WriterState,\n      XMLCData,\n      XMLComment,\n      XMLDTDAttList,\n      XMLDTDElement,\n      XMLDTDEntity,\n      XMLDTDNotation,\n      XMLDeclaration,\n      XMLDocType,\n      XMLDummy,\n      XMLElement,\n      XMLProcessingInstruction,\n      XMLRaw,\n      XMLText,\n      XMLWriterBase,\n      assign,\n      hasProp = {}.hasOwnProperty;\n\n  var _require = require('./Utility');\n\n  assign = _require.assign;\n  NodeType = require('./NodeType');\n  XMLDeclaration = require('./XMLDeclaration');\n  XMLDocType = require('./XMLDocType');\n  XMLCData = require('./XMLCData');\n  XMLComment = require('./XMLComment');\n  XMLElement = require('./XMLElement');\n  XMLRaw = require('./XMLRaw');\n  XMLText = require('./XMLText');\n  XMLProcessingInstruction = require('./XMLProcessingInstruction');\n  XMLDummy = require('./XMLDummy');\n  XMLDTDAttList = require('./XMLDTDAttList');\n  XMLDTDElement = require('./XMLDTDElement');\n  XMLDTDEntity = require('./XMLDTDEntity');\n  XMLDTDNotation = require('./XMLDTDNotation');\n  WriterState = require('./WriterState'); // Base class for XML writers\n\n  module.exports = XMLWriterBase = /*#__PURE__*/function () {\n    \"use strict\";\n\n    // Initializes a new instance of `XMLWriterBase`\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation string\n    // `options.newline` newline sequence\n    // `options.offset` a fixed number of indentations to add to every line\n    // `options.width` maximum column width\n    // `options.allowEmpty` do not self close empty element tags\n    // 'options.dontPrettyTextNodes' if any text is present in node, don't indent or LF\n    // `options.spaceBeforeSlash` add a space before the closing slash of empty elements\n    function XMLWriterBase(options) {\n      _classCallCheck(this, XMLWriterBase);\n\n      var key, ref, value;\n      options || (options = {});\n      this.options = options;\n      ref = options.writer || {};\n\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        this[\"_\" + key] = this[key];\n        this[key] = value;\n      }\n    } // Filters writer options and provides defaults\n    // `options` writer options\n\n\n    _createClass(XMLWriterBase, [{\n      key: \"filterOptions\",\n      value: function filterOptions(options) {\n        var filteredOptions, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7;\n        options || (options = {});\n        options = assign({}, this.options, options);\n        filteredOptions = {\n          writer: this\n        };\n        filteredOptions.pretty = options.pretty || false;\n        filteredOptions.allowEmpty = options.allowEmpty || false;\n        filteredOptions.indent = (ref = options.indent) != null ? ref : '  ';\n        filteredOptions.newline = (ref1 = options.newline) != null ? ref1 : '\\n';\n        filteredOptions.offset = (ref2 = options.offset) != null ? ref2 : 0;\n        filteredOptions.width = (ref3 = options.width) != null ? ref3 : 0;\n        filteredOptions.dontPrettyTextNodes = (ref4 = (ref5 = options.dontPrettyTextNodes) != null ? ref5 : options.dontprettytextnodes) != null ? ref4 : 0;\n        filteredOptions.spaceBeforeSlash = (ref6 = (ref7 = options.spaceBeforeSlash) != null ? ref7 : options.spacebeforeslash) != null ? ref6 : '';\n\n        if (filteredOptions.spaceBeforeSlash === true) {\n          filteredOptions.spaceBeforeSlash = ' ';\n        }\n\n        filteredOptions.suppressPrettyCount = 0;\n        filteredOptions.user = {};\n        filteredOptions.state = WriterState.None;\n        return filteredOptions;\n      } // Returns the indentation string for the current level\n      // `node` current node\n      // `options` writer options\n      // `level` current indentation level\n\n    }, {\n      key: \"indent\",\n      value: function indent(node, options, level) {\n        var indentLevel;\n\n        if (!options.pretty || options.suppressPrettyCount) {\n          return '';\n        } else if (options.pretty) {\n          indentLevel = (level || 0) + options.offset + 1;\n\n          if (indentLevel > 0) {\n            return new Array(indentLevel).join(options.indent);\n          }\n        }\n\n        return '';\n      } // Returns the newline string\n      // `node` current node\n      // `options` writer options\n      // `level` current indentation level\n\n    }, {\n      key: \"endline\",\n      value: function endline(node, options, level) {\n        if (!options.pretty || options.suppressPrettyCount) {\n          return '';\n        } else {\n          return options.newline;\n        }\n      }\n    }, {\n      key: \"attribute\",\n      value: function attribute(att, options, level) {\n        var r;\n        this.openAttribute(att, options, level);\n\n        if (options.pretty && options.width > 0) {\n          r = att.name + '=\"' + att.value + '\"';\n        } else {\n          r = ' ' + att.name + '=\"' + att.value + '\"';\n        }\n\n        this.closeAttribute(att, options, level);\n        return r;\n      }\n    }, {\n      key: \"cdata\",\n      value: function cdata(node, options, level) {\n        var r;\n        this.openNode(node, options, level);\n        options.state = WriterState.OpenTag;\n        r = this.indent(node, options, level) + '<![CDATA[';\n        options.state = WriterState.InsideTag;\n        r += node.value;\n        options.state = WriterState.CloseTag;\n        r += ']]>' + this.endline(node, options, level);\n        options.state = WriterState.None;\n        this.closeNode(node, options, level);\n        return r;\n      }\n    }, {\n      key: \"comment\",\n      value: function comment(node, options, level) {\n        var r;\n        this.openNode(node, options, level);\n        options.state = WriterState.OpenTag;\n        r = this.indent(node, options, level) + '<!-- ';\n        options.state = WriterState.InsideTag;\n        r += node.value;\n        options.state = WriterState.CloseTag;\n        r += ' -->' + this.endline(node, options, level);\n        options.state = WriterState.None;\n        this.closeNode(node, options, level);\n        return r;\n      }\n    }, {\n      key: \"declaration\",\n      value: function declaration(node, options, level) {\n        var r;\n        this.openNode(node, options, level);\n        options.state = WriterState.OpenTag;\n        r = this.indent(node, options, level) + '<?xml';\n        options.state = WriterState.InsideTag;\n        r += ' version=\"' + node.version + '\"';\n\n        if (node.encoding != null) {\n          r += ' encoding=\"' + node.encoding + '\"';\n        }\n\n        if (node.standalone != null) {\n          r += ' standalone=\"' + node.standalone + '\"';\n        }\n\n        options.state = WriterState.CloseTag;\n        r += options.spaceBeforeSlash + '?>';\n        r += this.endline(node, options, level);\n        options.state = WriterState.None;\n        this.closeNode(node, options, level);\n        return r;\n      }\n    }, {\n      key: \"docType\",\n      value: function docType(node, options, level) {\n        var child, i, len1, r, ref;\n        level || (level = 0);\n        this.openNode(node, options, level);\n        options.state = WriterState.OpenTag;\n        r = this.indent(node, options, level);\n        r += '<!DOCTYPE ' + node.root().name; // external identifier\n\n        if (node.pubID && node.sysID) {\n          r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n        } else if (node.sysID) {\n          r += ' SYSTEM \"' + node.sysID + '\"';\n        } // internal subset\n\n\n        if (node.children.length > 0) {\n          r += ' [';\n          r += this.endline(node, options, level);\n          options.state = WriterState.InsideTag;\n          ref = node.children;\n\n          for (i = 0, len1 = ref.length; i < len1; i++) {\n            child = ref[i];\n            r += this.writeChildNode(child, options, level + 1);\n          }\n\n          options.state = WriterState.CloseTag;\n          r += ']';\n        } // close tag\n\n\n        options.state = WriterState.CloseTag;\n        r += options.spaceBeforeSlash + '>';\n        r += this.endline(node, options, level);\n        options.state = WriterState.None;\n        this.closeNode(node, options, level);\n        return r;\n      }\n    }, {\n      key: \"element\",\n      value: function element(node, options, level) {\n        var att, attLen, child, childNodeCount, firstChildNode, i, j, len, len1, len2, name, prettySuppressed, r, ratt, ref, ref1, ref2, ref3, rline;\n        level || (level = 0);\n        prettySuppressed = false; // open tag\n\n        this.openNode(node, options, level);\n        options.state = WriterState.OpenTag;\n        r = this.indent(node, options, level) + '<' + node.name; // attributes\n\n        if (options.pretty && options.width > 0) {\n          len = r.length;\n          ref = node.attribs;\n\n          for (name in ref) {\n            if (!hasProp.call(ref, name)) continue;\n            att = ref[name];\n            ratt = this.attribute(att, options, level);\n            attLen = ratt.length;\n\n            if (len + attLen > options.width) {\n              rline = this.indent(node, options, level + 1) + ratt;\n              r += this.endline(node, options, level) + rline;\n              len = rline.length;\n            } else {\n              rline = ' ' + ratt;\n              r += rline;\n              len += rline.length;\n            }\n          }\n        } else {\n          ref1 = node.attribs;\n\n          for (name in ref1) {\n            if (!hasProp.call(ref1, name)) continue;\n            att = ref1[name];\n            r += this.attribute(att, options, level);\n          }\n        }\n\n        childNodeCount = node.children.length;\n        firstChildNode = childNodeCount === 0 ? null : node.children[0];\n\n        if (childNodeCount === 0 || node.children.every(function (e) {\n          return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === '';\n        })) {\n          // empty element\n          if (options.allowEmpty) {\n            r += '>';\n            options.state = WriterState.CloseTag;\n            r += '</' + node.name + '>' + this.endline(node, options, level);\n          } else {\n            options.state = WriterState.CloseTag;\n            r += options.spaceBeforeSlash + '/>' + this.endline(node, options, level);\n          }\n        } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && firstChildNode.value != null) {\n          // do not indent text-only nodes\n          r += '>';\n          options.state = WriterState.InsideTag;\n          options.suppressPrettyCount++;\n          prettySuppressed = true;\n          r += this.writeChildNode(firstChildNode, options, level + 1);\n          options.suppressPrettyCount--;\n          prettySuppressed = false;\n          options.state = WriterState.CloseTag;\n          r += '</' + node.name + '>' + this.endline(node, options, level);\n        } else {\n          // if ANY are a text node, then suppress pretty now\n          if (options.dontPrettyTextNodes) {\n            ref2 = node.children;\n\n            for (i = 0, len1 = ref2.length; i < len1; i++) {\n              child = ref2[i];\n\n              if ((child.type === NodeType.Text || child.type === NodeType.Raw) && child.value != null) {\n                options.suppressPrettyCount++;\n                prettySuppressed = true;\n                break;\n              }\n            }\n          } // close the opening tag, after dealing with newline\n\n\n          r += '>' + this.endline(node, options, level);\n          options.state = WriterState.InsideTag;\n          ref3 = node.children; // inner tags\n\n          for (j = 0, len2 = ref3.length; j < len2; j++) {\n            child = ref3[j];\n            r += this.writeChildNode(child, options, level + 1);\n          } // close tag\n\n\n          options.state = WriterState.CloseTag;\n          r += this.indent(node, options, level) + '</' + node.name + '>';\n\n          if (prettySuppressed) {\n            options.suppressPrettyCount--;\n          }\n\n          r += this.endline(node, options, level);\n          options.state = WriterState.None;\n        }\n\n        this.closeNode(node, options, level);\n        return r;\n      }\n    }, {\n      key: \"writeChildNode\",\n      value: function writeChildNode(node, options, level) {\n        switch (node.type) {\n          case NodeType.CData:\n            return this.cdata(node, options, level);\n\n          case NodeType.Comment:\n            return this.comment(node, options, level);\n\n          case NodeType.Element:\n            return this.element(node, options, level);\n\n          case NodeType.Raw:\n            return this.raw(node, options, level);\n\n          case NodeType.Text:\n            return this.text(node, options, level);\n\n          case NodeType.ProcessingInstruction:\n            return this.processingInstruction(node, options, level);\n\n          case NodeType.Dummy:\n            return '';\n\n          case NodeType.Declaration:\n            return this.declaration(node, options, level);\n\n          case NodeType.DocType:\n            return this.docType(node, options, level);\n\n          case NodeType.AttributeDeclaration:\n            return this.dtdAttList(node, options, level);\n\n          case NodeType.ElementDeclaration:\n            return this.dtdElement(node, options, level);\n\n          case NodeType.EntityDeclaration:\n            return this.dtdEntity(node, options, level);\n\n          case NodeType.NotationDeclaration:\n            return this.dtdNotation(node, options, level);\n\n          default:\n            throw new Error(\"Unknown XML node type: \" + node.constructor.name);\n        }\n      }\n    }, {\n      key: \"processingInstruction\",\n      value: function processingInstruction(node, options, level) {\n        var r;\n        this.openNode(node, options, level);\n        options.state = WriterState.OpenTag;\n        r = this.indent(node, options, level) + '<?';\n        options.state = WriterState.InsideTag;\n        r += node.target;\n\n        if (node.value) {\n          r += ' ' + node.value;\n        }\n\n        options.state = WriterState.CloseTag;\n        r += options.spaceBeforeSlash + '?>';\n        r += this.endline(node, options, level);\n        options.state = WriterState.None;\n        this.closeNode(node, options, level);\n        return r;\n      }\n    }, {\n      key: \"raw\",\n      value: function raw(node, options, level) {\n        var r;\n        this.openNode(node, options, level);\n        options.state = WriterState.OpenTag;\n        r = this.indent(node, options, level);\n        options.state = WriterState.InsideTag;\n        r += node.value;\n        options.state = WriterState.CloseTag;\n        r += this.endline(node, options, level);\n        options.state = WriterState.None;\n        this.closeNode(node, options, level);\n        return r;\n      }\n    }, {\n      key: \"text\",\n      value: function text(node, options, level) {\n        var r;\n        this.openNode(node, options, level);\n        options.state = WriterState.OpenTag;\n        r = this.indent(node, options, level);\n        options.state = WriterState.InsideTag;\n        r += node.value;\n        options.state = WriterState.CloseTag;\n        r += this.endline(node, options, level);\n        options.state = WriterState.None;\n        this.closeNode(node, options, level);\n        return r;\n      }\n    }, {\n      key: \"dtdAttList\",\n      value: function dtdAttList(node, options, level) {\n        var r;\n        this.openNode(node, options, level);\n        options.state = WriterState.OpenTag;\n        r = this.indent(node, options, level) + '<!ATTLIST';\n        options.state = WriterState.InsideTag;\n        r += ' ' + node.elementName + ' ' + node.attributeName + ' ' + node.attributeType;\n\n        if (node.defaultValueType !== '#DEFAULT') {\n          r += ' ' + node.defaultValueType;\n        }\n\n        if (node.defaultValue) {\n          r += ' \"' + node.defaultValue + '\"';\n        }\n\n        options.state = WriterState.CloseTag;\n        r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n        options.state = WriterState.None;\n        this.closeNode(node, options, level);\n        return r;\n      }\n    }, {\n      key: \"dtdElement\",\n      value: function dtdElement(node, options, level) {\n        var r;\n        this.openNode(node, options, level);\n        options.state = WriterState.OpenTag;\n        r = this.indent(node, options, level) + '<!ELEMENT';\n        options.state = WriterState.InsideTag;\n        r += ' ' + node.name + ' ' + node.value;\n        options.state = WriterState.CloseTag;\n        r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n        options.state = WriterState.None;\n        this.closeNode(node, options, level);\n        return r;\n      }\n    }, {\n      key: \"dtdEntity\",\n      value: function dtdEntity(node, options, level) {\n        var r;\n        this.openNode(node, options, level);\n        options.state = WriterState.OpenTag;\n        r = this.indent(node, options, level) + '<!ENTITY';\n        options.state = WriterState.InsideTag;\n\n        if (node.pe) {\n          r += ' %';\n        }\n\n        r += ' ' + node.name;\n\n        if (node.value) {\n          r += ' \"' + node.value + '\"';\n        } else {\n          if (node.pubID && node.sysID) {\n            r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n          } else if (node.sysID) {\n            r += ' SYSTEM \"' + node.sysID + '\"';\n          }\n\n          if (node.nData) {\n            r += ' NDATA ' + node.nData;\n          }\n        }\n\n        options.state = WriterState.CloseTag;\n        r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n        options.state = WriterState.None;\n        this.closeNode(node, options, level);\n        return r;\n      }\n    }, {\n      key: \"dtdNotation\",\n      value: function dtdNotation(node, options, level) {\n        var r;\n        this.openNode(node, options, level);\n        options.state = WriterState.OpenTag;\n        r = this.indent(node, options, level) + '<!NOTATION';\n        options.state = WriterState.InsideTag;\n        r += ' ' + node.name;\n\n        if (node.pubID && node.sysID) {\n          r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n        } else if (node.pubID) {\n          r += ' PUBLIC \"' + node.pubID + '\"';\n        } else if (node.sysID) {\n          r += ' SYSTEM \"' + node.sysID + '\"';\n        }\n\n        options.state = WriterState.CloseTag;\n        r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n        options.state = WriterState.None;\n        this.closeNode(node, options, level);\n        return r;\n      }\n    }, {\n      key: \"openNode\",\n      value: function openNode(node, options, level) {}\n    }, {\n      key: \"closeNode\",\n      value: function closeNode(node, options, level) {}\n    }, {\n      key: \"openAttribute\",\n      value: function openAttribute(att, options, level) {}\n    }, {\n      key: \"closeAttribute\",\n      value: function closeAttribute(att, options, level) {}\n    }]);\n\n    return XMLWriterBase;\n  }();\n}).call(this);","map":{"version":3,"sources":["/Users/stefanpjanic/Desktop/mango_dev/node_modules/xmlbuilder/lib/XMLWriterBase.js"],"names":["NodeType","WriterState","XMLCData","XMLComment","XMLDTDAttList","XMLDTDElement","XMLDTDEntity","XMLDTDNotation","XMLDeclaration","XMLDocType","XMLDummy","XMLElement","XMLProcessingInstruction","XMLRaw","XMLText","XMLWriterBase","assign","hasProp","hasOwnProperty","require","module","exports","options","key","ref","value","writer","call","filteredOptions","ref1","ref2","ref3","ref4","ref5","ref6","ref7","pretty","allowEmpty","indent","newline","offset","width","dontPrettyTextNodes","dontprettytextnodes","spaceBeforeSlash","spacebeforeslash","suppressPrettyCount","user","state","None","node","level","indentLevel","Array","join","att","r","openAttribute","name","closeAttribute","openNode","OpenTag","InsideTag","CloseTag","endline","closeNode","version","encoding","standalone","child","i","len1","root","pubID","sysID","children","length","writeChildNode","attLen","childNodeCount","firstChildNode","j","len","len2","prettySuppressed","ratt","rline","attribs","attribute","every","e","type","Text","Raw","CData","cdata","Comment","comment","Element","element","raw","text","ProcessingInstruction","processingInstruction","Dummy","Declaration","declaration","DocType","docType","AttributeDeclaration","dtdAttList","ElementDeclaration","dtdElement","EntityDeclaration","dtdEntity","NotationDeclaration","dtdNotation","Error","constructor","target","elementName","attributeName","attributeType","defaultValueType","defaultValue","pe","nData"],"mappings":";;;;AAAA;AACA,CAAC,YAAW;AACV,MAAIA,QAAJ;AAAA,MAAcC,WAAd;AAAA,MAA2BC,QAA3B;AAAA,MAAqCC,UAArC;AAAA,MAAiDC,aAAjD;AAAA,MAAgEC,aAAhE;AAAA,MAA+EC,YAA/E;AAAA,MAA6FC,cAA7F;AAAA,MAA6GC,cAA7G;AAAA,MAA6HC,UAA7H;AAAA,MAAyIC,QAAzI;AAAA,MAAmJC,UAAnJ;AAAA,MAA+JC,wBAA/J;AAAA,MAAyLC,MAAzL;AAAA,MAAiMC,OAAjM;AAAA,MAA0MC,aAA1M;AAAA,MAAyNC,MAAzN;AAAA,MACEC,OAAO,GAAG,GAAGC,cADf;;AADU,iBAIEC,OAAO,CAAC,WAAD,CAJT;;AAIRH,EAAAA,MAJQ,YAIRA,MAJQ;AAMVhB,EAAAA,QAAQ,GAAGmB,OAAO,CAAC,YAAD,CAAlB;AAEAX,EAAAA,cAAc,GAAGW,OAAO,CAAC,kBAAD,CAAxB;AAEAV,EAAAA,UAAU,GAAGU,OAAO,CAAC,cAAD,CAApB;AAEAjB,EAAAA,QAAQ,GAAGiB,OAAO,CAAC,YAAD,CAAlB;AAEAhB,EAAAA,UAAU,GAAGgB,OAAO,CAAC,cAAD,CAApB;AAEAR,EAAAA,UAAU,GAAGQ,OAAO,CAAC,cAAD,CAApB;AAEAN,EAAAA,MAAM,GAAGM,OAAO,CAAC,UAAD,CAAhB;AAEAL,EAAAA,OAAO,GAAGK,OAAO,CAAC,WAAD,CAAjB;AAEAP,EAAAA,wBAAwB,GAAGO,OAAO,CAAC,4BAAD,CAAlC;AAEAT,EAAAA,QAAQ,GAAGS,OAAO,CAAC,YAAD,CAAlB;AAEAf,EAAAA,aAAa,GAAGe,OAAO,CAAC,iBAAD,CAAvB;AAEAd,EAAAA,aAAa,GAAGc,OAAO,CAAC,iBAAD,CAAvB;AAEAb,EAAAA,YAAY,GAAGa,OAAO,CAAC,gBAAD,CAAtB;AAEAZ,EAAAA,cAAc,GAAGY,OAAO,CAAC,kBAAD,CAAxB;AAEAlB,EAAAA,WAAW,GAAGkB,OAAO,CAAC,eAAD,CAArB,CAlCU,CAoCV;;AACAC,EAAAA,MAAM,CAACC,OAAP,GAAiBN,aAAa;AAAA;;AAC5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAAYO,OAAZ,EAAqB;AAAA;;AACnB,UAAIC,GAAJ,EAASC,GAAT,EAAcC,KAAd;AACAH,MAAAA,OAAO,KAAKA,OAAO,GAAG,EAAf,CAAP;AACA,WAAKA,OAAL,GAAeA,OAAf;AACAE,MAAAA,GAAG,GAAGF,OAAO,CAACI,MAAR,IAAkB,EAAxB;;AACA,WAAKH,GAAL,IAAYC,GAAZ,EAAiB;AACf,YAAI,CAACP,OAAO,CAACU,IAAR,CAAaH,GAAb,EAAkBD,GAAlB,CAAL,EAA6B;AAC7BE,QAAAA,KAAK,GAAGD,GAAG,CAACD,GAAD,CAAX;AACA,aAAK,MAAMA,GAAX,IAAkB,KAAKA,GAAL,CAAlB;AACA,aAAKA,GAAL,IAAYE,KAAZ;AACD;AACF,KAtB2B,CAwB5B;AAEA;;;AA1B4B;AAAA;AAAA,aA2B5B,uBAAcH,OAAd,EAAuB;AACrB,YAAIM,eAAJ,EAAqBJ,GAArB,EAA0BK,IAA1B,EAAgCC,IAAhC,EAAsCC,IAAtC,EAA4CC,IAA5C,EAAkDC,IAAlD,EAAwDC,IAAxD,EAA8DC,IAA9D;AACAb,QAAAA,OAAO,KAAKA,OAAO,GAAG,EAAf,CAAP;AACAA,QAAAA,OAAO,GAAGN,MAAM,CAAC,EAAD,EAAK,KAAKM,OAAV,EAAmBA,OAAnB,CAAhB;AACAM,QAAAA,eAAe,GAAG;AAChBF,UAAAA,MAAM,EAAE;AADQ,SAAlB;AAGAE,QAAAA,eAAe,CAACQ,MAAhB,GAAyBd,OAAO,CAACc,MAAR,IAAkB,KAA3C;AACAR,QAAAA,eAAe,CAACS,UAAhB,GAA6Bf,OAAO,CAACe,UAAR,IAAsB,KAAnD;AACAT,QAAAA,eAAe,CAACU,MAAhB,GAAyB,CAACd,GAAG,GAAGF,OAAO,CAACgB,MAAf,KAA0B,IAA1B,GAAiCd,GAAjC,GAAuC,IAAhE;AACAI,QAAAA,eAAe,CAACW,OAAhB,GAA0B,CAACV,IAAI,GAAGP,OAAO,CAACiB,OAAhB,KAA4B,IAA5B,GAAmCV,IAAnC,GAA0C,IAApE;AACAD,QAAAA,eAAe,CAACY,MAAhB,GAAyB,CAACV,IAAI,GAAGR,OAAO,CAACkB,MAAhB,KAA2B,IAA3B,GAAkCV,IAAlC,GAAyC,CAAlE;AACAF,QAAAA,eAAe,CAACa,KAAhB,GAAwB,CAACV,IAAI,GAAGT,OAAO,CAACmB,KAAhB,KAA0B,IAA1B,GAAiCV,IAAjC,GAAwC,CAAhE;AACAH,QAAAA,eAAe,CAACc,mBAAhB,GAAsC,CAACV,IAAI,GAAG,CAACC,IAAI,GAAGX,OAAO,CAACoB,mBAAhB,KAAwC,IAAxC,GAA+CT,IAA/C,GAAsDX,OAAO,CAACqB,mBAAtE,KAA8F,IAA9F,GAAqGX,IAArG,GAA4G,CAAlJ;AACAJ,QAAAA,eAAe,CAACgB,gBAAhB,GAAmC,CAACV,IAAI,GAAG,CAACC,IAAI,GAAGb,OAAO,CAACsB,gBAAhB,KAAqC,IAArC,GAA4CT,IAA5C,GAAmDb,OAAO,CAACuB,gBAAnE,KAAwF,IAAxF,GAA+FX,IAA/F,GAAsG,EAAzI;;AACA,YAAIN,eAAe,CAACgB,gBAAhB,KAAqC,IAAzC,EAA+C;AAC7ChB,UAAAA,eAAe,CAACgB,gBAAhB,GAAmC,GAAnC;AACD;;AACDhB,QAAAA,eAAe,CAACkB,mBAAhB,GAAsC,CAAtC;AACAlB,QAAAA,eAAe,CAACmB,IAAhB,GAAuB,EAAvB;AACAnB,QAAAA,eAAe,CAACoB,KAAhB,GAAwB/C,WAAW,CAACgD,IAApC;AACA,eAAOrB,eAAP;AACD,OAjD2B,CAmD5B;AAEA;AACA;AACA;;AAvD4B;AAAA;AAAA,aAwD5B,gBAAOsB,IAAP,EAAa5B,OAAb,EAAsB6B,KAAtB,EAA6B;AAC3B,YAAIC,WAAJ;;AACA,YAAI,CAAC9B,OAAO,CAACc,MAAT,IAAmBd,OAAO,CAACwB,mBAA/B,EAAoD;AAClD,iBAAO,EAAP;AACD,SAFD,MAEO,IAAIxB,OAAO,CAACc,MAAZ,EAAoB;AACzBgB,UAAAA,WAAW,GAAG,CAACD,KAAK,IAAI,CAAV,IAAe7B,OAAO,CAACkB,MAAvB,GAAgC,CAA9C;;AACA,cAAIY,WAAW,GAAG,CAAlB,EAAqB;AACnB,mBAAO,IAAIC,KAAJ,CAAUD,WAAV,EAAuBE,IAAvB,CAA4BhC,OAAO,CAACgB,MAApC,CAAP;AACD;AACF;;AACD,eAAO,EAAP;AACD,OAnE2B,CAqE5B;AAEA;AACA;AACA;;AAzE4B;AAAA;AAAA,aA0E5B,iBAAQY,IAAR,EAAc5B,OAAd,EAAuB6B,KAAvB,EAA8B;AAC5B,YAAI,CAAC7B,OAAO,CAACc,MAAT,IAAmBd,OAAO,CAACwB,mBAA/B,EAAoD;AAClD,iBAAO,EAAP;AACD,SAFD,MAEO;AACL,iBAAOxB,OAAO,CAACiB,OAAf;AACD;AACF;AAhF2B;AAAA;AAAA,aAkF5B,mBAAUgB,GAAV,EAAejC,OAAf,EAAwB6B,KAAxB,EAA+B;AAC7B,YAAIK,CAAJ;AACA,aAAKC,aAAL,CAAmBF,GAAnB,EAAwBjC,OAAxB,EAAiC6B,KAAjC;;AACA,YAAI7B,OAAO,CAACc,MAAR,IAAkBd,OAAO,CAACmB,KAAR,GAAgB,CAAtC,EAAyC;AACvCe,UAAAA,CAAC,GAAGD,GAAG,CAACG,IAAJ,GAAW,IAAX,GAAkBH,GAAG,CAAC9B,KAAtB,GAA8B,GAAlC;AACD,SAFD,MAEO;AACL+B,UAAAA,CAAC,GAAG,MAAMD,GAAG,CAACG,IAAV,GAAiB,IAAjB,GAAwBH,GAAG,CAAC9B,KAA5B,GAAoC,GAAxC;AACD;;AACD,aAAKkC,cAAL,CAAoBJ,GAApB,EAAyBjC,OAAzB,EAAkC6B,KAAlC;AACA,eAAOK,CAAP;AACD;AA5F2B;AAAA;AAAA,aA8F5B,eAAMN,IAAN,EAAY5B,OAAZ,EAAqB6B,KAArB,EAA4B;AAC1B,YAAIK,CAAJ;AACA,aAAKI,QAAL,CAAcV,IAAd,EAAoB5B,OAApB,EAA6B6B,KAA7B;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC4D,OAA5B;AACAL,QAAAA,CAAC,GAAG,KAAKlB,MAAL,CAAYY,IAAZ,EAAkB5B,OAAlB,EAA2B6B,KAA3B,IAAoC,WAAxC;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC6D,SAA5B;AACAN,QAAAA,CAAC,IAAIN,IAAI,CAACzB,KAAV;AACAH,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC8D,QAA5B;AACAP,QAAAA,CAAC,IAAI,QAAQ,KAAKQ,OAAL,CAAad,IAAb,EAAmB5B,OAAnB,EAA4B6B,KAA5B,CAAb;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAACgD,IAA5B;AACA,aAAKgB,SAAL,CAAef,IAAf,EAAqB5B,OAArB,EAA8B6B,KAA9B;AACA,eAAOK,CAAP;AACD;AA1G2B;AAAA;AAAA,aA4G5B,iBAAQN,IAAR,EAAc5B,OAAd,EAAuB6B,KAAvB,EAA8B;AAC5B,YAAIK,CAAJ;AACA,aAAKI,QAAL,CAAcV,IAAd,EAAoB5B,OAApB,EAA6B6B,KAA7B;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC4D,OAA5B;AACAL,QAAAA,CAAC,GAAG,KAAKlB,MAAL,CAAYY,IAAZ,EAAkB5B,OAAlB,EAA2B6B,KAA3B,IAAoC,OAAxC;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC6D,SAA5B;AACAN,QAAAA,CAAC,IAAIN,IAAI,CAACzB,KAAV;AACAH,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC8D,QAA5B;AACAP,QAAAA,CAAC,IAAI,SAAS,KAAKQ,OAAL,CAAad,IAAb,EAAmB5B,OAAnB,EAA4B6B,KAA5B,CAAd;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAACgD,IAA5B;AACA,aAAKgB,SAAL,CAAef,IAAf,EAAqB5B,OAArB,EAA8B6B,KAA9B;AACA,eAAOK,CAAP;AACD;AAxH2B;AAAA;AAAA,aA0H5B,qBAAYN,IAAZ,EAAkB5B,OAAlB,EAA2B6B,KAA3B,EAAkC;AAChC,YAAIK,CAAJ;AACA,aAAKI,QAAL,CAAcV,IAAd,EAAoB5B,OAApB,EAA6B6B,KAA7B;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC4D,OAA5B;AACAL,QAAAA,CAAC,GAAG,KAAKlB,MAAL,CAAYY,IAAZ,EAAkB5B,OAAlB,EAA2B6B,KAA3B,IAAoC,OAAxC;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC6D,SAA5B;AACAN,QAAAA,CAAC,IAAI,eAAeN,IAAI,CAACgB,OAApB,GAA8B,GAAnC;;AACA,YAAIhB,IAAI,CAACiB,QAAL,IAAiB,IAArB,EAA2B;AACzBX,UAAAA,CAAC,IAAI,gBAAgBN,IAAI,CAACiB,QAArB,GAAgC,GAArC;AACD;;AACD,YAAIjB,IAAI,CAACkB,UAAL,IAAmB,IAAvB,EAA6B;AAC3BZ,UAAAA,CAAC,IAAI,kBAAkBN,IAAI,CAACkB,UAAvB,GAAoC,GAAzC;AACD;;AACD9C,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC8D,QAA5B;AACAP,QAAAA,CAAC,IAAIlC,OAAO,CAACsB,gBAAR,GAA2B,IAAhC;AACAY,QAAAA,CAAC,IAAI,KAAKQ,OAAL,CAAad,IAAb,EAAmB5B,OAAnB,EAA4B6B,KAA5B,CAAL;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAACgD,IAA5B;AACA,aAAKgB,SAAL,CAAef,IAAf,EAAqB5B,OAArB,EAA8B6B,KAA9B;AACA,eAAOK,CAAP;AACD;AA7I2B;AAAA;AAAA,aA+I5B,iBAAQN,IAAR,EAAc5B,OAAd,EAAuB6B,KAAvB,EAA8B;AAC5B,YAAIkB,KAAJ,EAAWC,CAAX,EAAcC,IAAd,EAAoBf,CAApB,EAAuBhC,GAAvB;AACA2B,QAAAA,KAAK,KAAKA,KAAK,GAAG,CAAb,CAAL;AACA,aAAKS,QAAL,CAAcV,IAAd,EAAoB5B,OAApB,EAA6B6B,KAA7B;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC4D,OAA5B;AACAL,QAAAA,CAAC,GAAG,KAAKlB,MAAL,CAAYY,IAAZ,EAAkB5B,OAAlB,EAA2B6B,KAA3B,CAAJ;AACAK,QAAAA,CAAC,IAAI,eAAeN,IAAI,CAACsB,IAAL,GAAYd,IAAhC,CAN4B,CAO5B;;AACA,YAAIR,IAAI,CAACuB,KAAL,IAAcvB,IAAI,CAACwB,KAAvB,EAA8B;AAC5BlB,UAAAA,CAAC,IAAI,cAAcN,IAAI,CAACuB,KAAnB,GAA2B,KAA3B,GAAmCvB,IAAI,CAACwB,KAAxC,GAAgD,GAArD;AACD,SAFD,MAEO,IAAIxB,IAAI,CAACwB,KAAT,EAAgB;AACrBlB,UAAAA,CAAC,IAAI,cAAcN,IAAI,CAACwB,KAAnB,GAA2B,GAAhC;AACD,SAZ2B,CAa5B;;;AACA,YAAIxB,IAAI,CAACyB,QAAL,CAAcC,MAAd,GAAuB,CAA3B,EAA8B;AAC5BpB,UAAAA,CAAC,IAAI,IAAL;AACAA,UAAAA,CAAC,IAAI,KAAKQ,OAAL,CAAad,IAAb,EAAmB5B,OAAnB,EAA4B6B,KAA5B,CAAL;AACA7B,UAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC6D,SAA5B;AACAtC,UAAAA,GAAG,GAAG0B,IAAI,CAACyB,QAAX;;AACA,eAAKL,CAAC,GAAG,CAAJ,EAAOC,IAAI,GAAG/C,GAAG,CAACoD,MAAvB,EAA+BN,CAAC,GAAGC,IAAnC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5CD,YAAAA,KAAK,GAAG7C,GAAG,CAAC8C,CAAD,CAAX;AACAd,YAAAA,CAAC,IAAI,KAAKqB,cAAL,CAAoBR,KAApB,EAA2B/C,OAA3B,EAAoC6B,KAAK,GAAG,CAA5C,CAAL;AACD;;AACD7B,UAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC8D,QAA5B;AACAP,UAAAA,CAAC,IAAI,GAAL;AACD,SAzB2B,CA0B5B;;;AACAlC,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC8D,QAA5B;AACAP,QAAAA,CAAC,IAAIlC,OAAO,CAACsB,gBAAR,GAA2B,GAAhC;AACAY,QAAAA,CAAC,IAAI,KAAKQ,OAAL,CAAad,IAAb,EAAmB5B,OAAnB,EAA4B6B,KAA5B,CAAL;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAACgD,IAA5B;AACA,aAAKgB,SAAL,CAAef,IAAf,EAAqB5B,OAArB,EAA8B6B,KAA9B;AACA,eAAOK,CAAP;AACD;AAhL2B;AAAA;AAAA,aAkL5B,iBAAQN,IAAR,EAAc5B,OAAd,EAAuB6B,KAAvB,EAA8B;AAC5B,YAAII,GAAJ,EAASuB,MAAT,EAAiBT,KAAjB,EAAwBU,cAAxB,EAAwCC,cAAxC,EAAwDV,CAAxD,EAA2DW,CAA3D,EAA8DC,GAA9D,EAAmEX,IAAnE,EAAyEY,IAAzE,EAA+EzB,IAA/E,EAAqF0B,gBAArF,EAAuG5B,CAAvG,EAA0G6B,IAA1G,EAAgH7D,GAAhH,EAAqHK,IAArH,EAA2HC,IAA3H,EAAiIC,IAAjI,EAAuIuD,KAAvI;AACAnC,QAAAA,KAAK,KAAKA,KAAK,GAAG,CAAb,CAAL;AACAiC,QAAAA,gBAAgB,GAAG,KAAnB,CAH4B,CAI5B;;AACA,aAAKxB,QAAL,CAAcV,IAAd,EAAoB5B,OAApB,EAA6B6B,KAA7B;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC4D,OAA5B;AACAL,QAAAA,CAAC,GAAG,KAAKlB,MAAL,CAAYY,IAAZ,EAAkB5B,OAAlB,EAA2B6B,KAA3B,IAAoC,GAApC,GAA0CD,IAAI,CAACQ,IAAnD,CAP4B,CAQ5B;;AACA,YAAIpC,OAAO,CAACc,MAAR,IAAkBd,OAAO,CAACmB,KAAR,GAAgB,CAAtC,EAAyC;AACvCyC,UAAAA,GAAG,GAAG1B,CAAC,CAACoB,MAAR;AACApD,UAAAA,GAAG,GAAG0B,IAAI,CAACqC,OAAX;;AACA,eAAK7B,IAAL,IAAalC,GAAb,EAAkB;AAChB,gBAAI,CAACP,OAAO,CAACU,IAAR,CAAaH,GAAb,EAAkBkC,IAAlB,CAAL,EAA8B;AAC9BH,YAAAA,GAAG,GAAG/B,GAAG,CAACkC,IAAD,CAAT;AACA2B,YAAAA,IAAI,GAAG,KAAKG,SAAL,CAAejC,GAAf,EAAoBjC,OAApB,EAA6B6B,KAA7B,CAAP;AACA2B,YAAAA,MAAM,GAAGO,IAAI,CAACT,MAAd;;AACA,gBAAIM,GAAG,GAAGJ,MAAN,GAAexD,OAAO,CAACmB,KAA3B,EAAkC;AAChC6C,cAAAA,KAAK,GAAG,KAAKhD,MAAL,CAAYY,IAAZ,EAAkB5B,OAAlB,EAA2B6B,KAAK,GAAG,CAAnC,IAAwCkC,IAAhD;AACA7B,cAAAA,CAAC,IAAI,KAAKQ,OAAL,CAAad,IAAb,EAAmB5B,OAAnB,EAA4B6B,KAA5B,IAAqCmC,KAA1C;AACAJ,cAAAA,GAAG,GAAGI,KAAK,CAACV,MAAZ;AACD,aAJD,MAIO;AACLU,cAAAA,KAAK,GAAG,MAAMD,IAAd;AACA7B,cAAAA,CAAC,IAAI8B,KAAL;AACAJ,cAAAA,GAAG,IAAII,KAAK,CAACV,MAAb;AACD;AACF;AACF,SAlBD,MAkBO;AACL/C,UAAAA,IAAI,GAAGqB,IAAI,CAACqC,OAAZ;;AACA,eAAK7B,IAAL,IAAa7B,IAAb,EAAmB;AACjB,gBAAI,CAACZ,OAAO,CAACU,IAAR,CAAaE,IAAb,EAAmB6B,IAAnB,CAAL,EAA+B;AAC/BH,YAAAA,GAAG,GAAG1B,IAAI,CAAC6B,IAAD,CAAV;AACAF,YAAAA,CAAC,IAAI,KAAKgC,SAAL,CAAejC,GAAf,EAAoBjC,OAApB,EAA6B6B,KAA7B,CAAL;AACD;AACF;;AACD4B,QAAAA,cAAc,GAAG7B,IAAI,CAACyB,QAAL,CAAcC,MAA/B;AACAI,QAAAA,cAAc,GAAGD,cAAc,KAAK,CAAnB,GAAuB,IAAvB,GAA8B7B,IAAI,CAACyB,QAAL,CAAc,CAAd,CAA/C;;AACA,YAAII,cAAc,KAAK,CAAnB,IAAwB7B,IAAI,CAACyB,QAAL,CAAcc,KAAd,CAAoB,UAASC,CAAT,EAAY;AAC1D,iBAAO,CAACA,CAAC,CAACC,IAAF,KAAW3F,QAAQ,CAAC4F,IAApB,IAA4BF,CAAC,CAACC,IAAF,KAAW3F,QAAQ,CAAC6F,GAAjD,KAAyDH,CAAC,CAACjE,KAAF,KAAY,EAA5E;AACD,SAF2B,CAA5B,EAEI;AACF;AACA,cAAIH,OAAO,CAACe,UAAZ,EAAwB;AACtBmB,YAAAA,CAAC,IAAI,GAAL;AACAlC,YAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC8D,QAA5B;AACAP,YAAAA,CAAC,IAAI,OAAON,IAAI,CAACQ,IAAZ,GAAmB,GAAnB,GAAyB,KAAKM,OAAL,CAAad,IAAb,EAAmB5B,OAAnB,EAA4B6B,KAA5B,CAA9B;AACD,WAJD,MAIO;AACL7B,YAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC8D,QAA5B;AACAP,YAAAA,CAAC,IAAIlC,OAAO,CAACsB,gBAAR,GAA2B,IAA3B,GAAkC,KAAKoB,OAAL,CAAad,IAAb,EAAmB5B,OAAnB,EAA4B6B,KAA5B,CAAvC;AACD;AACF,SAZD,MAYO,IAAI7B,OAAO,CAACc,MAAR,IAAkB2C,cAAc,KAAK,CAArC,KAA2CC,cAAc,CAACW,IAAf,KAAwB3F,QAAQ,CAAC4F,IAAjC,IAAyCZ,cAAc,CAACW,IAAf,KAAwB3F,QAAQ,CAAC6F,GAArH,KAA8Hb,cAAc,CAACvD,KAAf,IAAwB,IAA1J,EAAiK;AACtK;AACA+B,UAAAA,CAAC,IAAI,GAAL;AACAlC,UAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC6D,SAA5B;AACAxC,UAAAA,OAAO,CAACwB,mBAAR;AACAsC,UAAAA,gBAAgB,GAAG,IAAnB;AACA5B,UAAAA,CAAC,IAAI,KAAKqB,cAAL,CAAoBG,cAApB,EAAoC1D,OAApC,EAA6C6B,KAAK,GAAG,CAArD,CAAL;AACA7B,UAAAA,OAAO,CAACwB,mBAAR;AACAsC,UAAAA,gBAAgB,GAAG,KAAnB;AACA9D,UAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC8D,QAA5B;AACAP,UAAAA,CAAC,IAAI,OAAON,IAAI,CAACQ,IAAZ,GAAmB,GAAnB,GAAyB,KAAKM,OAAL,CAAad,IAAb,EAAmB5B,OAAnB,EAA4B6B,KAA5B,CAA9B;AACD,SAXM,MAWA;AACL;AACA,cAAI7B,OAAO,CAACoB,mBAAZ,EAAiC;AAC/BZ,YAAAA,IAAI,GAAGoB,IAAI,CAACyB,QAAZ;;AACA,iBAAKL,CAAC,GAAG,CAAJ,EAAOC,IAAI,GAAGzC,IAAI,CAAC8C,MAAxB,EAAgCN,CAAC,GAAGC,IAApC,EAA0CD,CAAC,EAA3C,EAA+C;AAC7CD,cAAAA,KAAK,GAAGvC,IAAI,CAACwC,CAAD,CAAZ;;AACA,kBAAI,CAACD,KAAK,CAACsB,IAAN,KAAe3F,QAAQ,CAAC4F,IAAxB,IAAgCvB,KAAK,CAACsB,IAAN,KAAe3F,QAAQ,CAAC6F,GAAzD,KAAkExB,KAAK,CAAC5C,KAAN,IAAe,IAArF,EAA4F;AAC1FH,gBAAAA,OAAO,CAACwB,mBAAR;AACAsC,gBAAAA,gBAAgB,GAAG,IAAnB;AACA;AACD;AACF;AACF,WAZI,CAaL;;;AACA5B,UAAAA,CAAC,IAAI,MAAM,KAAKQ,OAAL,CAAad,IAAb,EAAmB5B,OAAnB,EAA4B6B,KAA5B,CAAX;AACA7B,UAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC6D,SAA5B;AACA/B,UAAAA,IAAI,GAAGmB,IAAI,CAACyB,QAAZ,CAhBK,CAiBL;;AACA,eAAKM,CAAC,GAAG,CAAJ,EAAOE,IAAI,GAAGpD,IAAI,CAAC6C,MAAxB,EAAgCK,CAAC,GAAGE,IAApC,EAA0CF,CAAC,EAA3C,EAA+C;AAC7CZ,YAAAA,KAAK,GAAGtC,IAAI,CAACkD,CAAD,CAAZ;AACAzB,YAAAA,CAAC,IAAI,KAAKqB,cAAL,CAAoBR,KAApB,EAA2B/C,OAA3B,EAAoC6B,KAAK,GAAG,CAA5C,CAAL;AACD,WArBI,CAsBL;;;AACA7B,UAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC8D,QAA5B;AACAP,UAAAA,CAAC,IAAI,KAAKlB,MAAL,CAAYY,IAAZ,EAAkB5B,OAAlB,EAA2B6B,KAA3B,IAAoC,IAApC,GAA2CD,IAAI,CAACQ,IAAhD,GAAuD,GAA5D;;AACA,cAAI0B,gBAAJ,EAAsB;AACpB9D,YAAAA,OAAO,CAACwB,mBAAR;AACD;;AACDU,UAAAA,CAAC,IAAI,KAAKQ,OAAL,CAAad,IAAb,EAAmB5B,OAAnB,EAA4B6B,KAA5B,CAAL;AACA7B,UAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAACgD,IAA5B;AACD;;AACD,aAAKgB,SAAL,CAAef,IAAf,EAAqB5B,OAArB,EAA8B6B,KAA9B;AACA,eAAOK,CAAP;AACD;AA/Q2B;AAAA;AAAA,aAiR5B,wBAAeN,IAAf,EAAqB5B,OAArB,EAA8B6B,KAA9B,EAAqC;AACnC,gBAAQD,IAAI,CAACyC,IAAb;AACE,eAAK3F,QAAQ,CAAC8F,KAAd;AACE,mBAAO,KAAKC,KAAL,CAAW7C,IAAX,EAAiB5B,OAAjB,EAA0B6B,KAA1B,CAAP;;AACF,eAAKnD,QAAQ,CAACgG,OAAd;AACE,mBAAO,KAAKC,OAAL,CAAa/C,IAAb,EAAmB5B,OAAnB,EAA4B6B,KAA5B,CAAP;;AACF,eAAKnD,QAAQ,CAACkG,OAAd;AACE,mBAAO,KAAKC,OAAL,CAAajD,IAAb,EAAmB5B,OAAnB,EAA4B6B,KAA5B,CAAP;;AACF,eAAKnD,QAAQ,CAAC6F,GAAd;AACE,mBAAO,KAAKO,GAAL,CAASlD,IAAT,EAAe5B,OAAf,EAAwB6B,KAAxB,CAAP;;AACF,eAAKnD,QAAQ,CAAC4F,IAAd;AACE,mBAAO,KAAKS,IAAL,CAAUnD,IAAV,EAAgB5B,OAAhB,EAAyB6B,KAAzB,CAAP;;AACF,eAAKnD,QAAQ,CAACsG,qBAAd;AACE,mBAAO,KAAKC,qBAAL,CAA2BrD,IAA3B,EAAiC5B,OAAjC,EAA0C6B,KAA1C,CAAP;;AACF,eAAKnD,QAAQ,CAACwG,KAAd;AACE,mBAAO,EAAP;;AACF,eAAKxG,QAAQ,CAACyG,WAAd;AACE,mBAAO,KAAKC,WAAL,CAAiBxD,IAAjB,EAAuB5B,OAAvB,EAAgC6B,KAAhC,CAAP;;AACF,eAAKnD,QAAQ,CAAC2G,OAAd;AACE,mBAAO,KAAKC,OAAL,CAAa1D,IAAb,EAAmB5B,OAAnB,EAA4B6B,KAA5B,CAAP;;AACF,eAAKnD,QAAQ,CAAC6G,oBAAd;AACE,mBAAO,KAAKC,UAAL,CAAgB5D,IAAhB,EAAsB5B,OAAtB,EAA+B6B,KAA/B,CAAP;;AACF,eAAKnD,QAAQ,CAAC+G,kBAAd;AACE,mBAAO,KAAKC,UAAL,CAAgB9D,IAAhB,EAAsB5B,OAAtB,EAA+B6B,KAA/B,CAAP;;AACF,eAAKnD,QAAQ,CAACiH,iBAAd;AACE,mBAAO,KAAKC,SAAL,CAAehE,IAAf,EAAqB5B,OAArB,EAA8B6B,KAA9B,CAAP;;AACF,eAAKnD,QAAQ,CAACmH,mBAAd;AACE,mBAAO,KAAKC,WAAL,CAAiBlE,IAAjB,EAAuB5B,OAAvB,EAAgC6B,KAAhC,CAAP;;AACF;AACE,kBAAM,IAAIkE,KAAJ,CAAU,4BAA4BnE,IAAI,CAACoE,WAAL,CAAiB5D,IAAvD,CAAN;AA5BJ;AA8BD;AAhT2B;AAAA;AAAA,aAkT5B,+BAAsBR,IAAtB,EAA4B5B,OAA5B,EAAqC6B,KAArC,EAA4C;AAC1C,YAAIK,CAAJ;AACA,aAAKI,QAAL,CAAcV,IAAd,EAAoB5B,OAApB,EAA6B6B,KAA7B;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC4D,OAA5B;AACAL,QAAAA,CAAC,GAAG,KAAKlB,MAAL,CAAYY,IAAZ,EAAkB5B,OAAlB,EAA2B6B,KAA3B,IAAoC,IAAxC;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC6D,SAA5B;AACAN,QAAAA,CAAC,IAAIN,IAAI,CAACqE,MAAV;;AACA,YAAIrE,IAAI,CAACzB,KAAT,EAAgB;AACd+B,UAAAA,CAAC,IAAI,MAAMN,IAAI,CAACzB,KAAhB;AACD;;AACDH,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC8D,QAA5B;AACAP,QAAAA,CAAC,IAAIlC,OAAO,CAACsB,gBAAR,GAA2B,IAAhC;AACAY,QAAAA,CAAC,IAAI,KAAKQ,OAAL,CAAad,IAAb,EAAmB5B,OAAnB,EAA4B6B,KAA5B,CAAL;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAACgD,IAA5B;AACA,aAAKgB,SAAL,CAAef,IAAf,EAAqB5B,OAArB,EAA8B6B,KAA9B;AACA,eAAOK,CAAP;AACD;AAlU2B;AAAA;AAAA,aAoU5B,aAAIN,IAAJ,EAAU5B,OAAV,EAAmB6B,KAAnB,EAA0B;AACxB,YAAIK,CAAJ;AACA,aAAKI,QAAL,CAAcV,IAAd,EAAoB5B,OAApB,EAA6B6B,KAA7B;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC4D,OAA5B;AACAL,QAAAA,CAAC,GAAG,KAAKlB,MAAL,CAAYY,IAAZ,EAAkB5B,OAAlB,EAA2B6B,KAA3B,CAAJ;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC6D,SAA5B;AACAN,QAAAA,CAAC,IAAIN,IAAI,CAACzB,KAAV;AACAH,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC8D,QAA5B;AACAP,QAAAA,CAAC,IAAI,KAAKQ,OAAL,CAAad,IAAb,EAAmB5B,OAAnB,EAA4B6B,KAA5B,CAAL;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAACgD,IAA5B;AACA,aAAKgB,SAAL,CAAef,IAAf,EAAqB5B,OAArB,EAA8B6B,KAA9B;AACA,eAAOK,CAAP;AACD;AAhV2B;AAAA;AAAA,aAkV5B,cAAKN,IAAL,EAAW5B,OAAX,EAAoB6B,KAApB,EAA2B;AACzB,YAAIK,CAAJ;AACA,aAAKI,QAAL,CAAcV,IAAd,EAAoB5B,OAApB,EAA6B6B,KAA7B;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC4D,OAA5B;AACAL,QAAAA,CAAC,GAAG,KAAKlB,MAAL,CAAYY,IAAZ,EAAkB5B,OAAlB,EAA2B6B,KAA3B,CAAJ;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC6D,SAA5B;AACAN,QAAAA,CAAC,IAAIN,IAAI,CAACzB,KAAV;AACAH,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC8D,QAA5B;AACAP,QAAAA,CAAC,IAAI,KAAKQ,OAAL,CAAad,IAAb,EAAmB5B,OAAnB,EAA4B6B,KAA5B,CAAL;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAACgD,IAA5B;AACA,aAAKgB,SAAL,CAAef,IAAf,EAAqB5B,OAArB,EAA8B6B,KAA9B;AACA,eAAOK,CAAP;AACD;AA9V2B;AAAA;AAAA,aAgW5B,oBAAWN,IAAX,EAAiB5B,OAAjB,EAA0B6B,KAA1B,EAAiC;AAC/B,YAAIK,CAAJ;AACA,aAAKI,QAAL,CAAcV,IAAd,EAAoB5B,OAApB,EAA6B6B,KAA7B;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC4D,OAA5B;AACAL,QAAAA,CAAC,GAAG,KAAKlB,MAAL,CAAYY,IAAZ,EAAkB5B,OAAlB,EAA2B6B,KAA3B,IAAoC,WAAxC;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC6D,SAA5B;AACAN,QAAAA,CAAC,IAAI,MAAMN,IAAI,CAACsE,WAAX,GAAyB,GAAzB,GAA+BtE,IAAI,CAACuE,aAApC,GAAoD,GAApD,GAA0DvE,IAAI,CAACwE,aAApE;;AACA,YAAIxE,IAAI,CAACyE,gBAAL,KAA0B,UAA9B,EAA0C;AACxCnE,UAAAA,CAAC,IAAI,MAAMN,IAAI,CAACyE,gBAAhB;AACD;;AACD,YAAIzE,IAAI,CAAC0E,YAAT,EAAuB;AACrBpE,UAAAA,CAAC,IAAI,OAAON,IAAI,CAAC0E,YAAZ,GAA2B,GAAhC;AACD;;AACDtG,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC8D,QAA5B;AACAP,QAAAA,CAAC,IAAIlC,OAAO,CAACsB,gBAAR,GAA2B,GAA3B,GAAiC,KAAKoB,OAAL,CAAad,IAAb,EAAmB5B,OAAnB,EAA4B6B,KAA5B,CAAtC;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAACgD,IAA5B;AACA,aAAKgB,SAAL,CAAef,IAAf,EAAqB5B,OAArB,EAA8B6B,KAA9B;AACA,eAAOK,CAAP;AACD;AAlX2B;AAAA;AAAA,aAoX5B,oBAAWN,IAAX,EAAiB5B,OAAjB,EAA0B6B,KAA1B,EAAiC;AAC/B,YAAIK,CAAJ;AACA,aAAKI,QAAL,CAAcV,IAAd,EAAoB5B,OAApB,EAA6B6B,KAA7B;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC4D,OAA5B;AACAL,QAAAA,CAAC,GAAG,KAAKlB,MAAL,CAAYY,IAAZ,EAAkB5B,OAAlB,EAA2B6B,KAA3B,IAAoC,WAAxC;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC6D,SAA5B;AACAN,QAAAA,CAAC,IAAI,MAAMN,IAAI,CAACQ,IAAX,GAAkB,GAAlB,GAAwBR,IAAI,CAACzB,KAAlC;AACAH,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC8D,QAA5B;AACAP,QAAAA,CAAC,IAAIlC,OAAO,CAACsB,gBAAR,GAA2B,GAA3B,GAAiC,KAAKoB,OAAL,CAAad,IAAb,EAAmB5B,OAAnB,EAA4B6B,KAA5B,CAAtC;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAACgD,IAA5B;AACA,aAAKgB,SAAL,CAAef,IAAf,EAAqB5B,OAArB,EAA8B6B,KAA9B;AACA,eAAOK,CAAP;AACD;AAhY2B;AAAA;AAAA,aAkY5B,mBAAUN,IAAV,EAAgB5B,OAAhB,EAAyB6B,KAAzB,EAAgC;AAC9B,YAAIK,CAAJ;AACA,aAAKI,QAAL,CAAcV,IAAd,EAAoB5B,OAApB,EAA6B6B,KAA7B;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC4D,OAA5B;AACAL,QAAAA,CAAC,GAAG,KAAKlB,MAAL,CAAYY,IAAZ,EAAkB5B,OAAlB,EAA2B6B,KAA3B,IAAoC,UAAxC;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC6D,SAA5B;;AACA,YAAIZ,IAAI,CAAC2E,EAAT,EAAa;AACXrE,UAAAA,CAAC,IAAI,IAAL;AACD;;AACDA,QAAAA,CAAC,IAAI,MAAMN,IAAI,CAACQ,IAAhB;;AACA,YAAIR,IAAI,CAACzB,KAAT,EAAgB;AACd+B,UAAAA,CAAC,IAAI,OAAON,IAAI,CAACzB,KAAZ,GAAoB,GAAzB;AACD,SAFD,MAEO;AACL,cAAIyB,IAAI,CAACuB,KAAL,IAAcvB,IAAI,CAACwB,KAAvB,EAA8B;AAC5BlB,YAAAA,CAAC,IAAI,cAAcN,IAAI,CAACuB,KAAnB,GAA2B,KAA3B,GAAmCvB,IAAI,CAACwB,KAAxC,GAAgD,GAArD;AACD,WAFD,MAEO,IAAIxB,IAAI,CAACwB,KAAT,EAAgB;AACrBlB,YAAAA,CAAC,IAAI,cAAcN,IAAI,CAACwB,KAAnB,GAA2B,GAAhC;AACD;;AACD,cAAIxB,IAAI,CAAC4E,KAAT,EAAgB;AACdtE,YAAAA,CAAC,IAAI,YAAYN,IAAI,CAAC4E,KAAtB;AACD;AACF;;AACDxG,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC8D,QAA5B;AACAP,QAAAA,CAAC,IAAIlC,OAAO,CAACsB,gBAAR,GAA2B,GAA3B,GAAiC,KAAKoB,OAAL,CAAad,IAAb,EAAmB5B,OAAnB,EAA4B6B,KAA5B,CAAtC;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAACgD,IAA5B;AACA,aAAKgB,SAAL,CAAef,IAAf,EAAqB5B,OAArB,EAA8B6B,KAA9B;AACA,eAAOK,CAAP;AACD;AA7Z2B;AAAA;AAAA,aA+Z5B,qBAAYN,IAAZ,EAAkB5B,OAAlB,EAA2B6B,KAA3B,EAAkC;AAChC,YAAIK,CAAJ;AACA,aAAKI,QAAL,CAAcV,IAAd,EAAoB5B,OAApB,EAA6B6B,KAA7B;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC4D,OAA5B;AACAL,QAAAA,CAAC,GAAG,KAAKlB,MAAL,CAAYY,IAAZ,EAAkB5B,OAAlB,EAA2B6B,KAA3B,IAAoC,YAAxC;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC6D,SAA5B;AACAN,QAAAA,CAAC,IAAI,MAAMN,IAAI,CAACQ,IAAhB;;AACA,YAAIR,IAAI,CAACuB,KAAL,IAAcvB,IAAI,CAACwB,KAAvB,EAA8B;AAC5BlB,UAAAA,CAAC,IAAI,cAAcN,IAAI,CAACuB,KAAnB,GAA2B,KAA3B,GAAmCvB,IAAI,CAACwB,KAAxC,GAAgD,GAArD;AACD,SAFD,MAEO,IAAIxB,IAAI,CAACuB,KAAT,EAAgB;AACrBjB,UAAAA,CAAC,IAAI,cAAcN,IAAI,CAACuB,KAAnB,GAA2B,GAAhC;AACD,SAFM,MAEA,IAAIvB,IAAI,CAACwB,KAAT,EAAgB;AACrBlB,UAAAA,CAAC,IAAI,cAAcN,IAAI,CAACwB,KAAnB,GAA2B,GAAhC;AACD;;AACDpD,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAAC8D,QAA5B;AACAP,QAAAA,CAAC,IAAIlC,OAAO,CAACsB,gBAAR,GAA2B,GAA3B,GAAiC,KAAKoB,OAAL,CAAad,IAAb,EAAmB5B,OAAnB,EAA4B6B,KAA5B,CAAtC;AACA7B,QAAAA,OAAO,CAAC0B,KAAR,GAAgB/C,WAAW,CAACgD,IAA5B;AACA,aAAKgB,SAAL,CAAef,IAAf,EAAqB5B,OAArB,EAA8B6B,KAA9B;AACA,eAAOK,CAAP;AACD;AAlb2B;AAAA;AAAA,aAob5B,kBAASN,IAAT,EAAe5B,OAAf,EAAwB6B,KAAxB,EAA+B,CAAE;AApbL;AAAA;AAAA,aAsb5B,mBAAUD,IAAV,EAAgB5B,OAAhB,EAAyB6B,KAAzB,EAAgC,CAAE;AAtbN;AAAA;AAAA,aAwb5B,uBAAcI,GAAd,EAAmBjC,OAAnB,EAA4B6B,KAA5B,EAAmC,CAAE;AAxbT;AAAA;AAAA,aA0b5B,wBAAeI,GAAf,EAAoBjC,OAApB,EAA6B6B,KAA7B,EAAoC,CAAE;AA1bV;;AAAA;AAAA,KAA9B;AA8bD,CAneD,EAmeGxB,IAneH,CAmeQ,IAneR","sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, WriterState, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLProcessingInstruction, XMLRaw, XMLText, XMLWriterBase, assign,\n    hasProp = {}.hasOwnProperty;\n\n  ({assign} = require('./Utility'));\n\n  NodeType = require('./NodeType');\n\n  XMLDeclaration = require('./XMLDeclaration');\n\n  XMLDocType = require('./XMLDocType');\n\n  XMLCData = require('./XMLCData');\n\n  XMLComment = require('./XMLComment');\n\n  XMLElement = require('./XMLElement');\n\n  XMLRaw = require('./XMLRaw');\n\n  XMLText = require('./XMLText');\n\n  XMLProcessingInstruction = require('./XMLProcessingInstruction');\n\n  XMLDummy = require('./XMLDummy');\n\n  XMLDTDAttList = require('./XMLDTDAttList');\n\n  XMLDTDElement = require('./XMLDTDElement');\n\n  XMLDTDEntity = require('./XMLDTDEntity');\n\n  XMLDTDNotation = require('./XMLDTDNotation');\n\n  WriterState = require('./WriterState');\n\n  // Base class for XML writers\n  module.exports = XMLWriterBase = class XMLWriterBase {\n    // Initializes a new instance of `XMLWriterBase`\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation string\n    // `options.newline` newline sequence\n    // `options.offset` a fixed number of indentations to add to every line\n    // `options.width` maximum column width\n    // `options.allowEmpty` do not self close empty element tags\n    // 'options.dontPrettyTextNodes' if any text is present in node, don't indent or LF\n    // `options.spaceBeforeSlash` add a space before the closing slash of empty elements\n    constructor(options) {\n      var key, ref, value;\n      options || (options = {});\n      this.options = options;\n      ref = options.writer || {};\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        this[\"_\" + key] = this[key];\n        this[key] = value;\n      }\n    }\n\n    // Filters writer options and provides defaults\n\n    // `options` writer options\n    filterOptions(options) {\n      var filteredOptions, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7;\n      options || (options = {});\n      options = assign({}, this.options, options);\n      filteredOptions = {\n        writer: this\n      };\n      filteredOptions.pretty = options.pretty || false;\n      filteredOptions.allowEmpty = options.allowEmpty || false;\n      filteredOptions.indent = (ref = options.indent) != null ? ref : '  ';\n      filteredOptions.newline = (ref1 = options.newline) != null ? ref1 : '\\n';\n      filteredOptions.offset = (ref2 = options.offset) != null ? ref2 : 0;\n      filteredOptions.width = (ref3 = options.width) != null ? ref3 : 0;\n      filteredOptions.dontPrettyTextNodes = (ref4 = (ref5 = options.dontPrettyTextNodes) != null ? ref5 : options.dontprettytextnodes) != null ? ref4 : 0;\n      filteredOptions.spaceBeforeSlash = (ref6 = (ref7 = options.spaceBeforeSlash) != null ? ref7 : options.spacebeforeslash) != null ? ref6 : '';\n      if (filteredOptions.spaceBeforeSlash === true) {\n        filteredOptions.spaceBeforeSlash = ' ';\n      }\n      filteredOptions.suppressPrettyCount = 0;\n      filteredOptions.user = {};\n      filteredOptions.state = WriterState.None;\n      return filteredOptions;\n    }\n\n    // Returns the indentation string for the current level\n\n    // `node` current node\n    // `options` writer options\n    // `level` current indentation level\n    indent(node, options, level) {\n      var indentLevel;\n      if (!options.pretty || options.suppressPrettyCount) {\n        return '';\n      } else if (options.pretty) {\n        indentLevel = (level || 0) + options.offset + 1;\n        if (indentLevel > 0) {\n          return new Array(indentLevel).join(options.indent);\n        }\n      }\n      return '';\n    }\n\n    // Returns the newline string\n\n    // `node` current node\n    // `options` writer options\n    // `level` current indentation level\n    endline(node, options, level) {\n      if (!options.pretty || options.suppressPrettyCount) {\n        return '';\n      } else {\n        return options.newline;\n      }\n    }\n\n    attribute(att, options, level) {\n      var r;\n      this.openAttribute(att, options, level);\n      if (options.pretty && options.width > 0) {\n        r = att.name + '=\"' + att.value + '\"';\n      } else {\n        r = ' ' + att.name + '=\"' + att.value + '\"';\n      }\n      this.closeAttribute(att, options, level);\n      return r;\n    }\n\n    cdata(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<![CDATA[';\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += ']]>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    comment(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!-- ';\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += ' -->' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    declaration(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<?xml';\n      options.state = WriterState.InsideTag;\n      r += ' version=\"' + node.version + '\"';\n      if (node.encoding != null) {\n        r += ' encoding=\"' + node.encoding + '\"';\n      }\n      if (node.standalone != null) {\n        r += ' standalone=\"' + node.standalone + '\"';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '?>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    docType(node, options, level) {\n      var child, i, len1, r, ref;\n      level || (level = 0);\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      r += '<!DOCTYPE ' + node.root().name;\n      // external identifier\n      if (node.pubID && node.sysID) {\n        r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n      } else if (node.sysID) {\n        r += ' SYSTEM \"' + node.sysID + '\"';\n      }\n      // internal subset\n      if (node.children.length > 0) {\n        r += ' [';\n        r += this.endline(node, options, level);\n        options.state = WriterState.InsideTag;\n        ref = node.children;\n        for (i = 0, len1 = ref.length; i < len1; i++) {\n          child = ref[i];\n          r += this.writeChildNode(child, options, level + 1);\n        }\n        options.state = WriterState.CloseTag;\n        r += ']';\n      }\n      // close tag\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    element(node, options, level) {\n      var att, attLen, child, childNodeCount, firstChildNode, i, j, len, len1, len2, name, prettySuppressed, r, ratt, ref, ref1, ref2, ref3, rline;\n      level || (level = 0);\n      prettySuppressed = false;\n      // open tag\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<' + node.name;\n      // attributes\n      if (options.pretty && options.width > 0) {\n        len = r.length;\n        ref = node.attribs;\n        for (name in ref) {\n          if (!hasProp.call(ref, name)) continue;\n          att = ref[name];\n          ratt = this.attribute(att, options, level);\n          attLen = ratt.length;\n          if (len + attLen > options.width) {\n            rline = this.indent(node, options, level + 1) + ratt;\n            r += this.endline(node, options, level) + rline;\n            len = rline.length;\n          } else {\n            rline = ' ' + ratt;\n            r += rline;\n            len += rline.length;\n          }\n        }\n      } else {\n        ref1 = node.attribs;\n        for (name in ref1) {\n          if (!hasProp.call(ref1, name)) continue;\n          att = ref1[name];\n          r += this.attribute(att, options, level);\n        }\n      }\n      childNodeCount = node.children.length;\n      firstChildNode = childNodeCount === 0 ? null : node.children[0];\n      if (childNodeCount === 0 || node.children.every(function(e) {\n        return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === '';\n      })) {\n        // empty element\n        if (options.allowEmpty) {\n          r += '>';\n          options.state = WriterState.CloseTag;\n          r += '</' + node.name + '>' + this.endline(node, options, level);\n        } else {\n          options.state = WriterState.CloseTag;\n          r += options.spaceBeforeSlash + '/>' + this.endline(node, options, level);\n        }\n      } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && (firstChildNode.value != null)) {\n        // do not indent text-only nodes\n        r += '>';\n        options.state = WriterState.InsideTag;\n        options.suppressPrettyCount++;\n        prettySuppressed = true;\n        r += this.writeChildNode(firstChildNode, options, level + 1);\n        options.suppressPrettyCount--;\n        prettySuppressed = false;\n        options.state = WriterState.CloseTag;\n        r += '</' + node.name + '>' + this.endline(node, options, level);\n      } else {\n        // if ANY are a text node, then suppress pretty now\n        if (options.dontPrettyTextNodes) {\n          ref2 = node.children;\n          for (i = 0, len1 = ref2.length; i < len1; i++) {\n            child = ref2[i];\n            if ((child.type === NodeType.Text || child.type === NodeType.Raw) && (child.value != null)) {\n              options.suppressPrettyCount++;\n              prettySuppressed = true;\n              break;\n            }\n          }\n        }\n        // close the opening tag, after dealing with newline\n        r += '>' + this.endline(node, options, level);\n        options.state = WriterState.InsideTag;\n        ref3 = node.children;\n        // inner tags\n        for (j = 0, len2 = ref3.length; j < len2; j++) {\n          child = ref3[j];\n          r += this.writeChildNode(child, options, level + 1);\n        }\n        // close tag\n        options.state = WriterState.CloseTag;\n        r += this.indent(node, options, level) + '</' + node.name + '>';\n        if (prettySuppressed) {\n          options.suppressPrettyCount--;\n        }\n        r += this.endline(node, options, level);\n        options.state = WriterState.None;\n      }\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    writeChildNode(node, options, level) {\n      switch (node.type) {\n        case NodeType.CData:\n          return this.cdata(node, options, level);\n        case NodeType.Comment:\n          return this.comment(node, options, level);\n        case NodeType.Element:\n          return this.element(node, options, level);\n        case NodeType.Raw:\n          return this.raw(node, options, level);\n        case NodeType.Text:\n          return this.text(node, options, level);\n        case NodeType.ProcessingInstruction:\n          return this.processingInstruction(node, options, level);\n        case NodeType.Dummy:\n          return '';\n        case NodeType.Declaration:\n          return this.declaration(node, options, level);\n        case NodeType.DocType:\n          return this.docType(node, options, level);\n        case NodeType.AttributeDeclaration:\n          return this.dtdAttList(node, options, level);\n        case NodeType.ElementDeclaration:\n          return this.dtdElement(node, options, level);\n        case NodeType.EntityDeclaration:\n          return this.dtdEntity(node, options, level);\n        case NodeType.NotationDeclaration:\n          return this.dtdNotation(node, options, level);\n        default:\n          throw new Error(\"Unknown XML node type: \" + node.constructor.name);\n      }\n    }\n\n    processingInstruction(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<?';\n      options.state = WriterState.InsideTag;\n      r += node.target;\n      if (node.value) {\n        r += ' ' + node.value;\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '?>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    raw(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    text(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    dtdAttList(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ATTLIST';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.elementName + ' ' + node.attributeName + ' ' + node.attributeType;\n      if (node.defaultValueType !== '#DEFAULT') {\n        r += ' ' + node.defaultValueType;\n      }\n      if (node.defaultValue) {\n        r += ' \"' + node.defaultValue + '\"';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    dtdElement(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ELEMENT';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.name + ' ' + node.value;\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    dtdEntity(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ENTITY';\n      options.state = WriterState.InsideTag;\n      if (node.pe) {\n        r += ' %';\n      }\n      r += ' ' + node.name;\n      if (node.value) {\n        r += ' \"' + node.value + '\"';\n      } else {\n        if (node.pubID && node.sysID) {\n          r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n        } else if (node.sysID) {\n          r += ' SYSTEM \"' + node.sysID + '\"';\n        }\n        if (node.nData) {\n          r += ' NDATA ' + node.nData;\n        }\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    dtdNotation(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!NOTATION';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.name;\n      if (node.pubID && node.sysID) {\n        r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n      } else if (node.pubID) {\n        r += ' PUBLIC \"' + node.pubID + '\"';\n      } else if (node.sysID) {\n        r += ' SYSTEM \"' + node.sysID + '\"';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    }\n\n    openNode(node, options, level) {}\n\n    closeNode(node, options, level) {}\n\n    openAttribute(att, options, level) {}\n\n    closeAttribute(att, options, level) {}\n\n  };\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}