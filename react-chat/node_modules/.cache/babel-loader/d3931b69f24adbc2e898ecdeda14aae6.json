{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar operation_retrier_1 = require(\"operation-retrier\");\n\nvar logger_1 = require(\"../logger\");\n\nvar configuration_1 = require(\"../configuration\");\n\nvar log = logger_1.Logger.scope('Network');\n\nvar Network = /*#__PURE__*/function () {\n  function Network(config, transport) {\n    _classCallCheck(this, Network);\n\n    this.config = config;\n    this.transport = transport;\n  }\n\n  _createClass(Network, [{\n    key: \"backoffConfig\",\n    value: function backoffConfig() {\n      return Object.assign(configuration_1.Configuration.backoffConfigDefault, this.config.backoffConfigOverride);\n    }\n  }, {\n    key: \"retryWhenThrottled\",\n    value: function retryWhenThrottled() {\n      if (typeof this.config.retryWhenThrottledOverride !== 'undefined') {\n        return this.config.retryWhenThrottledOverride;\n      }\n\n      if (typeof configuration_1.Configuration.retryWhenThrottledDefault !== 'undefined') {\n        return configuration_1.Configuration.retryWhenThrottledDefault;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"executeWithRetry\",\n    value: function executeWithRetry(request) {\n      var _this = this;\n\n      var retryWhenThrottled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return new Promise(function (resolve, reject) {\n        var codesToRetryOn = [502, 503, 504];\n\n        if (retryWhenThrottled) {\n          codesToRetryOn.push(429);\n        }\n\n        var retrier = new operation_retrier_1.Retrier(_this.backoffConfig());\n        retrier.on('attempt', function () {\n          request().then(function (result) {\n            return retrier.succeeded(result);\n          }).catch(function (err) {\n            if (codesToRetryOn.indexOf(err.status) > -1) {\n              retrier.failed(err);\n            } else if (err.message === 'Twilsock disconnected') {\n              // Ugly hack. We must make a proper exceptions for twilsock\n              retrier.failed(err);\n            } else {\n              // Fatal error\n              retrier.removeAllListeners();\n              retrier.cancel();\n              reject(err);\n            }\n          });\n        });\n        retrier.on('succeeded', function (result) {\n          resolve(result);\n        });\n        retrier.on('cancelled', function (err) {\n          return reject(err);\n        });\n        retrier.on('failed', function (err) {\n          return reject(err);\n        });\n        retrier.start();\n      });\n    }\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n        var _this2 = this;\n\n        var headers, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                headers = {\n                  'X-Twilio-Token': this.config.token\n                };\n                log.trace('sending GET request to ', url, ' headers ', headers);\n                _context.next = 4;\n                return this.executeWithRetry(function () {\n                  return _this2.transport.get(url, headers);\n                }, this.retryWhenThrottled());\n\n              case 4:\n                response = _context.sent;\n                log.trace('response', response);\n                return _context.abrupt(\"return\", response);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function get(_x) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n  }, {\n    key: \"post\",\n    value: function () {\n      var _post = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url, media, contentType) {\n        var headers, response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                headers = {\n                  'X-Twilio-Token': this.config.token\n                };\n\n                if ((typeof FormData === 'undefined' || !(media instanceof FormData)) && contentType) {\n                  Object.assign(headers, {\n                    'Content-Type': contentType\n                  });\n                }\n\n                log.trace('sending POST request to ', url, ' headers ', headers);\n                _context2.prev = 3;\n                _context2.next = 6;\n                return this.transport.post(url, headers, media);\n\n              case 6:\n                response = _context2.sent;\n                _context2.next = 17;\n                break;\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](3);\n\n                if (!(_context2.t0 instanceof TypeError)) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                log.trace('got error in post response', _context2.t0);\n                throw new TypeError('Posting FormData supported only with browser engine\\'s FormData');\n\n              case 16:\n                throw _context2.t0;\n\n              case 17:\n                log.trace('response', response);\n                return _context2.abrupt(\"return\", response);\n\n              case 19:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[3, 9]]);\n      }));\n\n      function post(_x2, _x3, _x4) {\n        return _post.apply(this, arguments);\n      }\n\n      return post;\n    }()\n  }]);\n\n  return Network;\n}();\n\nexports.Network = Network;","map":{"version":3,"sources":["/Users/stefanpjanic/Desktop/mango_dev/node_modules/twilio-mcs-client/lib/services/network.js"],"names":["Object","defineProperty","exports","value","operation_retrier_1","require","logger_1","configuration_1","log","Logger","scope","Network","config","transport","assign","Configuration","backoffConfigDefault","backoffConfigOverride","retryWhenThrottledOverride","retryWhenThrottledDefault","request","retryWhenThrottled","Promise","resolve","reject","codesToRetryOn","push","retrier","Retrier","backoffConfig","on","then","result","succeeded","catch","err","indexOf","status","failed","message","removeAllListeners","cancel","start","url","headers","token","trace","executeWithRetry","get","response","media","contentType","FormData","post","TypeError"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst operation_retrier_1 = require(\"operation-retrier\");\nconst logger_1 = require(\"../logger\");\nconst configuration_1 = require(\"../configuration\");\nconst log = logger_1.Logger.scope('Network');\nclass Network {\n    constructor(config, transport) {\n        this.config = config;\n        this.transport = transport;\n    }\n    backoffConfig() {\n        return Object.assign(configuration_1.Configuration.backoffConfigDefault, this.config.backoffConfigOverride);\n    }\n    retryWhenThrottled() {\n        if (typeof this.config.retryWhenThrottledOverride !== 'undefined') {\n            return this.config.retryWhenThrottledOverride;\n        }\n        if (typeof configuration_1.Configuration.retryWhenThrottledDefault !== 'undefined') {\n            return configuration_1.Configuration.retryWhenThrottledDefault;\n        }\n        return false;\n    }\n    executeWithRetry(request, retryWhenThrottled = false) {\n        return new Promise((resolve, reject) => {\n            let codesToRetryOn = [502, 503, 504];\n            if (retryWhenThrottled) {\n                codesToRetryOn.push(429);\n            }\n            let retrier = new operation_retrier_1.Retrier(this.backoffConfig());\n            retrier.on('attempt', () => {\n                request()\n                    .then(result => retrier.succeeded(result))\n                    .catch(err => {\n                    if (codesToRetryOn.indexOf(err.status) > -1) {\n                        retrier.failed(err);\n                    }\n                    else if (err.message === 'Twilsock disconnected') {\n                        // Ugly hack. We must make a proper exceptions for twilsock\n                        retrier.failed(err);\n                    }\n                    else {\n                        // Fatal error\n                        retrier.removeAllListeners();\n                        retrier.cancel();\n                        reject(err);\n                    }\n                });\n            });\n            retrier.on('succeeded', result => { resolve(result); });\n            retrier.on('cancelled', err => reject(err));\n            retrier.on('failed', err => reject(err));\n            retrier.start();\n        });\n    }\n    async get(url) {\n        const headers = { 'X-Twilio-Token': this.config.token };\n        log.trace('sending GET request to ', url, ' headers ', headers);\n        let response = await this.executeWithRetry(() => this.transport.get(url, headers), this.retryWhenThrottled());\n        log.trace('response', response);\n        return response;\n    }\n    async post(url, media, contentType) {\n        let headers = {\n            'X-Twilio-Token': this.config.token\n        };\n        if ((typeof FormData === 'undefined' || !(media instanceof FormData)) && contentType) {\n            Object.assign(headers, {\n                'Content-Type': contentType\n            });\n        }\n        let response;\n        log.trace('sending POST request to ', url, ' headers ', headers);\n        try {\n            response = await this.transport.post(url, headers, media);\n        }\n        catch (err) {\n            if (err instanceof TypeError) {\n                log.trace('got error in post response', err);\n                throw new TypeError('Posting FormData supported only with browser engine\\'s FormData');\n            }\n            else {\n                throw err;\n            }\n        }\n        log.trace('response', response);\n        return response;\n    }\n}\nexports.Network = Network;\n"]},"metadata":{},"sourceType":"script"}