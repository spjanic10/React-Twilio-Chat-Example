{"ast":null,"code":"var _classCallCheck = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _get = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\n// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType,\n      XMLAttribute,\n      XMLElement,\n      XMLNamedNodeMap,\n      XMLNode,\n      getValue,\n      isFunction,\n      isObject,\n      hasProp = {}.hasOwnProperty;\n\n  var _require = require('./Utility');\n\n  isObject = _require.isObject;\n  isFunction = _require.isFunction;\n  getValue = _require.getValue;\n  XMLNode = require('./XMLNode');\n  NodeType = require('./NodeType');\n  XMLAttribute = require('./XMLAttribute');\n  XMLNamedNodeMap = require('./XMLNamedNodeMap'); // Represents an element of the XML document\n\n  module.exports = XMLElement = function () {\n    var XMLElement = /*#__PURE__*/function (_XMLNode) {\n      \"use strict\";\n\n      _inherits(XMLElement, _XMLNode);\n\n      var _super = _createSuper(XMLElement);\n\n      // Initializes a new instance of `XMLElement`\n      // `parent` the parent node\n      // `name` element name\n      // `attributes` an object containing name/value pairs of attributes\n      function XMLElement(parent, name, attributes) {\n        var _this;\n\n        _classCallCheck(this, XMLElement);\n\n        var child, j, len, ref;\n        _this = _super.call(this, parent);\n\n        if (name == null) {\n          throw new Error(\"Missing element name. \" + _this.debugInfo());\n        }\n\n        _this.name = _this.stringify.name(name);\n        _this.type = NodeType.Element;\n        _this.attribs = {};\n        _this.schemaTypeInfo = null;\n\n        if (attributes != null) {\n          _this.attribute(attributes);\n        } // set properties if this is the root node\n\n\n        if (parent.type === NodeType.Document) {\n          _this.isRoot = true;\n          _this.documentObject = parent;\n          parent.rootObject = _assertThisInitialized(_this); // set dtd name\n\n          if (parent.children) {\n            ref = parent.children;\n\n            for (j = 0, len = ref.length; j < len; j++) {\n              child = ref[j];\n\n              if (child.type === NodeType.DocType) {\n                child.name = _this.name;\n                break;\n              }\n            }\n          }\n        }\n\n        return _this;\n      } // Creates and returns a deep clone of `this`\n\n\n      _createClass(XMLElement, [{\n        key: \"clone\",\n        value: function clone() {\n          var att, attName, clonedSelf, ref;\n          clonedSelf = Object.create(this); // remove document element\n\n          if (clonedSelf.isRoot) {\n            clonedSelf.documentObject = null;\n          } // clone attributes\n\n\n          clonedSelf.attribs = {};\n          ref = this.attribs;\n\n          for (attName in ref) {\n            if (!hasProp.call(ref, attName)) continue;\n            att = ref[attName];\n            clonedSelf.attribs[attName] = att.clone();\n          } // clone child nodes\n\n\n          clonedSelf.children = [];\n          this.children.forEach(function (child) {\n            var clonedChild;\n            clonedChild = child.clone();\n            clonedChild.parent = clonedSelf;\n            return clonedSelf.children.push(clonedChild);\n          });\n          return clonedSelf;\n        } // Adds or modifies an attribute\n        // `name` attribute name\n        // `value` attribute value\n\n      }, {\n        key: \"attribute\",\n        value: function attribute(name, value) {\n          var attName, attValue;\n\n          if (name != null) {\n            name = getValue(name);\n          }\n\n          if (isObject(name)) {\n            // expand if object\n            for (attName in name) {\n              if (!hasProp.call(name, attName)) continue;\n              attValue = name[attName];\n              this.attribute(attName, attValue);\n            }\n          } else {\n            if (isFunction(value)) {\n              value = value.apply();\n            }\n\n            if (this.options.keepNullAttributes && value == null) {\n              this.attribs[name] = new XMLAttribute(this, name, \"\");\n            } else if (value != null) {\n              this.attribs[name] = new XMLAttribute(this, name, value);\n            }\n          }\n\n          return this;\n        } // Removes an attribute\n        // `name` attribute name\n\n      }, {\n        key: \"removeAttribute\",\n        value: function removeAttribute(name) {\n          var attName, j, len; // Also defined in DOM level 1\n          // removeAttribute(name) removes an attribute by name.\n\n          if (name == null) {\n            throw new Error(\"Missing attribute name. \" + this.debugInfo());\n          }\n\n          name = getValue(name);\n\n          if (Array.isArray(name)) {\n            // expand if array\n            for (j = 0, len = name.length; j < len; j++) {\n              attName = name[j];\n              delete this.attribs[attName];\n            }\n          } else {\n            delete this.attribs[name];\n          }\n\n          return this;\n        } // Converts the XML fragment to string\n        // `options.pretty` pretty prints the result\n        // `options.indent` indentation for pretty print\n        // `options.offset` how many indentations to add to every line for pretty print\n        // `options.newline` newline sequence for pretty print\n        // `options.allowEmpty` do not self close empty element tags\n\n      }, {\n        key: \"toString\",\n        value: function toString(options) {\n          return this.options.writer.element(this, this.options.writer.filterOptions(options));\n        } // Aliases\n\n      }, {\n        key: \"att\",\n        value: function att(name, value) {\n          return this.attribute(name, value);\n        }\n      }, {\n        key: \"a\",\n        value: function a(name, value) {\n          return this.attribute(name, value);\n        } // DOM Level 1\n\n      }, {\n        key: \"getAttribute\",\n        value: function getAttribute(name) {\n          if (this.attribs.hasOwnProperty(name)) {\n            return this.attribs[name].value;\n          } else {\n            return null;\n          }\n        }\n      }, {\n        key: \"setAttribute\",\n        value: function setAttribute(name, value) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"getAttributeNode\",\n        value: function getAttributeNode(name) {\n          if (this.attribs.hasOwnProperty(name)) {\n            return this.attribs[name];\n          } else {\n            return null;\n          }\n        }\n      }, {\n        key: \"setAttributeNode\",\n        value: function setAttributeNode(newAttr) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"removeAttributeNode\",\n        value: function removeAttributeNode(oldAttr) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"getElementsByTagName\",\n        value: // DOM Level 4\n        function getElementsByTagName(tagname) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"getAttributeNS\",\n        value: // DOM Level 2\n        function getAttributeNS(namespaceURI, localName) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"setAttributeNS\",\n        value: function setAttributeNS(namespaceURI, qualifiedName, value) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"removeAttributeNS\",\n        value: function removeAttributeNS(namespaceURI, localName) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"getAttributeNodeNS\",\n        value: function getAttributeNodeNS(namespaceURI, localName) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"setAttributeNodeNS\",\n        value: function setAttributeNodeNS(newAttr) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"getElementsByTagNameNS\",\n        value: function getElementsByTagNameNS(namespaceURI, localName) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"hasAttribute\",\n        value: function hasAttribute(name) {\n          return this.attribs.hasOwnProperty(name);\n        }\n      }, {\n        key: \"hasAttributeNS\",\n        value: function hasAttributeNS(namespaceURI, localName) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        } // DOM Level 3\n\n      }, {\n        key: \"setIdAttribute\",\n        value: function setIdAttribute(name, isId) {\n          if (this.attribs.hasOwnProperty(name)) {\n            return this.attribs[name].isId;\n          } else {\n            return isId;\n          }\n        }\n      }, {\n        key: \"setIdAttributeNS\",\n        value: function setIdAttributeNS(namespaceURI, localName, isId) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"setIdAttributeNode\",\n        value: function setIdAttributeNode(idAttr, isId) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"getElementsByClassName\",\n        value: function getElementsByClassName(classNames) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"isEqualNode\",\n        value: function isEqualNode(node) {\n          var i, j, ref;\n\n          if (!_get(_getPrototypeOf(XMLElement.prototype), \"isEqualNode\", this).call(this, node)) {\n            return false;\n          }\n\n          if (node.namespaceURI !== this.namespaceURI) {\n            return false;\n          }\n\n          if (node.prefix !== this.prefix) {\n            return false;\n          }\n\n          if (node.localName !== this.localName) {\n            return false;\n          }\n\n          if (node.attribs.length !== this.attribs.length) {\n            return false;\n          }\n\n          for (i = j = 0, ref = this.attribs.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {\n            if (!this.attribs[i].isEqualNode(node.attribs[i])) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n      }]);\n\n      return XMLElement;\n    }(XMLNode);\n\n    ; // DOM level 1\n\n    Object.defineProperty(XMLElement.prototype, 'tagName', {\n      get: function get() {\n        return this.name;\n      }\n    }); // DOM level 4\n\n    Object.defineProperty(XMLElement.prototype, 'namespaceURI', {\n      get: function get() {\n        return '';\n      }\n    });\n    Object.defineProperty(XMLElement.prototype, 'prefix', {\n      get: function get() {\n        return '';\n      }\n    });\n    Object.defineProperty(XMLElement.prototype, 'localName', {\n      get: function get() {\n        return this.name;\n      }\n    });\n    Object.defineProperty(XMLElement.prototype, 'id', {\n      get: function get() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n    Object.defineProperty(XMLElement.prototype, 'className', {\n      get: function get() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n    Object.defineProperty(XMLElement.prototype, 'classList', {\n      get: function get() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n    Object.defineProperty(XMLElement.prototype, 'attributes', {\n      get: function get() {\n        if (!this.attributeMap || !this.attributeMap.nodes) {\n          this.attributeMap = new XMLNamedNodeMap(this.attribs);\n        }\n\n        return this.attributeMap;\n      }\n    });\n    return XMLElement;\n  }.call(this);\n}).call(this);","map":{"version":3,"sources":["/Users/stefanpjanic/Desktop/mango_dev/node_modules/xmlbuilder/lib/XMLElement.js"],"names":["NodeType","XMLAttribute","XMLElement","XMLNamedNodeMap","XMLNode","getValue","isFunction","isObject","hasProp","hasOwnProperty","require","module","exports","parent","name","attributes","child","j","len","ref","Error","debugInfo","stringify","type","Element","attribs","schemaTypeInfo","attribute","Document","isRoot","documentObject","rootObject","children","length","DocType","att","attName","clonedSelf","Object","create","call","clone","forEach","clonedChild","push","value","attValue","apply","options","keepNullAttributes","Array","isArray","writer","element","filterOptions","newAttr","oldAttr","tagname","namespaceURI","localName","qualifiedName","isId","idAttr","classNames","node","i","prefix","isEqualNode","defineProperty","prototype","get","attributeMap","nodes"],"mappings":"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","sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLAttribute, XMLElement, XMLNamedNodeMap, XMLNode, getValue, isFunction, isObject,\n    hasProp = {}.hasOwnProperty;\n\n  ({isObject, isFunction, getValue} = require('./Utility'));\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  XMLAttribute = require('./XMLAttribute');\n\n  XMLNamedNodeMap = require('./XMLNamedNodeMap');\n\n  // Represents an element of the XML document\n  module.exports = XMLElement = (function() {\n    class XMLElement extends XMLNode {\n      // Initializes a new instance of `XMLElement`\n\n      // `parent` the parent node\n      // `name` element name\n      // `attributes` an object containing name/value pairs of attributes\n      constructor(parent, name, attributes) {\n        var child, j, len, ref;\n        super(parent);\n        if (name == null) {\n          throw new Error(\"Missing element name. \" + this.debugInfo());\n        }\n        this.name = this.stringify.name(name);\n        this.type = NodeType.Element;\n        this.attribs = {};\n        this.schemaTypeInfo = null;\n        if (attributes != null) {\n          this.attribute(attributes);\n        }\n        // set properties if this is the root node\n        if (parent.type === NodeType.Document) {\n          this.isRoot = true;\n          this.documentObject = parent;\n          parent.rootObject = this;\n          // set dtd name\n          if (parent.children) {\n            ref = parent.children;\n            for (j = 0, len = ref.length; j < len; j++) {\n              child = ref[j];\n              if (child.type === NodeType.DocType) {\n                child.name = this.name;\n                break;\n              }\n            }\n          }\n        }\n      }\n\n      // Creates and returns a deep clone of `this`\n\n      clone() {\n        var att, attName, clonedSelf, ref;\n        clonedSelf = Object.create(this);\n        // remove document element\n        if (clonedSelf.isRoot) {\n          clonedSelf.documentObject = null;\n        }\n        // clone attributes\n        clonedSelf.attribs = {};\n        ref = this.attribs;\n        for (attName in ref) {\n          if (!hasProp.call(ref, attName)) continue;\n          att = ref[attName];\n          clonedSelf.attribs[attName] = att.clone();\n        }\n        // clone child nodes\n        clonedSelf.children = [];\n        this.children.forEach(function(child) {\n          var clonedChild;\n          clonedChild = child.clone();\n          clonedChild.parent = clonedSelf;\n          return clonedSelf.children.push(clonedChild);\n        });\n        return clonedSelf;\n      }\n\n      // Adds or modifies an attribute\n\n      // `name` attribute name\n      // `value` attribute value\n      attribute(name, value) {\n        var attName, attValue;\n        if (name != null) {\n          name = getValue(name);\n        }\n        if (isObject(name)) { // expand if object\n          for (attName in name) {\n            if (!hasProp.call(name, attName)) continue;\n            attValue = name[attName];\n            this.attribute(attName, attValue);\n          }\n        } else {\n          if (isFunction(value)) {\n            value = value.apply();\n          }\n          if (this.options.keepNullAttributes && (value == null)) {\n            this.attribs[name] = new XMLAttribute(this, name, \"\");\n          } else if (value != null) {\n            this.attribs[name] = new XMLAttribute(this, name, value);\n          }\n        }\n        return this;\n      }\n\n      // Removes an attribute\n\n      // `name` attribute name\n      removeAttribute(name) {\n        var attName, j, len;\n        // Also defined in DOM level 1\n        // removeAttribute(name) removes an attribute by name.\n        if (name == null) {\n          throw new Error(\"Missing attribute name. \" + this.debugInfo());\n        }\n        name = getValue(name);\n        if (Array.isArray(name)) { // expand if array\n          for (j = 0, len = name.length; j < len; j++) {\n            attName = name[j];\n            delete this.attribs[attName];\n          }\n        } else {\n          delete this.attribs[name];\n        }\n        return this;\n      }\n\n      // Converts the XML fragment to string\n\n      // `options.pretty` pretty prints the result\n      // `options.indent` indentation for pretty print\n      // `options.offset` how many indentations to add to every line for pretty print\n      // `options.newline` newline sequence for pretty print\n      // `options.allowEmpty` do not self close empty element tags\n      toString(options) {\n        return this.options.writer.element(this, this.options.writer.filterOptions(options));\n      }\n\n      // Aliases\n      att(name, value) {\n        return this.attribute(name, value);\n      }\n\n      a(name, value) {\n        return this.attribute(name, value);\n      }\n\n      // DOM Level 1\n      getAttribute(name) {\n        if (this.attribs.hasOwnProperty(name)) {\n          return this.attribs[name].value;\n        } else {\n          return null;\n        }\n      }\n\n      setAttribute(name, value) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getAttributeNode(name) {\n        if (this.attribs.hasOwnProperty(name)) {\n          return this.attribs[name];\n        } else {\n          return null;\n        }\n      }\n\n      setAttributeNode(newAttr) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      removeAttributeNode(oldAttr) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getElementsByTagName(name) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      // DOM Level 2\n      getAttributeNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      setAttributeNS(namespaceURI, qualifiedName, value) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      removeAttributeNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getAttributeNodeNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      setAttributeNodeNS(newAttr) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getElementsByTagNameNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      hasAttribute(name) {\n        return this.attribs.hasOwnProperty(name);\n      }\n\n      hasAttributeNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      // DOM Level 3\n      setIdAttribute(name, isId) {\n        if (this.attribs.hasOwnProperty(name)) {\n          return this.attribs[name].isId;\n        } else {\n          return isId;\n        }\n      }\n\n      setIdAttributeNS(namespaceURI, localName, isId) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      setIdAttributeNode(idAttr, isId) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      // DOM Level 4\n      getElementsByTagName(tagname) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getElementsByTagNameNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getElementsByClassName(classNames) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      isEqualNode(node) {\n        var i, j, ref;\n        if (!super.isEqualNode(node)) {\n          return false;\n        }\n        if (node.namespaceURI !== this.namespaceURI) {\n          return false;\n        }\n        if (node.prefix !== this.prefix) {\n          return false;\n        }\n        if (node.localName !== this.localName) {\n          return false;\n        }\n        if (node.attribs.length !== this.attribs.length) {\n          return false;\n        }\n        for (i = j = 0, ref = this.attribs.length - 1; (0 <= ref ? j <= ref : j >= ref); i = 0 <= ref ? ++j : --j) {\n          if (!this.attribs[i].isEqualNode(node.attribs[i])) {\n            return false;\n          }\n        }\n        return true;\n      }\n\n    };\n\n    // DOM level 1\n    Object.defineProperty(XMLElement.prototype, 'tagName', {\n      get: function() {\n        return this.name;\n      }\n    });\n\n    // DOM level 4\n    Object.defineProperty(XMLElement.prototype, 'namespaceURI', {\n      get: function() {\n        return '';\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'prefix', {\n      get: function() {\n        return '';\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'localName', {\n      get: function() {\n        return this.name;\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'id', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'className', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'classList', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'attributes', {\n      get: function() {\n        if (!this.attributeMap || !this.attributeMap.nodes) {\n          this.attributeMap = new XMLNamedNodeMap(this.attribs);\n        }\n        return this.attributeMap;\n      }\n    });\n\n    return XMLElement;\n\n  }).call(this);\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}