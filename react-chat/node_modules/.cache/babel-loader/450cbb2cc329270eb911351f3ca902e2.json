{"ast":null,"code":"\"use strict\";\n\nvar _assertThisInitialized = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _get = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _regeneratorRuntime = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SyncStreamImpl = exports.SyncStream = void 0;\n\nvar entity_1 = require(\"../entity\");\n\nvar sanitize_1 = require(\"../utils/sanitize\");\n\nvar closeable_1 = require(\"../closeable\");\n\nvar SyncStreamImpl = /*#__PURE__*/function (_entity_1$SyncEntity) {\n  _inherits(SyncStreamImpl, _entity_1$SyncEntity);\n\n  var _super = _createSuper(SyncStreamImpl);\n\n  /**\n   * @private\n   */\n  function SyncStreamImpl(services, descriptor, removalHandler) {\n    var _this;\n\n    _classCallCheck(this, SyncStreamImpl);\n\n    _this = _super.call(this, services, removalHandler);\n    _this.descriptor = descriptor;\n    return _this;\n  } // private props\n\n\n  _createClass(SyncStreamImpl, [{\n    key: \"uri\",\n    get: function get() {\n      return this.descriptor.url;\n    }\n  }, {\n    key: \"links\",\n    get: function get() {\n      return this.descriptor.links;\n    }\n  }, {\n    key: \"dateExpires\",\n    get: function get() {\n      return this.descriptor.date_expires;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return 'stream';\n    }\n  }, {\n    key: \"lastEventId\",\n    get: function get() {\n      return null;\n    } // below properties are specific to Insights only\n\n  }, {\n    key: \"indexName\",\n    get: function get() {\n      return undefined;\n    }\n  }, {\n    key: \"queryString\",\n    get: function get() {\n      return undefined;\n    } // public props, documented along with class description\n\n  }, {\n    key: \"sid\",\n    get: function get() {\n      return this.descriptor.sid;\n    }\n  }, {\n    key: \"uniqueName\",\n    get: function get() {\n      return this.descriptor.unique_name || null;\n    }\n  }, {\n    key: \"publishMessage\",\n    value: function () {\n      var _publishMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value) {\n        var requestBody, response, responseBody, event;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                requestBody = {\n                  data: value\n                };\n                _context.next = 3;\n                return this.services.network.post(this.links.messages, requestBody);\n\n              case 3:\n                response = _context.sent;\n                responseBody = response.body;\n                event = this._handleMessagePublished(responseBody.sid, value, false);\n                return _context.abrupt(\"return\", event);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function publishMessage(_x) {\n        return _publishMessage.apply(this, arguments);\n      }\n\n      return publishMessage;\n    }()\n  }, {\n    key: \"setTtl\",\n    value: function () {\n      var _setTtl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ttl) {\n        var requestBody, response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                sanitize_1.validateMandatoryTtl(ttl);\n                _context2.prev = 1;\n                requestBody = {\n                  ttl: ttl\n                };\n                _context2.next = 5;\n                return this.services.network.post(this.uri, requestBody);\n\n              case 5:\n                response = _context2.sent;\n                this.descriptor.date_expires = response.body.date_expires;\n                _context2.next = 13;\n                break;\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](1);\n\n                if (_context2.t0.status === 404) {\n                  this.onRemoved(false);\n                }\n\n                throw _context2.t0;\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 9]]);\n      }));\n\n      function setTtl(_x2) {\n        return _setTtl.apply(this, arguments);\n      }\n\n      return setTtl;\n    }()\n  }, {\n    key: \"removeStream\",\n    value: function () {\n      var _removeStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.services.network.delete(this.uri);\n\n              case 2:\n                this.onRemoved(true);\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function removeStream() {\n        return _removeStream.apply(this, arguments);\n      }\n\n      return removeStream;\n    }()\n    /**\n     * Handle event from the server\n     * @private\n     */\n\n  }, {\n    key: \"_update\",\n    value: function _update(update) {\n      switch (update.type) {\n        case 'stream_message_published':\n          {\n            this._handleMessagePublished(update.message_sid, update.message_data, true);\n\n            break;\n          }\n\n        case 'stream_removed':\n          {\n            this.onRemoved(false);\n            break;\n          }\n      }\n    }\n  }, {\n    key: \"_handleMessagePublished\",\n    value: function _handleMessagePublished(sid, data, remote) {\n      var event = {\n        sid: sid,\n        value: data\n      };\n      this.broadcastEventToListeners('messagePublished', {\n        message: event,\n        isLocal: !remote\n      });\n      return event;\n    }\n  }, {\n    key: \"onRemoved\",\n    value: function onRemoved(isLocal) {\n      this._unsubscribe();\n\n      this.removalHandler(this.type, this.sid, this.uniqueName);\n      this.broadcastEventToListeners('removed', {\n        isLocal: isLocal\n      });\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'stream';\n    }\n  }]);\n\n  return SyncStreamImpl;\n}(entity_1.SyncEntity);\n\nexports.SyncStreamImpl = SyncStreamImpl;\n/**\n * @class\n * @alias Stream\n * @classdesc A Sync primitive for pub-sub messaging. Stream Messages are not persisted, exist\n *     only in transit, and will be dropped if (due to congestion or network anomalies) they\n *     cannot be delivered promptly. Use the {@link Client#stream} method to obtain a reference to a Sync Message Stream.\n * @property {String} sid The immutable system-assigned identifier of this stream. Never null.\n * @property {String} [uniqueName=null] A unique identifier optionally assigned to the stream on creation.\n *\n * @fires Stream#messagePublished\n * @fires Stream#removed\n */\n\nvar SyncStream = /*#__PURE__*/function (_closeable_1$default) {\n  _inherits(SyncStream, _closeable_1$default);\n\n  var _super2 = _createSuper(SyncStream);\n\n  function SyncStream(syncStreamImpl) {\n    var _this2;\n\n    _classCallCheck(this, SyncStream);\n\n    _this2 = _super2.call(this);\n    _this2.syncStreamImpl = syncStreamImpl;\n\n    _this2.syncStreamImpl.attach(_assertThisInitialized(_this2));\n\n    return _this2;\n  } // private props\n\n\n  _createClass(SyncStream, [{\n    key: \"uri\",\n    get: function get() {\n      return this.syncStreamImpl.uri;\n    }\n  }, {\n    key: \"links\",\n    get: function get() {\n      return this.syncStreamImpl.links;\n    }\n  }, {\n    key: \"dateExpires\",\n    get: function get() {\n      return this.syncStreamImpl.dateExpires;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return SyncStreamImpl.type;\n    }\n  }, {\n    key: \"lastEventId\",\n    get: function get() {\n      return null;\n    } // public props, documented along with class description\n\n  }, {\n    key: \"sid\",\n    get: function get() {\n      return this.syncStreamImpl.sid;\n    }\n  }, {\n    key: \"uniqueName\",\n    get: function get() {\n      return this.syncStreamImpl.uniqueName;\n    }\n    /**\n     * Publish a Message to the Stream. The system will attempt delivery to all online subscribers.\n     * @param {Object} value The body of the dispatched message. Maximum size in serialized JSON: 4KB.\n     * A rate limit applies to this operation, refer to the [Sync API documentation]{@link https://www.twilio.com/docs/api/sync} for details.\n     * @return {Promise<StreamMessage>} A promise which resolves after the message is successfully published\n     *   to the Sync service. Resolves irrespective of ultimate delivery to any subscribers.\n     * @public\n     * @example\n     * stream.publishMessage({ x: 42, y: 123 })\n     *   .then(function(message) {\n     *     console.log('Stream publishMessage() successful, message SID:' + message.sid);\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Stream publishMessage() failed', error);\n     *   });\n     */\n\n  }, {\n    key: \"publishMessage\",\n    value: function () {\n      var _publishMessage2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(value) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.ensureNotClosed();\n                return _context4.abrupt(\"return\", this.syncStreamImpl.publishMessage(value));\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function publishMessage(_x3) {\n        return _publishMessage2.apply(this, arguments);\n      }\n\n      return publishMessage;\n    }()\n    /**\n     * Update the time-to-live of the stream.\n     * @param {Number} ttl Specifies the TTL in seconds after which the stream is subject to automatic deletion. The value 0 means infinity.\n     * @return {Promise<void>} A promise that resolves after the TTL update was successful.\n     * @public\n     * @example\n     * stream.setTtl(3600)\n     *   .then(function() {\n     *     console.log('Stream setTtl() successful');\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Stream setTtl() failed', error);\n     *   });\n     */\n\n  }, {\n    key: \"setTtl\",\n    value: function () {\n      var _setTtl2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(ttl) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                this.ensureNotClosed();\n                return _context5.abrupt(\"return\", this.syncStreamImpl.setTtl(ttl));\n\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function setTtl(_x4) {\n        return _setTtl2.apply(this, arguments);\n      }\n\n      return setTtl;\n    }()\n    /**\n     * Permanently delete this Stream.\n     * @return {Promise<void>} A promise which resolves after the Stream is successfully deleted.\n     * @public\n     * @example\n     * stream.removeStream()\n     *   .then(function() {\n     *     console.log('Stream removeStream() successful');\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Stream removeStream() failed', error);\n     *   });\n     */\n\n  }, {\n    key: \"removeStream\",\n    value: function () {\n      var _removeStream2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                this.ensureNotClosed();\n                return _context6.abrupt(\"return\", this.syncStreamImpl.removeStream());\n\n              case 2:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function removeStream() {\n        return _removeStream2.apply(this, arguments);\n      }\n\n      return removeStream;\n    }()\n    /**\n     * Conclude work with the stream instance and remove all event listeners attached to it.\n     * Any subsequent operation on this object will be rejected with error.\n     * Other local copies of this stream will continue operating and receiving events normally.\n     * @public\n     * @example\n     * stream.close();\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      _get(_getPrototypeOf(SyncStream.prototype), \"close\", this).call(this);\n\n      this.syncStreamImpl.detach(this.listenerUuid);\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return SyncStreamImpl.type;\n    }\n  }]);\n\n  return SyncStream;\n}(closeable_1.default);\n\nexports.SyncStream = SyncStream;\nexports.default = SyncStream;\n/**\n * @class StreamMessage\n * @classdesc Stream Message descriptor.\n * @property {String} sid Contains Stream Message SID.\n * @property {Object} value Contains Stream Message value.\n */\n\n/**\n * Fired when a Message is published to the Stream either locally or by a remote actor.\n * @event Stream#messagePublished\n * @param {Object} args Arguments provided with the event.\n * @param {StreamMessage} args.message Published message.\n * @param {Boolean} args.isLocal Equals 'true' if message was published by local code, 'false' otherwise.\n * @example\n * stream.on('messagePublished', function(args) {\n *   console.log('Stream message published');\n *   console.log('Message SID: ' + args.message.sid);\n *   console.log('Message value: ', args.message.value);\n *   console.log('args.isLocal:', args.isLocal);\n * });\n */\n\n/**\n * Fired when a stream is removed entirely, whether the remover was local or remote.\n * @event Stream#removed\n * @param {Object} args Arguments provided with the event.\n * @param {Boolean} args.isLocal Equals 'true' if stream was removed by local code, 'false' otherwise.\n * @example\n * stream.on('removed', function(args) {\n *   console.log('Stream ' + stream.sid + ' was removed');\n *   console.log('args.isLocal:', args.isLocal);\n * });\n */","map":{"version":3,"sources":["/Users/stefanpjanic/Desktop/mango_dev/node_modules/twilio-sync/lib/streams/syncstream.js"],"names":["Object","defineProperty","exports","value","SyncStreamImpl","SyncStream","entity_1","require","sanitize_1","closeable_1","services","descriptor","removalHandler","url","links","date_expires","undefined","sid","unique_name","requestBody","data","network","post","messages","response","responseBody","body","event","_handleMessagePublished","ttl","validateMandatoryTtl","uri","status","onRemoved","delete","update","type","message_sid","message_data","remote","broadcastEventToListeners","message","isLocal","_unsubscribe","uniqueName","SyncEntity","syncStreamImpl","attach","dateExpires","ensureNotClosed","publishMessage","setTtl","removeStream","detach","listenerUuid","default"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,cAAR,GAAyBF,OAAO,CAACG,UAAR,GAAqB,KAAK,CAAnD;;AACA,IAAMC,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAxB;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAAC,mBAAD,CAA1B;;AACA,IAAME,WAAW,GAAGF,OAAO,CAAC,cAAD,CAA3B;;IACMH,c;;;;;AACF;AACJ;AACA;AACI,0BAAYM,QAAZ,EAAsBC,UAAtB,EAAkCC,cAAlC,EAAkD;AAAA;;AAAA;;AAC9C,8BAAMF,QAAN,EAAgBE,cAAhB;AACA,UAAKD,UAAL,GAAkBA,UAAlB;AAF8C;AAGjD,G,CACD;;;;;SACA,eAAU;AACN,aAAO,KAAKA,UAAL,CAAgBE,GAAvB;AACH;;;SACD,eAAY;AACR,aAAO,KAAKF,UAAL,CAAgBG,KAAvB;AACH;;;SAID,eAAkB;AACd,aAAO,KAAKH,UAAL,CAAgBI,YAAvB;AACH;;;SACD,eAAW;AACP,aAAO,QAAP;AACH;;;SACD,eAAkB;AACd,aAAO,IAAP;AACH,K,CACD;;;;SACA,eAAgB;AACZ,aAAOC,SAAP;AACH;;;SACD,eAAkB;AACd,aAAOA,SAAP;AACH,K,CACD;;;;SACA,eAAU;AACN,aAAO,KAAKL,UAAL,CAAgBM,GAAvB;AACH;;;SACD,eAAiB;AACb,aAAO,KAAKN,UAAL,CAAgBO,WAAhB,IAA+B,IAAtC;AACH;;;;qFACD,iBAAqBf,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AACUgB,gBAAAA,WADV,GACwB;AAAEC,kBAAAA,IAAI,EAAEjB;AAAR,iBADxB;AAAA;AAAA,uBAE2B,KAAKO,QAAL,CAAcW,OAAd,CAAsBC,IAAtB,CAA2B,KAAKR,KAAL,CAAWS,QAAtC,EAAgDJ,WAAhD,CAF3B;;AAAA;AAEUK,gBAAAA,QAFV;AAGUC,gBAAAA,YAHV,GAGyBD,QAAQ,CAACE,IAHlC;AAIUC,gBAAAA,KAJV,GAIkB,KAAKC,uBAAL,CAA6BH,YAAY,CAACR,GAA1C,EAA+Cd,KAA/C,EAAsD,KAAtD,CAJlB;AAAA,iDAKWwB,KALX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;6EAOA,kBAAaE,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AACIrB,gBAAAA,UAAU,CAACsB,oBAAX,CAAgCD,GAAhC;AADJ;AAGcV,gBAAAA,WAHd,GAG4B;AAAEU,kBAAAA,GAAG,EAAEA;AAAP,iBAH5B;AAAA;AAAA,uBAI+B,KAAKnB,QAAL,CAAcW,OAAd,CAAsBC,IAAtB,CAA2B,KAAKS,GAAhC,EAAqCZ,WAArC,CAJ/B;;AAAA;AAIcK,gBAAAA,QAJd;AAKQ,qBAAKb,UAAL,CAAgBI,YAAhB,GAA+BS,QAAQ,CAACE,IAAT,CAAcX,YAA7C;AALR;AAAA;;AAAA;AAAA;AAAA;;AAQQ,oBAAI,aAAMiB,MAAN,KAAiB,GAArB,EAA0B;AACtB,uBAAKC,SAAL,CAAe,KAAf;AACH;;AAVT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;mFAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACU,KAAKvB,QAAL,CAAcW,OAAd,CAAsBa,MAAtB,CAA6B,KAAKH,GAAlC,CADV;;AAAA;AAEI,qBAAKE,SAAL,CAAe,IAAf;;AAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;AAIA;AACJ;AACA;AACA;;;;WACI,iBAAQE,MAAR,EAAgB;AACZ,cAAQA,MAAM,CAACC,IAAf;AACI,aAAK,0BAAL;AAAiC;AAC7B,iBAAKR,uBAAL,CAA6BO,MAAM,CAACE,WAApC,EAAiDF,MAAM,CAACG,YAAxD,EAAsE,IAAtE;;AACA;AACH;;AACD,aAAK,gBAAL;AAAuB;AACnB,iBAAKL,SAAL,CAAe,KAAf;AACA;AACH;AARL;AAUH;;;WACD,iCAAwBhB,GAAxB,EAA6BG,IAA7B,EAAmCmB,MAAnC,EAA2C;AACvC,UAAMZ,KAAK,GAAG;AACVV,QAAAA,GAAG,EAAEA,GADK;AAEVd,QAAAA,KAAK,EAAEiB;AAFG,OAAd;AAIA,WAAKoB,yBAAL,CAA+B,kBAA/B,EAAmD;AAAEC,QAAAA,OAAO,EAAEd,KAAX;AAAkBe,QAAAA,OAAO,EAAE,CAACH;AAA5B,OAAnD;AACA,aAAOZ,KAAP;AACH;;;WACD,mBAAUe,OAAV,EAAmB;AACf,WAAKC,YAAL;;AACA,WAAK/B,cAAL,CAAoB,KAAKwB,IAAzB,EAA+B,KAAKnB,GAApC,EAAyC,KAAK2B,UAA9C;AACA,WAAKJ,yBAAL,CAA+B,SAA/B,EAA0C;AAAEE,QAAAA,OAAO,EAAEA;AAAX,OAA1C;AACH;;;SA/ED,eAAkB;AACd,aAAO,QAAP;AACH;;;;EAjBwBpC,QAAQ,CAACuC,U;;AAgGtC3C,OAAO,CAACE,cAAR,GAAyBA,cAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,U;;;;;AACF,sBAAYyC,cAAZ,EAA4B;AAAA;;AAAA;;AACxB;AACA,WAAKA,cAAL,GAAsBA,cAAtB;;AACA,WAAKA,cAAL,CAAoBC,MAApB;;AAHwB;AAI3B,G,CACD;;;;;SACA,eAAU;AACN,aAAO,KAAKD,cAAL,CAAoBf,GAA3B;AACH;;;SACD,eAAY;AACR,aAAO,KAAKe,cAAL,CAAoBhC,KAA3B;AACH;;;SAID,eAAkB;AACd,aAAO,KAAKgC,cAAL,CAAoBE,WAA3B;AACH;;;SACD,eAAW;AACP,aAAO5C,cAAc,CAACgC,IAAtB;AACH;;;SACD,eAAkB;AACd,aAAO,IAAP;AACH,K,CACD;;;;SACA,eAAU;AACN,aAAO,KAAKU,cAAL,CAAoB7B,GAA3B;AACH;;;SACD,eAAiB;AACb,aAAO,KAAK6B,cAAL,CAAoBF,UAA3B;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;sFACI,kBAAqBzC,KAArB;AAAA;AAAA;AAAA;AAAA;AACI,qBAAK8C,eAAL;AADJ,kDAEW,KAAKH,cAAL,CAAoBI,cAApB,CAAmC/C,KAAnC,CAFX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;8EACI,kBAAa0B,GAAb;AAAA;AAAA;AAAA;AAAA;AACI,qBAAKoB,eAAL;AADJ,kDAEW,KAAKH,cAAL,CAAoBK,MAApB,CAA2BtB,GAA3B,CAFX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;oFACI;AAAA;AAAA;AAAA;AAAA;AACI,qBAAKoB,eAAL;AADJ,kDAEW,KAAKH,cAAL,CAAoBM,YAApB,EAFX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,iBAAQ;AACJ;;AACA,WAAKN,cAAL,CAAoBO,MAApB,CAA2B,KAAKC,YAAhC;AACH;;;SArFD,eAAkB;AACd,aAAOlD,cAAc,CAACgC,IAAtB;AACH;;;;EAfoB3B,WAAW,CAAC8C,O;;AAoGrCrD,OAAO,CAACG,UAAR,GAAqBA,UAArB;AACAH,OAAO,CAACqD,OAAR,GAAkBlD,UAAlB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SyncStreamImpl = exports.SyncStream = void 0;\nconst entity_1 = require(\"../entity\");\nconst sanitize_1 = require(\"../utils/sanitize\");\nconst closeable_1 = require(\"../closeable\");\nclass SyncStreamImpl extends entity_1.SyncEntity {\n    /**\n     * @private\n     */\n    constructor(services, descriptor, removalHandler) {\n        super(services, removalHandler);\n        this.descriptor = descriptor;\n    }\n    // private props\n    get uri() {\n        return this.descriptor.url;\n    }\n    get links() {\n        return this.descriptor.links;\n    }\n    static get type() {\n        return 'stream';\n    }\n    get dateExpires() {\n        return this.descriptor.date_expires;\n    }\n    get type() {\n        return 'stream';\n    }\n    get lastEventId() {\n        return null;\n    }\n    // below properties are specific to Insights only\n    get indexName() {\n        return undefined;\n    }\n    get queryString() {\n        return undefined;\n    }\n    // public props, documented along with class description\n    get sid() {\n        return this.descriptor.sid;\n    }\n    get uniqueName() {\n        return this.descriptor.unique_name || null;\n    }\n    async publishMessage(value) {\n        const requestBody = { data: value };\n        const response = await this.services.network.post(this.links.messages, requestBody);\n        const responseBody = response.body;\n        const event = this._handleMessagePublished(responseBody.sid, value, false);\n        return event;\n    }\n    async setTtl(ttl) {\n        sanitize_1.validateMandatoryTtl(ttl);\n        try {\n            const requestBody = { ttl: ttl };\n            const response = await this.services.network.post(this.uri, requestBody);\n            this.descriptor.date_expires = response.body.date_expires;\n        }\n        catch (error) {\n            if (error.status === 404) {\n                this.onRemoved(false);\n            }\n            throw error;\n        }\n    }\n    async removeStream() {\n        await this.services.network.delete(this.uri);\n        this.onRemoved(true);\n    }\n    /**\n     * Handle event from the server\n     * @private\n     */\n    _update(update) {\n        switch (update.type) {\n            case 'stream_message_published': {\n                this._handleMessagePublished(update.message_sid, update.message_data, true);\n                break;\n            }\n            case 'stream_removed': {\n                this.onRemoved(false);\n                break;\n            }\n        }\n    }\n    _handleMessagePublished(sid, data, remote) {\n        const event = {\n            sid: sid,\n            value: data\n        };\n        this.broadcastEventToListeners('messagePublished', { message: event, isLocal: !remote });\n        return event;\n    }\n    onRemoved(isLocal) {\n        this._unsubscribe();\n        this.removalHandler(this.type, this.sid, this.uniqueName);\n        this.broadcastEventToListeners('removed', { isLocal: isLocal });\n    }\n}\nexports.SyncStreamImpl = SyncStreamImpl;\n/**\n * @class\n * @alias Stream\n * @classdesc A Sync primitive for pub-sub messaging. Stream Messages are not persisted, exist\n *     only in transit, and will be dropped if (due to congestion or network anomalies) they\n *     cannot be delivered promptly. Use the {@link Client#stream} method to obtain a reference to a Sync Message Stream.\n * @property {String} sid The immutable system-assigned identifier of this stream. Never null.\n * @property {String} [uniqueName=null] A unique identifier optionally assigned to the stream on creation.\n *\n * @fires Stream#messagePublished\n * @fires Stream#removed\n */\nclass SyncStream extends closeable_1.default {\n    constructor(syncStreamImpl) {\n        super();\n        this.syncStreamImpl = syncStreamImpl;\n        this.syncStreamImpl.attach(this);\n    }\n    // private props\n    get uri() {\n        return this.syncStreamImpl.uri;\n    }\n    get links() {\n        return this.syncStreamImpl.links;\n    }\n    static get type() {\n        return SyncStreamImpl.type;\n    }\n    get dateExpires() {\n        return this.syncStreamImpl.dateExpires;\n    }\n    get type() {\n        return SyncStreamImpl.type;\n    }\n    get lastEventId() {\n        return null;\n    }\n    // public props, documented along with class description\n    get sid() {\n        return this.syncStreamImpl.sid;\n    }\n    get uniqueName() {\n        return this.syncStreamImpl.uniqueName;\n    }\n    /**\n     * Publish a Message to the Stream. The system will attempt delivery to all online subscribers.\n     * @param {Object} value The body of the dispatched message. Maximum size in serialized JSON: 4KB.\n     * A rate limit applies to this operation, refer to the [Sync API documentation]{@link https://www.twilio.com/docs/api/sync} for details.\n     * @return {Promise<StreamMessage>} A promise which resolves after the message is successfully published\n     *   to the Sync service. Resolves irrespective of ultimate delivery to any subscribers.\n     * @public\n     * @example\n     * stream.publishMessage({ x: 42, y: 123 })\n     *   .then(function(message) {\n     *     console.log('Stream publishMessage() successful, message SID:' + message.sid);\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Stream publishMessage() failed', error);\n     *   });\n     */\n    async publishMessage(value) {\n        this.ensureNotClosed();\n        return this.syncStreamImpl.publishMessage(value);\n    }\n    /**\n     * Update the time-to-live of the stream.\n     * @param {Number} ttl Specifies the TTL in seconds after which the stream is subject to automatic deletion. The value 0 means infinity.\n     * @return {Promise<void>} A promise that resolves after the TTL update was successful.\n     * @public\n     * @example\n     * stream.setTtl(3600)\n     *   .then(function() {\n     *     console.log('Stream setTtl() successful');\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Stream setTtl() failed', error);\n     *   });\n     */\n    async setTtl(ttl) {\n        this.ensureNotClosed();\n        return this.syncStreamImpl.setTtl(ttl);\n    }\n    /**\n     * Permanently delete this Stream.\n     * @return {Promise<void>} A promise which resolves after the Stream is successfully deleted.\n     * @public\n     * @example\n     * stream.removeStream()\n     *   .then(function() {\n     *     console.log('Stream removeStream() successful');\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Stream removeStream() failed', error);\n     *   });\n     */\n    async removeStream() {\n        this.ensureNotClosed();\n        return this.syncStreamImpl.removeStream();\n    }\n    /**\n     * Conclude work with the stream instance and remove all event listeners attached to it.\n     * Any subsequent operation on this object will be rejected with error.\n     * Other local copies of this stream will continue operating and receiving events normally.\n     * @public\n     * @example\n     * stream.close();\n     */\n    close() {\n        super.close();\n        this.syncStreamImpl.detach(this.listenerUuid);\n    }\n}\nexports.SyncStream = SyncStream;\nexports.default = SyncStream;\n/**\n * @class StreamMessage\n * @classdesc Stream Message descriptor.\n * @property {String} sid Contains Stream Message SID.\n * @property {Object} value Contains Stream Message value.\n */\n/**\n * Fired when a Message is published to the Stream either locally or by a remote actor.\n * @event Stream#messagePublished\n * @param {Object} args Arguments provided with the event.\n * @param {StreamMessage} args.message Published message.\n * @param {Boolean} args.isLocal Equals 'true' if message was published by local code, 'false' otherwise.\n * @example\n * stream.on('messagePublished', function(args) {\n *   console.log('Stream message published');\n *   console.log('Message SID: ' + args.message.sid);\n *   console.log('Message value: ', args.message.value);\n *   console.log('args.isLocal:', args.isLocal);\n * });\n */\n/**\n * Fired when a stream is removed entirely, whether the remover was local or remote.\n * @event Stream#removed\n * @param {Object} args Arguments provided with the event.\n * @param {Boolean} args.isLocal Equals 'true' if stream was removed by local code, 'false' otherwise.\n * @example\n * stream.on('removed', function(args) {\n *   console.log('Stream ' + stream.sid + ' was removed');\n *   console.log('args.isLocal:', args.isLocal);\n * });\n */\n"]},"metadata":{},"sourceType":"script"}