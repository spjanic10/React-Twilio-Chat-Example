{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NamespacedMergingQueue = exports.MergingQueue = void 0;\n\nvar MergingQueue = /*#__PURE__*/function () {\n  function MergingQueue(inputMergingFunction) {\n    _classCallCheck(this, MergingQueue);\n\n    this.queuedRequests = [];\n    this.isRequestInFlight = false;\n    this.inputMergingFunction = inputMergingFunction;\n  }\n\n  _createClass(MergingQueue, [{\n    key: \"add\",\n    value: function add(input, requestFunction) {\n      var _this = this;\n\n      var promise = new Promise(function (resolve, reject) {\n        return _this.queuedRequests.push({\n          input: input,\n          requestFunction: requestFunction,\n          resolve: resolve,\n          reject: reject\n        });\n      });\n      this.wakeupQueue();\n      return promise;\n    }\n  }, {\n    key: \"squashAndAdd\",\n    value: function squashAndAdd(input, requestFunction) {\n      var queueToSquash = this.queuedRequests;\n      this.queuedRequests = [];\n      var reducedInput;\n\n      if (queueToSquash.length > 0) {\n        reducedInput = queueToSquash.map(function (r) {\n          return r.input;\n        }).reduce(this.inputMergingFunction);\n        reducedInput = this.inputMergingFunction(reducedInput, input);\n      } else {\n        reducedInput = input;\n      }\n\n      var promise = this.add(reducedInput, requestFunction);\n      queueToSquash.forEach(function (request) {\n        return promise.then(request.resolve, request.reject);\n      });\n      return promise;\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.queuedRequests.length === 0 && !this.isRequestInFlight;\n    }\n  }, {\n    key: \"wakeupQueue\",\n    value: function wakeupQueue() {\n      var _this2 = this;\n\n      if (this.queuedRequests.length === 0 || this.isRequestInFlight) {\n        return;\n      } else {\n        var requestToExecute = this.queuedRequests.shift();\n        this.isRequestInFlight = true;\n        requestToExecute.requestFunction(requestToExecute.input).then(requestToExecute.resolve, requestToExecute.reject).then(function (__) {\n          _this2.isRequestInFlight = false;\n\n          _this2.wakeupQueue();\n        });\n      }\n    }\n  }]);\n\n  return MergingQueue;\n}();\n\nexports.MergingQueue = MergingQueue;\n\nvar NamespacedMergingQueue = /*#__PURE__*/function () {\n  function NamespacedMergingQueue(inputReducer) {\n    _classCallCheck(this, NamespacedMergingQueue);\n\n    this.queueByNamespaceKey = new Map();\n    this.inputReducer = inputReducer;\n  }\n\n  _createClass(NamespacedMergingQueue, [{\n    key: \"add\",\n    value: function () {\n      var _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(namespaceKey, input, requestFunction) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this.invokeQueueMethod(namespaceKey, function (queue) {\n                  return queue.add(input, requestFunction);\n                }));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function add(_x, _x2, _x3) {\n        return _add.apply(this, arguments);\n      }\n\n      return add;\n    }()\n  }, {\n    key: \"squashAndAdd\",\n    value: function () {\n      var _squashAndAdd = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(namespaceKey, input, requestFunction) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.invokeQueueMethod(namespaceKey, function (queue) {\n                  return queue.squashAndAdd(input, requestFunction);\n                }));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function squashAndAdd(_x4, _x5, _x6) {\n        return _squashAndAdd.apply(this, arguments);\n      }\n\n      return squashAndAdd;\n    }()\n  }, {\n    key: \"invokeQueueMethod\",\n    value: function () {\n      var _invokeQueueMethod = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(namespaceKey, queueMethodInvoker) {\n        var queue, result;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!this.queueByNamespaceKey.has(namespaceKey)) {\n                  this.queueByNamespaceKey.set(namespaceKey, new MergingQueue(this.inputReducer));\n                }\n\n                queue = this.queueByNamespaceKey.get(namespaceKey);\n                result = queueMethodInvoker(queue);\n\n                if (this.queueByNamespaceKey.get(namespaceKey).isEmpty()) {\n                  this.queueByNamespaceKey.delete(namespaceKey);\n                }\n\n                return _context3.abrupt(\"return\", result);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function invokeQueueMethod(_x7, _x8) {\n        return _invokeQueueMethod.apply(this, arguments);\n      }\n\n      return invokeQueueMethod;\n    }()\n  }]);\n\n  return NamespacedMergingQueue;\n}();\n\nexports.NamespacedMergingQueue = NamespacedMergingQueue;","map":{"version":3,"sources":["/Users/stefanpjanic/Desktop/mango_dev/node_modules/twilio-sync/lib/mergingqueue.js"],"names":["Object","defineProperty","exports","value","NamespacedMergingQueue","MergingQueue","inputMergingFunction","queuedRequests","isRequestInFlight","input","requestFunction","promise","Promise","resolve","reject","push","wakeupQueue","queueToSquash","reducedInput","length","map","r","reduce","add","forEach","request","then","requestToExecute","shift","__","inputReducer","queueByNamespaceKey","Map","namespaceKey","invokeQueueMethod","queue","squashAndAdd","queueMethodInvoker","has","set","get","result","isEmpty","delete"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NamespacedMergingQueue = exports.MergingQueue = void 0;\nclass MergingQueue {\n    constructor(inputMergingFunction) {\n        this.queuedRequests = [];\n        this.isRequestInFlight = false;\n        this.inputMergingFunction = inputMergingFunction;\n    }\n    add(input, requestFunction) {\n        let promise = new Promise((resolve, reject) => this.queuedRequests.push({ input, requestFunction, resolve, reject }));\n        this.wakeupQueue();\n        return promise;\n    }\n    squashAndAdd(input, requestFunction) {\n        let queueToSquash = this.queuedRequests;\n        this.queuedRequests = [];\n        let reducedInput;\n        if (queueToSquash.length > 0) {\n            reducedInput = queueToSquash.map(r => r.input).reduce(this.inputMergingFunction);\n            reducedInput = this.inputMergingFunction(reducedInput, input);\n        }\n        else {\n            reducedInput = input;\n        }\n        let promise = this.add(reducedInput, requestFunction);\n        queueToSquash.forEach(request => promise.then(request.resolve, request.reject));\n        return promise;\n    }\n    isEmpty() {\n        return this.queuedRequests.length === 0 && !this.isRequestInFlight;\n    }\n    wakeupQueue() {\n        if (this.queuedRequests.length === 0 || this.isRequestInFlight) {\n            return;\n        }\n        else {\n            let requestToExecute = this.queuedRequests.shift();\n            this.isRequestInFlight = true;\n            requestToExecute.requestFunction(requestToExecute.input)\n                .then(requestToExecute.resolve, requestToExecute.reject)\n                .then(__ => {\n                this.isRequestInFlight = false;\n                this.wakeupQueue();\n            });\n        }\n    }\n}\nexports.MergingQueue = MergingQueue;\nclass NamespacedMergingQueue {\n    constructor(inputReducer) {\n        this.queueByNamespaceKey = new Map();\n        this.inputReducer = inputReducer;\n    }\n    async add(namespaceKey, input, requestFunction) {\n        return this.invokeQueueMethod(namespaceKey, queue => queue.add(input, requestFunction));\n    }\n    async squashAndAdd(namespaceKey, input, requestFunction) {\n        return this.invokeQueueMethod(namespaceKey, queue => queue.squashAndAdd(input, requestFunction));\n    }\n    async invokeQueueMethod(namespaceKey, queueMethodInvoker) {\n        if (!this.queueByNamespaceKey.has(namespaceKey)) {\n            this.queueByNamespaceKey.set(namespaceKey, new MergingQueue(this.inputReducer));\n        }\n        const queue = this.queueByNamespaceKey.get(namespaceKey);\n        const result = queueMethodInvoker(queue);\n        if (this.queueByNamespaceKey.get(namespaceKey).isEmpty()) {\n            this.queueByNamespaceKey.delete(namespaceKey);\n        }\n        return result;\n    }\n}\nexports.NamespacedMergingQueue = NamespacedMergingQueue;\n"]},"metadata":{},"sourceType":"script"}