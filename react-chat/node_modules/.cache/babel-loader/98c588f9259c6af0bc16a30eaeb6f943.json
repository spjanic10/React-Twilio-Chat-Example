{"ast":null,"code":"var _classCallCheck = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\n// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType, XMLCData, XMLCharacterData;\n  NodeType = require('./NodeType');\n  XMLCharacterData = require('./XMLCharacterData'); // Represents a  CDATA node\n\n  module.exports = XMLCData = /*#__PURE__*/function (_XMLCharacterData) {\n    \"use strict\";\n\n    _inherits(XMLCData, _XMLCharacterData);\n\n    var _super = _createSuper(XMLCData);\n\n    // Initializes a new instance of `XMLCData`\n    // `text` CDATA text\n    function XMLCData(parent, text) {\n      var _this;\n\n      _classCallCheck(this, XMLCData);\n\n      _this = _super.call(this, parent);\n\n      if (text == null) {\n        throw new Error(\"Missing CDATA text. \" + _this.debugInfo());\n      }\n\n      _this.name = \"#cdata-section\";\n      _this.type = NodeType.CData;\n      _this.value = _this.stringify.cdata(text);\n      return _this;\n    } // Creates and returns a deep clone of `this`\n\n\n    _createClass(XMLCData, [{\n      key: \"clone\",\n      value: function clone() {\n        return Object.create(this);\n      } // Converts the XML fragment to string\n      // `options.pretty` pretty prints the result\n      // `options.indent` indentation for pretty print\n      // `options.offset` how many indentations to add to every line for pretty print\n      // `options.newline` newline sequence for pretty print\n\n    }, {\n      key: \"toString\",\n      value: function toString(options) {\n        return this.options.writer.cdata(this, this.options.writer.filterOptions(options));\n      }\n    }]);\n\n    return XMLCData;\n  }(XMLCharacterData);\n}).call(this);","map":{"version":3,"sources":["/Users/stefanpjanic/Desktop/mango_dev/node_modules/xmlbuilder/lib/XMLCData.js"],"names":["NodeType","XMLCData","XMLCharacterData","require","module","exports","parent","text","Error","debugInfo","name","type","CData","value","stringify","cdata","Object","create","options","writer","filterOptions","call"],"mappings":";;;;;;;;AAAA;AACA,CAAC,YAAW;AACV,MAAIA,QAAJ,EAAcC,QAAd,EAAwBC,gBAAxB;AAEAF,EAAAA,QAAQ,GAAGG,OAAO,CAAC,YAAD,CAAlB;AAEAD,EAAAA,gBAAgB,GAAGC,OAAO,CAAC,oBAAD,CAA1B,CALU,CAOV;;AACAC,EAAAA,MAAM,CAACC,OAAP,GAAiBJ,QAAQ;AAAA;;AAAA;;AAAA;;AACvB;AAEA;AACA,sBAAYK,MAAZ,EAAoBC,IAApB,EAA0B;AAAA;;AAAA;;AACxB,gCAAMD,MAAN;;AACA,UAAIC,IAAI,IAAI,IAAZ,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,yBAAyB,MAAKC,SAAL,EAAnC,CAAN;AACD;;AACD,YAAKC,IAAL,GAAY,gBAAZ;AACA,YAAKC,IAAL,GAAYX,QAAQ,CAACY,KAArB;AACA,YAAKC,KAAL,GAAa,MAAKC,SAAL,CAAeC,KAAf,CAAqBR,IAArB,CAAb;AAPwB;AAQzB,KAZsB,CAcvB;;;AAduB;AAAA;AAAA,aAevB,iBAAQ;AACN,eAAOS,MAAM,CAACC,MAAP,CAAc,IAAd,CAAP;AACD,OAjBsB,CAmBvB;AAEA;AACA;AACA;AACA;;AAxBuB;AAAA;AAAA,aAyBvB,kBAASC,OAAT,EAAkB;AAChB,eAAO,KAAKA,OAAL,CAAaC,MAAb,CAAoBJ,KAApB,CAA0B,IAA1B,EAAgC,KAAKG,OAAL,CAAaC,MAAb,CAAoBC,aAApB,CAAkCF,OAAlC,CAAhC,CAAP;AACD;AA3BsB;;AAAA;AAAA,IAA0BhB,gBAA1B,CAAzB;AA+BD,CAvCD,EAuCGmB,IAvCH,CAuCQ,IAvCR","sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLCData, XMLCharacterData;\n\n  NodeType = require('./NodeType');\n\n  XMLCharacterData = require('./XMLCharacterData');\n\n  // Represents a  CDATA node\n  module.exports = XMLCData = class XMLCData extends XMLCharacterData {\n    // Initializes a new instance of `XMLCData`\n\n    // `text` CDATA text\n    constructor(parent, text) {\n      super(parent);\n      if (text == null) {\n        throw new Error(\"Missing CDATA text. \" + this.debugInfo());\n      }\n      this.name = \"#cdata-section\";\n      this.type = NodeType.CData;\n      this.value = this.stringify.cdata(text);\n    }\n\n    // Creates and returns a deep clone of `this`\n    clone() {\n      return Object.create(this);\n    }\n\n    // Converts the XML fragment to string\n\n    // `options.pretty` pretty prints the result\n    // `options.indent` indentation for pretty print\n    // `options.offset` how many indentations to add to every line for pretty print\n    // `options.newline` newline sequence for pretty print\n    toString(options) {\n      return this.options.writer.cdata(this, this.options.writer.filterOptions(options));\n    }\n\n  };\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}