{"ast":null,"code":"var _classCallCheck = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n// Generated by CoffeeScript 2.4.1\n(function () {\n  // Implements the DOMImplementation interface\n  var XMLDOMImplementation;\n\n  module.exports = XMLDOMImplementation = /*#__PURE__*/function () {\n    \"use strict\";\n\n    function XMLDOMImplementation() {\n      _classCallCheck(this, XMLDOMImplementation);\n    }\n\n    _createClass(XMLDOMImplementation, [{\n      key: \"hasFeature\",\n      value: // Tests if the DOM implementation implements a specific feature.\n      // `feature` package name of the feature to test. In Level 1, the\n      //           legal values are \"HTML\" and \"XML\" (case-insensitive).\n      // `version` version number of the package name to test. \n      //           In Level 1, this is the string \"1.0\". If the version is \n      //           not specified, supporting any version of the feature will \n      //           cause the method to return true.\n      function hasFeature(feature, version) {\n        return true;\n      } // Creates a new document type declaration.\n      // `qualifiedName` qualified name of the document type to be created\n      // `publicId` public identifier of the external subset\n      // `systemId` system identifier of the external subset\n\n    }, {\n      key: \"createDocumentType\",\n      value: function createDocumentType(qualifiedName, publicId, systemId) {\n        throw new Error(\"This DOM method is not implemented.\");\n      } // Creates a new document.\n      // `namespaceURI` namespace URI of the document element to create\n      // `qualifiedName` the qualified name of the document to be created\n      // `doctype` the type of document to be created or null\n\n    }, {\n      key: \"createDocument\",\n      value: function createDocument(namespaceURI, qualifiedName, doctype) {\n        throw new Error(\"This DOM method is not implemented.\");\n      } // Creates a new HTML document.\n      // `title` document title\n\n    }, {\n      key: \"createHTMLDocument\",\n      value: function createHTMLDocument(title) {\n        throw new Error(\"This DOM method is not implemented.\");\n      } // Returns a specialized object which implements the specialized APIs \n      // of the specified feature and version.\n      // `feature` name of the feature requested.\n      // `version` version number of the feature to test\n\n    }, {\n      key: \"getFeature\",\n      value: function getFeature(feature, version) {\n        throw new Error(\"This DOM method is not implemented.\");\n      }\n    }]);\n\n    return XMLDOMImplementation;\n  }();\n}).call(this);","map":{"version":3,"sources":["/Users/stefanpjanic/Desktop/mango_dev/node_modules/xmlbuilder/lib/XMLDOMImplementation.js"],"names":["XMLDOMImplementation","module","exports","feature","version","qualifiedName","publicId","systemId","Error","namespaceURI","doctype","title","call"],"mappings":";;;;AAAA;AACA,CAAC,YAAW;AACV;AACA,MAAIA,oBAAJ;;AAEAC,EAAAA,MAAM,CAACC,OAAP,GAAiBF,oBAAoB;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,aACnC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAWG,OAAX,EAAoBC,OAApB,EAA6B;AAC3B,eAAO,IAAP;AACD,OAXkC,CAanC;AAEA;AACA;AACA;;AAjBmC;AAAA;AAAA,aAkBnC,4BAAmBC,aAAnB,EAAkCC,QAAlC,EAA4CC,QAA5C,EAAsD;AACpD,cAAM,IAAIC,KAAJ,CAAU,qCAAV,CAAN;AACD,OApBkC,CAsBnC;AAEA;AACA;AACA;;AA1BmC;AAAA;AAAA,aA2BnC,wBAAeC,YAAf,EAA6BJ,aAA7B,EAA4CK,OAA5C,EAAqD;AACnD,cAAM,IAAIF,KAAJ,CAAU,qCAAV,CAAN;AACD,OA7BkC,CA+BnC;AAEA;;AAjCmC;AAAA;AAAA,aAkCnC,4BAAmBG,KAAnB,EAA0B;AACxB,cAAM,IAAIH,KAAJ,CAAU,qCAAV,CAAN;AACD,OApCkC,CAsCnC;AACA;AAEA;AACA;;AA1CmC;AAAA;AAAA,aA2CnC,oBAAWL,OAAX,EAAoBC,OAApB,EAA6B;AAC3B,cAAM,IAAII,KAAJ,CAAU,qCAAV,CAAN;AACD;AA7CkC;;AAAA;AAAA,KAArC;AAiDD,CArDD,EAqDGI,IArDH,CAqDQ,IArDR","sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  // Implements the DOMImplementation interface\n  var XMLDOMImplementation;\n\n  module.exports = XMLDOMImplementation = class XMLDOMImplementation {\n    // Tests if the DOM implementation implements a specific feature.\n\n    // `feature` package name of the feature to test. In Level 1, the\n    //           legal values are \"HTML\" and \"XML\" (case-insensitive).\n    // `version` version number of the package name to test. \n    //           In Level 1, this is the string \"1.0\". If the version is \n    //           not specified, supporting any version of the feature will \n    //           cause the method to return true.\n    hasFeature(feature, version) {\n      return true;\n    }\n\n    // Creates a new document type declaration.\n\n    // `qualifiedName` qualified name of the document type to be created\n    // `publicId` public identifier of the external subset\n    // `systemId` system identifier of the external subset\n    createDocumentType(qualifiedName, publicId, systemId) {\n      throw new Error(\"This DOM method is not implemented.\");\n    }\n\n    // Creates a new document.\n\n    // `namespaceURI` namespace URI of the document element to create\n    // `qualifiedName` the qualified name of the document to be created\n    // `doctype` the type of document to be created or null\n    createDocument(namespaceURI, qualifiedName, doctype) {\n      throw new Error(\"This DOM method is not implemented.\");\n    }\n\n    // Creates a new HTML document.\n\n    // `title` document title\n    createHTMLDocument(title) {\n      throw new Error(\"This DOM method is not implemented.\");\n    }\n\n    // Returns a specialized object which implements the specialized APIs \n    // of the specified feature and version.\n\n    // `feature` name of the feature requested.\n    // `version` version number of the feature to test\n    getFeature(feature, version) {\n      throw new Error(\"This DOM method is not implemented.\");\n    }\n\n  };\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}