{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TwilsockConnector = void 0;\n\nvar uuid = require(\"uuid\");\n\nvar connector_1 = require(\"./connector\");\n\nvar DEFAULT_TTL = 60 * 60 * 48;\n/**\n * Registrar connector implementation for twilsock\n */\n\nvar TwilsockConnector = /*#__PURE__*/function (_connector_1$Connecto) {\n  _inherits(TwilsockConnector, _connector_1$Connecto);\n\n  var _super = _createSuper(TwilsockConnector);\n\n  function TwilsockConnector(context, twilsock, config) {\n    var _this;\n\n    _classCallCheck(this, TwilsockConnector);\n\n    _this = _super.call(this, config);\n    _this.twilsock = twilsock;\n    _this.context = context;\n    context.id = uuid.v4();\n\n    _this.twilsock.on('stateChanged', function (state) {\n      if (state !== 'connected') {\n        _this.emit('transportReady', false);\n      }\n    });\n\n    _this.twilsock.on('registered', function (id) {\n      if (context && id === context.id && twilsock.state === 'connected') {\n        _this.emit('transportReady', true);\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(TwilsockConnector, [{\n    key: \"setNotificationId\",\n    value: function setNotificationId() {}\n  }, {\n    key: \"updateToken\",\n    value: function updateToken(token) {// no need to do anything here, twilsock backend handles it on it's own\n      // so just ignoring here\n    }\n  }, {\n    key: \"updateContextRequest\",\n    value: function () {\n      var _updateContextRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(messageTypes) {\n        var context;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                context = {\n                  product_id: this.context.productId,\n                  notification_protocol_version: 4,\n                  endpoint_platform: this.context.platform,\n                  message_types: messageTypes\n                };\n                this.emit('transportReady', false);\n                _context.next = 4;\n                return this.twilsock.setNotificationsContext(this.context.id, context);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function updateContextRequest(_x) {\n        return _updateContextRequest.apply(this, arguments);\n      }\n\n      return updateContextRequest;\n    }()\n  }, {\n    key: \"updateRegistration\",\n    value: function () {\n      var _updateRegistration = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(registration, reasons) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (reasons.has('messageType')) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                _context2.next = 4;\n                return this.updateContextRequest(Array.from(registration.messageTypes));\n\n              case 4:\n                return _context2.abrupt(\"return\", registration);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function updateRegistration(_x2, _x3) {\n        return _updateRegistration.apply(this, arguments);\n      }\n\n      return updateRegistration;\n    }()\n  }, {\n    key: \"removeRegistration\",\n    value: function removeRegistration() {\n      return this.twilsock.removeNotificationsContext(this.context.id);\n    }\n  }]);\n\n  return TwilsockConnector;\n}(connector_1.Connector);\n\nexports.TwilsockConnector = TwilsockConnector;","map":{"version":3,"sources":["/Users/stefanpjanic/Desktop/mango_dev/node_modules/twilio-notifications/lib/twilsock.connector.js"],"names":["Object","defineProperty","exports","value","TwilsockConnector","uuid","require","connector_1","DEFAULT_TTL","context","twilsock","config","id","v4","on","state","emit","token","messageTypes","product_id","productId","notification_protocol_version","endpoint_platform","platform","message_types","setNotificationsContext","registration","reasons","has","updateContextRequest","Array","from","removeNotificationsContext","Connector"],"mappings":"AAAA;;;;;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,iBAAR,GAA4B,KAAK,CAAjC;;AACA,IAAMC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,WAAW,GAAGD,OAAO,CAAC,aAAD,CAA3B;;AACA,IAAME,WAAW,GAAG,KAAK,EAAL,GAAU,EAA9B;AACA;AACA;AACA;;IACMJ,iB;;;;;AACF,6BAAYK,OAAZ,EAAqBC,QAArB,EAA+BC,MAA/B,EAAuC;AAAA;;AAAA;;AACnC,8BAAMA,MAAN;AACA,UAAKD,QAAL,GAAgBA,QAAhB;AACA,UAAKD,OAAL,GAAeA,OAAf;AACAA,IAAAA,OAAO,CAACG,EAAR,GAAaP,IAAI,CAACQ,EAAL,EAAb;;AACA,UAAKH,QAAL,CAAcI,EAAd,CAAiB,cAAjB,EAAiC,UAAAC,KAAK,EAAI;AACtC,UAAIA,KAAK,KAAK,WAAd,EAA2B;AACvB,cAAKC,IAAL,CAAU,gBAAV,EAA4B,KAA5B;AACH;AACJ,KAJD;;AAKA,UAAKN,QAAL,CAAcI,EAAd,CAAiB,YAAjB,EAA+B,UAAAF,EAAE,EAAI;AACjC,UAAIH,OAAO,IAAIG,EAAE,KAAKH,OAAO,CAACG,EAA1B,IAAgCF,QAAQ,CAACK,KAAT,KAAmB,WAAvD,EAAoE;AAChE,cAAKC,IAAL,CAAU,gBAAV,EAA4B,IAA5B;AACH;AACJ,KAJD;;AAVmC;AAetC;;;;WACD,6BAA2B,CAAG;;;WAC9B,qBAAYC,KAAZ,EAAmB,CACf;AACA;AACH;;;;2FACD,iBAA2BC,YAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACQT,gBAAAA,OADR,GACkB;AACVU,kBAAAA,UAAU,EAAE,KAAKV,OAAL,CAAaW,SADf;AAEVC,kBAAAA,6BAA6B,EAAE,CAFrB;AAGVC,kBAAAA,iBAAiB,EAAE,KAAKb,OAAL,CAAac,QAHtB;AAIVC,kBAAAA,aAAa,EAAEN;AAJL,iBADlB;AAOI,qBAAKF,IAAL,CAAU,gBAAV,EAA4B,KAA5B;AAPJ;AAAA,uBAQU,KAAKN,QAAL,CAAce,uBAAd,CAAsC,KAAKhB,OAAL,CAAaG,EAAnD,EAAuDH,OAAvD,CARV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;yFAUA,kBAAyBiB,YAAzB,EAAuCC,OAAvC;AAAA;AAAA;AAAA;AAAA;AAAA,oBACSA,OAAO,CAACC,GAAR,CAAY,aAAZ,CADT;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,uBAIU,KAAKC,oBAAL,CAA0BC,KAAK,CAACC,IAAN,CAAWL,YAAY,CAACR,YAAxB,CAA1B,CAJV;;AAAA;AAAA,kDAKWQ,YALX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WAOA,8BAAqB;AACjB,aAAO,KAAKhB,QAAL,CAAcsB,0BAAd,CAAyC,KAAKvB,OAAL,CAAaG,EAAtD,CAAP;AACH;;;;EAzC2BL,WAAW,CAAC0B,S;;AA2C5C/B,OAAO,CAACE,iBAAR,GAA4BA,iBAA5B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TwilsockConnector = void 0;\nconst uuid = require(\"uuid\");\nconst connector_1 = require(\"./connector\");\nconst DEFAULT_TTL = 60 * 60 * 48;\n/**\n * Registrar connector implementation for twilsock\n */\nclass TwilsockConnector extends connector_1.Connector {\n    constructor(context, twilsock, config) {\n        super(config);\n        this.twilsock = twilsock;\n        this.context = context;\n        context.id = uuid.v4();\n        this.twilsock.on('stateChanged', state => {\n            if (state !== 'connected') {\n                this.emit('transportReady', false);\n            }\n        });\n        this.twilsock.on('registered', id => {\n            if (context && id === context.id && twilsock.state === 'connected') {\n                this.emit('transportReady', true);\n            }\n        });\n    }\n    setNotificationId(...args) { }\n    updateToken(token) {\n        // no need to do anything here, twilsock backend handles it on it's own\n        // so just ignoring here\n    }\n    async updateContextRequest(messageTypes) {\n        let context = {\n            product_id: this.context.productId,\n            notification_protocol_version: 4,\n            endpoint_platform: this.context.platform,\n            message_types: messageTypes\n        };\n        this.emit('transportReady', false);\n        await this.twilsock.setNotificationsContext(this.context.id, context);\n    }\n    async updateRegistration(registration, reasons) {\n        if (!reasons.has('messageType')) {\n            return;\n        }\n        await this.updateContextRequest(Array.from(registration.messageTypes));\n        return registration;\n    }\n    removeRegistration() {\n        return this.twilsock.removeNotificationsContext(this.context.id);\n    }\n}\nexports.TwilsockConnector = TwilsockConnector;\n"]},"metadata":{},"sourceType":"script"}