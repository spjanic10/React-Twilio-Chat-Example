{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar events_1 = require(\"events\");\n/**\n * Provides retrier service\n */\n\n\nvar Retrier = /*#__PURE__*/function (_events_1$EventEmitte) {\n  _inherits(Retrier, _events_1$EventEmitte);\n\n  var _super = _createSuper(Retrier);\n\n  /**\n   * Creates a new Retrier instance\n   */\n  function Retrier(options) {\n    var _this;\n\n    _classCallCheck(this, Retrier);\n\n    _this = _super.call(this);\n    _this.minDelay = options.min;\n    _this.maxDelay = options.max;\n    _this.initialDelay = options.initial || 0;\n    _this.maxAttemptsCount = options.maxAttemptsCount || 0;\n    _this.maxAttemptsTime = options.maxAttemptsTime || 0;\n    _this.randomness = options.randomness || 0;\n    _this.inProgress = false;\n    _this.attemptNum = 0;\n    _this.prevDelay = 0;\n    _this.currDelay = 0;\n    return _this;\n  }\n\n  _createClass(Retrier, [{\n    key: \"attempt\",\n    value: function attempt() {\n      clearTimeout(this.timeout);\n      this.attemptNum++;\n      this.timeout = null;\n      this.emit('attempt', this);\n    }\n  }, {\n    key: \"nextDelay\",\n    value: function nextDelay(delayOverride) {\n      if (typeof delayOverride === 'number') {\n        this.prevDelay = 0;\n        this.currDelay = delayOverride;\n        return delayOverride;\n      }\n\n      if (this.attemptNum == 0) {\n        return this.initialDelay;\n      }\n\n      if (this.attemptNum == 1) {\n        this.currDelay = this.minDelay;\n        return this.currDelay;\n      }\n\n      this.prevDelay = this.currDelay;\n      var delay = this.currDelay + this.prevDelay;\n\n      if (this.maxDelay && delay > this.maxDelay) {\n        this.currDelay = this.maxDelay;\n        delay = this.maxDelay;\n      }\n\n      this.currDelay = delay;\n      return delay;\n    }\n  }, {\n    key: \"randomize\",\n    value: function randomize(delay) {\n      var area = delay * this.randomness;\n      var corr = Math.round(Math.random() * area * 2 - area);\n      return Math.max(0, delay + corr);\n    }\n  }, {\n    key: \"scheduleAttempt\",\n    value: function scheduleAttempt(delayOverride) {\n      var _this2 = this;\n\n      if (this.maxAttemptsCount && this.attemptNum >= this.maxAttemptsCount) {\n        this.cleanup();\n        this.emit('failed', new Error('Maximum attempt count limit reached'));\n        this.reject(new Error('Maximum attempt count reached'));\n        return;\n      }\n\n      var delay = this.nextDelay(delayOverride);\n      delay = this.randomize(delay);\n\n      if (this.maxAttemptsTime && this.startTimestamp + this.maxAttemptsTime < Date.now() + delay) {\n        this.cleanup();\n        this.emit('failed', new Error('Maximum attempt time limit reached'));\n        this.reject(new Error('Maximum attempt time limit reached'));\n        return;\n      }\n\n      this.timeout = setTimeout(function () {\n        return _this2.attempt();\n      }, delay);\n    }\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      clearTimeout(this.timeout);\n      this.timeout = null;\n      this.inProgress = false;\n      this.attemptNum = 0;\n      this.prevDelay = 0;\n      this.currDelay = 0;\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      var _this3 = this;\n\n      if (this.inProgress) {\n        throw new Error('Retrier is already in progress');\n      }\n\n      this.inProgress = true;\n      return new Promise(function (resolve, reject) {\n        _this3.resolve = resolve;\n        _this3.reject = reject;\n        _this3.startTimestamp = Date.now();\n\n        _this3.scheduleAttempt(_this3.initialDelay);\n      });\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n        this.timeout = null;\n        this.inProgress = false;\n        this.emit('cancelled');\n        this.reject(new Error('Cancelled'));\n      }\n    }\n  }, {\n    key: \"succeeded\",\n    value: function succeeded(arg) {\n      this.emit('succeeded', arg);\n      this.resolve(arg);\n    }\n  }, {\n    key: \"failed\",\n    value: function failed(err, nextAttemptDelayOverride) {\n      if (this.timeout) {\n        throw new Error('Retrier attempt is already in progress');\n      }\n\n      this.scheduleAttempt(nextAttemptDelayOverride);\n    }\n  }, {\n    key: \"run\",\n    value: function run(handler) {\n      var _this4 = this;\n\n      this.on('attempt', function () {\n        handler().then(function (v) {\n          return _this4.succeeded(v);\n        }).catch(function (e) {\n          return _this4.failed(e);\n        });\n      });\n      return this.start();\n    }\n  }]);\n\n  return Retrier;\n}(events_1.EventEmitter);\n\nexports.Retrier = Retrier;\nexports.default = Retrier;","map":{"version":3,"sources":["../src/retrier.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst events_1 = require(\"events\");\n/**\n * Provides retrier service\n */\nclass Retrier extends events_1.EventEmitter {\n    /**\n     * Creates a new Retrier instance\n     */\n    constructor(options) {\n        super();\n        this.minDelay = options.min;\n        this.maxDelay = options.max;\n        this.initialDelay = options.initial || 0;\n        this.maxAttemptsCount = options.maxAttemptsCount || 0;\n        this.maxAttemptsTime = options.maxAttemptsTime || 0;\n        this.randomness = options.randomness || 0;\n        this.inProgress = false;\n        this.attemptNum = 0;\n        this.prevDelay = 0;\n        this.currDelay = 0;\n    }\n    attempt() {\n        clearTimeout(this.timeout);\n        this.attemptNum++;\n        this.timeout = null;\n        this.emit('attempt', this);\n    }\n    nextDelay(delayOverride) {\n        if (typeof delayOverride === 'number') {\n            this.prevDelay = 0;\n            this.currDelay = delayOverride;\n            return delayOverride;\n        }\n        if (this.attemptNum == 0) {\n            return this.initialDelay;\n        }\n        if (this.attemptNum == 1) {\n            this.currDelay = this.minDelay;\n            return this.currDelay;\n        }\n        this.prevDelay = this.currDelay;\n        let delay = this.currDelay + this.prevDelay;\n        if (this.maxDelay && delay > this.maxDelay) {\n            this.currDelay = this.maxDelay;\n            delay = this.maxDelay;\n        }\n        this.currDelay = delay;\n        return delay;\n    }\n    randomize(delay) {\n        let area = delay * this.randomness;\n        let corr = Math.round(Math.random() * area * 2 - area);\n        return Math.max(0, delay + corr);\n    }\n    scheduleAttempt(delayOverride) {\n        if (this.maxAttemptsCount && this.attemptNum >= this.maxAttemptsCount) {\n            this.cleanup();\n            this.emit('failed', new Error('Maximum attempt count limit reached'));\n            this.reject(new Error('Maximum attempt count reached'));\n            return;\n        }\n        let delay = this.nextDelay(delayOverride);\n        delay = this.randomize(delay);\n        if (this.maxAttemptsTime && (this.startTimestamp + this.maxAttemptsTime < Date.now() + delay)) {\n            this.cleanup();\n            this.emit('failed', new Error('Maximum attempt time limit reached'));\n            this.reject(new Error('Maximum attempt time limit reached'));\n            return;\n        }\n        this.timeout = setTimeout(() => this.attempt(), delay);\n    }\n    cleanup() {\n        clearTimeout(this.timeout);\n        this.timeout = null;\n        this.inProgress = false;\n        this.attemptNum = 0;\n        this.prevDelay = 0;\n        this.currDelay = 0;\n    }\n    start() {\n        if (this.inProgress) {\n            throw new Error('Retrier is already in progress');\n        }\n        this.inProgress = true;\n        return new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n            this.startTimestamp = Date.now();\n            this.scheduleAttempt(this.initialDelay);\n        });\n    }\n    cancel() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n            this.timeout = null;\n            this.inProgress = false;\n            this.emit('cancelled');\n            this.reject(new Error('Cancelled'));\n        }\n    }\n    succeeded(arg) {\n        this.emit('succeeded', arg);\n        this.resolve(arg);\n    }\n    failed(err, nextAttemptDelayOverride) {\n        if (this.timeout) {\n            throw new Error('Retrier attempt is already in progress');\n        }\n        this.scheduleAttempt(nextAttemptDelayOverride);\n    }\n    run(handler) {\n        this.on('attempt', () => {\n            handler().then(v => this.succeeded(v)).catch(e => this.failed(e));\n        });\n        return this.start();\n    }\n}\nexports.Retrier = Retrier;\nexports.default = Retrier;\n//# sourceMappingURL=retrier.js.map"]},"metadata":{},"sourceType":"script"}