{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateId = exports.validatePageSize = exports.validateMandatoryTtl = exports.validateOptionalTtl = exports.deepClone = void 0;\n\nvar syncerror_1 = require(\"./syncerror\");\n/**\n * Deep-clone an object. Note that this does not work on object containing\n * functions.\n * @param {object} obj - the object to deep-clone\n * @returns {object}\n */\n\n\nfunction deepClone(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n\nexports.deepClone = deepClone;\n\nfunction validateTtl(ttl, optional) {\n  if (optional && ttl === undefined) {\n    return;\n  }\n\n  var ttlType = typeof ttl;\n\n  if (ttlType !== 'number' || !isNonNegativeInteger(ttl)) {\n    var providedValue = ttlType === 'object' ? 'object' : \"'\".concat(ttl, \"' of type '\").concat(ttlType, \"'\");\n    throw new syncerror_1.default(\"Invalid TTL, expected a positive integer of type number, was \".concat(providedValue), 400, 54011);\n  }\n}\n\nfunction validateId(id) {\n  if (id === undefined) {\n    return;\n  }\n\n  var idType = typeof id;\n\n  if (idType !== 'string') {\n    throw new Error(\"Invalid ID type, expected a string, got '\".concat(idType, \"'\"));\n  }\n}\n\nexports.validateId = validateId;\n\nfunction validateOptionalTtl(ttl) {\n  validateTtl(ttl, true);\n}\n\nexports.validateOptionalTtl = validateOptionalTtl;\n\nfunction validateMandatoryTtl(ttl) {\n  validateTtl(ttl, false);\n}\n\nexports.validateMandatoryTtl = validateMandatoryTtl;\n\nfunction validatePageSize(pageSize) {\n  var validPageSize = pageSize === undefined || isPositiveInteger(pageSize);\n\n  if (!validPageSize) {\n    throw new syncerror_1.default(\"Invalid pageSize parameter. Expected a positive integer, was '\".concat(pageSize, \"'.\"), 400, 54455);\n  }\n}\n\nexports.validatePageSize = validatePageSize;\n\nfunction isInteger(number) {\n  return !isNaN(parseInt(number)) && isFinite(number);\n}\n\nfunction isPositiveInteger(number) {\n  return isInteger(number) && number > 0;\n}\n\nfunction isNonNegativeInteger(number) {\n  return isInteger(number) && number >= 0;\n}","map":{"version":3,"sources":["/Users/stefanpjanic/Desktop/mango_dev/node_modules/twilio-sync/lib/utils/sanitize.js"],"names":["Object","defineProperty","exports","value","validateId","validatePageSize","validateMandatoryTtl","validateOptionalTtl","deepClone","syncerror_1","require","obj","JSON","parse","stringify","validateTtl","ttl","optional","undefined","ttlType","isNonNegativeInteger","providedValue","default","id","idType","Error","pageSize","validPageSize","isPositiveInteger","isInteger","number","isNaN","parseInt","isFinite"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,UAAR,GAAqBF,OAAO,CAACG,gBAAR,GAA2BH,OAAO,CAACI,oBAAR,GAA+BJ,OAAO,CAACK,mBAAR,GAA8BL,OAAO,CAACM,SAAR,GAAoB,KAAK,CAAtI;;AACA,IAAMC,WAAW,GAAGC,OAAO,CAAC,aAAD,CAA3B;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,SAAT,CAAmBG,GAAnB,EAAwB;AACpB,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeH,GAAf,CAAX,CAAP;AACH;;AACDT,OAAO,CAACM,SAAR,GAAoBA,SAApB;;AACA,SAASO,WAAT,CAAqBC,GAArB,EAA0BC,QAA1B,EAAoC;AAChC,MAAIA,QAAQ,IAAID,GAAG,KAAKE,SAAxB,EAAmC;AAC/B;AACH;;AACD,MAAMC,OAAO,GAAG,OAAOH,GAAvB;;AACA,MAAIG,OAAO,KAAK,QAAZ,IAAwB,CAACC,oBAAoB,CAACJ,GAAD,CAAjD,EAAwD;AACpD,QAAMK,aAAa,GAAGF,OAAO,KAAK,QAAZ,GAAuB,QAAvB,cAAsCH,GAAtC,wBAAuDG,OAAvD,MAAtB;AACA,UAAM,IAAIV,WAAW,CAACa,OAAhB,wEAAwFD,aAAxF,GAAyG,GAAzG,EAA8G,KAA9G,CAAN;AACH;AACJ;;AACD,SAASjB,UAAT,CAAoBmB,EAApB,EAAwB;AACpB,MAAIA,EAAE,KAAKL,SAAX,EAAsB;AAClB;AACH;;AACD,MAAMM,MAAM,GAAG,OAAOD,EAAtB;;AACA,MAAIC,MAAM,KAAK,QAAf,EAAyB;AACrB,UAAM,IAAIC,KAAJ,oDAAsDD,MAAtD,OAAN;AACH;AACJ;;AACDtB,OAAO,CAACE,UAAR,GAAqBA,UAArB;;AACA,SAASG,mBAAT,CAA6BS,GAA7B,EAAkC;AAC9BD,EAAAA,WAAW,CAACC,GAAD,EAAM,IAAN,CAAX;AACH;;AACDd,OAAO,CAACK,mBAAR,GAA8BA,mBAA9B;;AACA,SAASD,oBAAT,CAA8BU,GAA9B,EAAmC;AAC/BD,EAAAA,WAAW,CAACC,GAAD,EAAM,KAAN,CAAX;AACH;;AACDd,OAAO,CAACI,oBAAR,GAA+BA,oBAA/B;;AACA,SAASD,gBAAT,CAA0BqB,QAA1B,EAAoC;AAChC,MAAMC,aAAa,GAAGD,QAAQ,KAAKR,SAAb,IAA0BU,iBAAiB,CAACF,QAAD,CAAjE;;AACA,MAAI,CAACC,aAAL,EAAoB;AAChB,UAAM,IAAIlB,WAAW,CAACa,OAAhB,yEAAyFI,QAAzF,SAAuG,GAAvG,EAA4G,KAA5G,CAAN;AACH;AACJ;;AACDxB,OAAO,CAACG,gBAAR,GAA2BA,gBAA3B;;AACA,SAASwB,SAAT,CAAmBC,MAAnB,EAA2B;AACvB,SAAO,CAACC,KAAK,CAACC,QAAQ,CAACF,MAAD,CAAT,CAAN,IAA4BG,QAAQ,CAACH,MAAD,CAA3C;AACH;;AACD,SAASF,iBAAT,CAA2BE,MAA3B,EAAmC;AAC/B,SAAOD,SAAS,CAACC,MAAD,CAAT,IAAqBA,MAAM,GAAG,CAArC;AACH;;AACD,SAASV,oBAAT,CAA8BU,MAA9B,EAAsC;AAClC,SAAOD,SAAS,CAACC,MAAD,CAAT,IAAqBA,MAAM,IAAI,CAAtC;AACH","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateId = exports.validatePageSize = exports.validateMandatoryTtl = exports.validateOptionalTtl = exports.deepClone = void 0;\nconst syncerror_1 = require(\"./syncerror\");\n/**\n * Deep-clone an object. Note that this does not work on object containing\n * functions.\n * @param {object} obj - the object to deep-clone\n * @returns {object}\n */\nfunction deepClone(obj) {\n    return JSON.parse(JSON.stringify(obj));\n}\nexports.deepClone = deepClone;\nfunction validateTtl(ttl, optional) {\n    if (optional && ttl === undefined) {\n        return;\n    }\n    const ttlType = typeof ttl;\n    if (ttlType !== 'number' || !isNonNegativeInteger(ttl)) {\n        const providedValue = ttlType === 'object' ? 'object' : `'${ttl}' of type '${ttlType}'`;\n        throw new syncerror_1.default(`Invalid TTL, expected a positive integer of type number, was ${providedValue}`, 400, 54011);\n    }\n}\nfunction validateId(id) {\n    if (id === undefined) {\n        return;\n    }\n    const idType = typeof id;\n    if (idType !== 'string') {\n        throw new Error(`Invalid ID type, expected a string, got '${idType}'`);\n    }\n}\nexports.validateId = validateId;\nfunction validateOptionalTtl(ttl) {\n    validateTtl(ttl, true);\n}\nexports.validateOptionalTtl = validateOptionalTtl;\nfunction validateMandatoryTtl(ttl) {\n    validateTtl(ttl, false);\n}\nexports.validateMandatoryTtl = validateMandatoryTtl;\nfunction validatePageSize(pageSize) {\n    const validPageSize = pageSize === undefined || isPositiveInteger(pageSize);\n    if (!validPageSize) {\n        throw new syncerror_1.default(`Invalid pageSize parameter. Expected a positive integer, was '${pageSize}'.`, 400, 54455);\n    }\n}\nexports.validatePageSize = validatePageSize;\nfunction isInteger(number) {\n    return !isNaN(parseInt(number)) && isFinite(number);\n}\nfunction isPositiveInteger(number) {\n    return isInteger(number) && number > 0;\n}\nfunction isNonNegativeInteger(number) {\n    return isInteger(number) && number >= 0;\n}\n"]},"metadata":{},"sourceType":"script"}