{"ast":null,"code":"\"use strict\";\n\nvar _keys = require(\"babel-runtime/core-js/object/keys\");\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _toConsumableArray2 = require(\"babel-runtime/helpers/toConsumableArray\");\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _set = require(\"babel-runtime/core-js/set\");\n\nvar _set2 = _interopRequireDefault(_set);\n\nvar _regenerator = require(\"babel-runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _asyncToGenerator2 = require(\"babel-runtime/helpers/asyncToGenerator\");\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _map = require(\"babel-runtime/core-js/map\");\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _stringify = require(\"babel-runtime/core-js/json/stringify\");\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _isInteger = require(\"babel-runtime/core-js/number/is-integer\");\n\nvar _isInteger2 = _interopRequireDefault(_isInteger);\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _metadata = require(\"babel-runtime/core-js/reflect/metadata\");\n\nvar _metadata2 = _interopRequireDefault(_metadata);\n\nvar _defineProperty = require(\"babel-runtime/core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _getOwnPropertyDescriptor = require(\"babel-runtime/core-js/object/get-own-property-descriptor\");\n\nvar _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = (0, _getOwnPropertyDescriptor2.default)(target, key) : desc,\n      d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && (0, _defineProperty2.default)(target, key, r), r;\n};\n\nvar __metadata = undefined && undefined.__metadata || function (k, v) {\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(Reflect)) === \"object\" && typeof _metadata2.default === \"function\") return (0, _metadata2.default)(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Conversation = void 0;\n\nvar events_1 = require(\"events\");\n\nvar logger_1 = require(\"./logger\");\n\nvar participants_1 = require(\"./data/participants\");\n\nvar participant_1 = require(\"./participant\");\n\nvar messages_1 = require(\"./data/messages\");\n\nvar util_1 = require(\"./util\");\n\nvar typecheck_1 = require(\"./util/typecheck\");\n\nvar log = logger_1.Logger.scope('Conversation');\nvar fieldMappings = {\n  lastMessage: 'lastMessage',\n  attributes: 'attributes',\n  createdBy: 'createdBy',\n  dateCreated: 'dateCreated',\n  dateUpdated: 'dateUpdated',\n  friendlyName: 'friendlyName',\n  lastConsumedMessageIndex: 'lastConsumedMessageIndex',\n  notificationLevel: 'notificationLevel',\n  sid: 'sid',\n  status: 'status',\n  state: 'state'\n};\n\nfunction parseTime(timeString) {\n  try {\n    return new Date(timeString);\n  } catch (e) {\n    return null;\n  }\n} // todo @property {String} uniqueName - The Conversation's unique name (tag)\n\n/**\n * @classdesc A Conversation represents communication between multiple Conversations Clients\n * @property {any} attributes - The Conversation's custom attributes\n * @property {String} createdBy - The identity of the User that created this Conversation\n * @property {Date} dateCreated - The Date this Conversation was created\n * @property {Date} dateUpdated - The Date this Conversation was last updated\n * @property {String} [friendlyName] - The Conversation's name\n * @property {Number} lastConsumedMessageIndex - Index of the last Message the User has consumed in this Conversation\n * @property {Conversation#LastMessage} lastMessage - Last Message sent to this Conversation\n * @property {Conversation#NotificationLevel} notificationLevel - User Notification level for this Conversation\n * @property {String} sid - The Conversation's unique system identifier\n * @property {Conversation#Status} status - The Conversation's status\n * @property {Conversation#State} state - The Channel's state\n * @fires Conversation#participantJoined\n * @fires Conversation#participantLeft\n * @fires Conversation#participantUpdated\n * @fires Conversation#messageAdded\n * @fires Conversation#messageRemoved\n * @fires Conversation#messageUpdated\n * @fires Conversation#typingEnded\n * @fires Conversation#typingStarted\n * @fires Conversation#updated\n * @fires Conversation#removed\n */\n\n\nvar Conversation = function (_events_1$EventEmitte) {\n  (0, _inherits3.default)(Conversation, _events_1$EventEmitte);\n  /**\n   * These options can be passed to {@link Conversation#sendMessage}.\n   * @typedef {Object} Conversation#SendMediaOptions\n   * @property {String} contentType - content type of media\n   * @property {String | Buffer} media - content to post\n   */\n  // todo 'uniqueName' |\n\n  /**\n   * The update reason for <code>updated</code> event emitted on Conversation\n   * @typedef {('attributes' | 'createdBy' | 'dateCreated' | 'dateUpdated' |\n    'friendlyName' | 'lastConsumedMessageIndex' | 'state' | 'status' | 'uniqueName' | 'lastMessage' |\n    'notificationLevel' )} Conversation#UpdateReason\n   */\n\n  /**\n   * The status of the Conversation, relative to the Client: whether the Conversation has been <code>joined</code> or the Client is\n   * <code>notParticipating</code> in the Conversation.\n   * @typedef {('notParticipating' | 'joined')} Conversation#Status\n   */\n\n  /**\n   * The User's Notification level for Conversation, determines whether the currently logged-in User will receive\n   * pushes for events in this Conversation. Can be either <code>muted</code> or <code>default</code>,\n   * where <code>default</code> defers to global Service push configuration.\n   * @typedef {('default' | 'muted')} Conversation#NotificationLevel\n   */\n\n  /**\n   * The Channel's state. Set to undefined if the channel is not a conversation.\n   * @typedef {Object | undefined} Conversation#State\n   * @property {('active' | 'inactive' | 'closed')} current - the current state\n   * @property {Date} dateUpdated - date at which the latest channel state update happened\n   */\n\n  function Conversation(services, descriptor, sid) {\n    (0, _classCallCheck3.default)(this, Conversation);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (Conversation.__proto__ || (0, _getPrototypeOf2.default)(Conversation)).call(this));\n\n    var attributes = descriptor.attributes || {};\n    var createdBy = descriptor.createdBy;\n    var dateCreated = parseTime(descriptor.dateCreated);\n    var dateUpdated = parseTime(descriptor.dateUpdated);\n    var friendlyName = descriptor.friendlyName || null;\n    var lastConsumedMessageIndex = (0, _isInteger2.default)(descriptor.lastConsumedMessageIndex) ? descriptor.lastConsumedMessageIndex : null; //let uniqueName = descriptor.uniqueName || null;\n\n    try {\n      (0, _stringify2.default)(attributes);\n    } catch (e) {\n      throw new Error('Attributes must be a valid JSON object.');\n    }\n\n    _this.services = services;\n    _this.sid = sid;\n    _this.entityName = descriptor.channel;\n    _this.channelState = {\n      //uniqueName,\n      status: 'notParticipating',\n      attributes: attributes,\n      createdBy: createdBy,\n      dateCreated: dateCreated,\n      dateUpdated: dateUpdated,\n      friendlyName: friendlyName,\n      lastConsumedMessageIndex: lastConsumedMessageIndex\n    };\n\n    if (descriptor.notificationLevel) {\n      _this.channelState.notificationLevel = descriptor.notificationLevel;\n    }\n\n    _this.participants = new _map2.default();\n    _this.participantsEntity = new participants_1.Participants(_this, _this.services, _this.participants);\n\n    _this.participantsEntity.on('participantJoined', _this.emit.bind(_this, 'participantJoined'));\n\n    _this.participantsEntity.on('participantLeft', _this.emit.bind(_this, 'participantLeft'));\n\n    _this.participantsEntity.on('participantUpdated', function (args) {\n      return _this.emit('participantUpdated', args);\n    });\n\n    _this.messagesEntity = new messages_1.Messages(_this, services);\n\n    _this.messagesEntity.on('messageAdded', function (message) {\n      return _this._onMessageAdded(message);\n    });\n\n    _this.messagesEntity.on('messageUpdated', function (args) {\n      return _this.emit('messageUpdated', args);\n    });\n\n    _this.messagesEntity.on('messageRemoved', _this.emit.bind(_this, 'messageRemoved'));\n\n    return _this;\n  }\n\n  (0, _createClass3.default)(Conversation, [{\n    key: \"_subscribe\",\n\n    /**\n     * The Conversation's last message's information.\n     * @typedef {Object} Conversation#LastMessage\n     * @property {Number} index - Message's index\n     * @property {Date} dateCreated - Message's creation date\n     */\n\n    /**\n     * Load and Subscribe to this Conversation and do not subscribe to its Participants and Messages.\n     * This or _subscribeStreams will need to be called before any events on Conversation will fire.\n     * @returns {Promise}\n     * @private\n     */\n    value: function _subscribe() {\n      var _this2 = this;\n\n      if (this.entityPromise) {\n        return this.entityPromise;\n      }\n\n      return this.entityPromise = this.entityPromise || this.services.syncClient.document({\n        id: this.entityName,\n        mode: 'open_existing'\n      }).then(function (entity) {\n        _this2.entity = entity;\n\n        _this2.entity.on('updated', function (args) {\n          _this2._update(args.value);\n        });\n\n        _this2.entity.on('removed', function () {\n          return _this2.emit('removed', _this2);\n        });\n\n        _this2._update(_this2.entity.value);\n\n        return entity;\n      }).catch(function (err) {\n        _this2.entity = null;\n        _this2.entityPromise = null;\n\n        if (_this2.services.syncClient.connectionState != 'disconnected') {\n          log.error('Failed to get conversation object', err);\n        }\n\n        log.debug('ERROR: Failed to get conversation object', err);\n        throw err;\n      });\n    }\n    /**\n     * Load the attributes of this Conversation and instantiate its Participants and Messages.\n     * This or _subscribe will need to be called before any events on Conversation will fire.\n     * This will need to be called before any events on Participants or Messages will fire\n     * @returns {Promise}\n     * @private\n     */\n\n  }, {\n    key: \"_subscribeStreams\",\n    value: function () {\n      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {\n        var messagesObjectName, rosterObjectName;\n        return _regenerator2.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return this._subscribe();\n\n              case 3:\n                log.trace('_subscribeStreams, this.entity.value=', this.entity.value);\n                messagesObjectName = this.entity.value.messages;\n                rosterObjectName = this.entity.value.roster;\n                _context.next = 8;\n                return _promise2.default.all([this.messagesEntity.subscribe(messagesObjectName), this.participantsEntity.subscribe(rosterObjectName)]);\n\n              case 8:\n                _context.next = 15;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](0);\n\n                if (this.services.syncClient.connectionState !== 'disconnected') {\n                  log.error('Failed to subscribe on conversation objects', this.sid, _context.t0);\n                }\n\n                log.debug('ERROR: Failed to subscribe on conversation objects', this.sid, _context.t0);\n                throw _context.t0;\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 10]]);\n      }));\n\n      function _subscribeStreams() {\n        return _ref.apply(this, arguments);\n      }\n\n      return _subscribeStreams;\n    }()\n    /**\n     * Stop listening for and firing events on this Conversation.\n     * @returns {Promise}\n     * @private\n     */\n\n  }, {\n    key: \"_unsubscribe\",\n    value: function () {\n      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {\n        return _regenerator2.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!this.entity) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                _context2.next = 3;\n                return this.entity.close();\n\n              case 3:\n                this.entity = null;\n                this.entityPromise = null;\n\n              case 5:\n                return _context2.abrupt(\"return\", _promise2.default.all([this.participantsEntity.unsubscribe(), this.messagesEntity.unsubscribe()]));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _unsubscribe() {\n        return _ref2.apply(this, arguments);\n      }\n\n      return _unsubscribe;\n    }()\n    /**\n     * Set conversation status\n     * @private\n     */\n\n  }, {\n    key: \"_setStatus\",\n    value: function _setStatus(status, source) {\n      var _this3 = this;\n\n      this.statusSource = source;\n\n      if (this.channelState.status === status) {\n        return;\n      }\n\n      this.channelState.status = status;\n\n      if (status === 'joined') {\n        this._subscribeStreams().catch(function (err) {\n          log.debug('ERROR while setting conversation status ' + status, err);\n\n          if (_this3.services.syncClient.connectionState !== 'disconnected') {\n            throw err;\n          }\n        }); // } else if (status === 'invited') {\n        //   this._subscribe()\n        //       .catch(err => {\n        //         log.debug('ERROR while setting conversation status ' + status, err);\n        //         if (this.services.syncClient.connectionState !== 'disconnected') {\n        //           throw err;\n        //         }\n        //       });\n\n      } else if (this.entityPromise) {\n        this._unsubscribe().catch(function (err) {\n          log.debug('ERROR while setting conversation status ' + status, err);\n\n          if (_this3.services.syncClient.connectionState !== 'disconnected') {\n            throw err;\n          }\n        });\n      }\n    }\n    /**\n     * If conversation's status update source\n     * @private\n     * @return {Conversations.DataSource}\n     */\n\n  }, {\n    key: \"_statusSource\",\n    value: function _statusSource() {\n      return this.statusSource;\n    }\n  }, {\n    key: \"_update\",\n\n    /**\n     * Updates local conversation object with new values\n     * @private\n     */\n    value: function _update(update) {\n      var _a, _b, _c, _d, _e;\n\n      log.trace('_update', update);\n      Conversation.preprocessUpdate(update, this.sid);\n      var updateReasons = new _set2.default();\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = (0, _getIterator3.default)((0, _keys2.default)(update)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var key = _step.value;\n          var localKey = fieldMappings[key];\n\n          if (!localKey) {\n            continue;\n          }\n\n          switch (localKey) {\n            case fieldMappings.status:\n              if (!update.status || update.status === 'unknown' || this.channelState.status === update.status) {\n                break;\n              }\n\n              this.channelState.status = update.status;\n              updateReasons.add(localKey);\n              break;\n\n            case fieldMappings.attributes:\n              if (util_1.isDeepEqual(this.channelState.attributes, update.attributes)) {\n                break;\n              }\n\n              this.channelState.attributes = update.attributes;\n              updateReasons.add(localKey);\n              break;\n\n            case fieldMappings.lastConsumedMessageIndex:\n              if (update.lastConsumedMessageIndex === undefined || update.lastConsumedMessageIndex === this.channelState.lastConsumedMessageIndex) {\n                break;\n              }\n\n              this.channelState.lastConsumedMessageIndex = update.lastConsumedMessageIndex;\n              updateReasons.add(localKey);\n              break;\n\n            case fieldMappings.lastMessage:\n              if (this.channelState.lastMessage && !update.lastMessage) {\n                delete this.channelState.lastMessage;\n                updateReasons.add(localKey);\n                break;\n              }\n\n              this.channelState.lastMessage = this.channelState.lastMessage || {};\n\n              if (((_a = update.lastMessage) === null || _a === void 0 ? void 0 : _a.index) !== undefined && update.lastMessage.index !== this.channelState.lastMessage.index) {\n                this.channelState.lastMessage.index = update.lastMessage.index;\n                updateReasons.add(localKey);\n              }\n\n              if (((_b = update.lastMessage) === null || _b === void 0 ? void 0 : _b.timestamp) !== undefined && ((_d = (_c = this.channelState.lastMessage) === null || _c === void 0 ? void 0 : _c.dateCreated) === null || _d === void 0 ? void 0 : _d.getTime()) !== update.lastMessage.timestamp.getTime()) {\n                this.channelState.lastMessage.dateCreated = update.lastMessage.timestamp;\n                updateReasons.add(localKey);\n              }\n\n              if (util_1.isDeepEqual(this.channelState.lastMessage, {})) {\n                delete this.channelState.lastMessage;\n              }\n\n              break;\n\n            case fieldMappings.state:\n              var state = update.state || undefined;\n\n              if (state !== undefined) {\n                state.dateUpdated = new Date(state.dateUpdated);\n              }\n\n              if (util_1.isDeepEqual(this.channelState.state, state)) {\n                break;\n              }\n\n              this.channelState.state = state;\n              updateReasons.add(localKey);\n              break;\n\n            default:\n              var isDate = update[key] instanceof Date;\n              var keysMatchAsDates = isDate && ((_e = this.channelState[localKey]) === null || _e === void 0 ? void 0 : _e.getTime()) === update[key].getTime();\n              var keysMatchAsNonDates = !isDate && this[localKey] === update[key];\n\n              if (keysMatchAsDates || keysMatchAsNonDates) {\n                break;\n              }\n\n              this.channelState[localKey] = update[key];\n              updateReasons.add(localKey);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (updateReasons.size > 0) {\n        this.emit('updated', {\n          conversation: this,\n          updateReasons: [].concat((0, _toConsumableArray3.default)(updateReasons))\n        });\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_onMessageAdded\",\n    value: function _onMessageAdded(message) {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = (0, _getIterator3.default)(this.participants.values()), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var participant = _step2.value;\n\n          if (participant.identity === message.author) {\n            participant._endTyping();\n\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      this.emit('messageAdded', message);\n    }\n    /**\n     * Add a participant to the Conversation by its Identity.\n     * @param {String} identity - Identity of the Client to add\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"add\",\n    value: function () {\n      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(identity) {\n        return _regenerator2.default.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this.participantsEntity.add(identity));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function add(_x) {\n        return _ref3.apply(this, arguments);\n      }\n\n      return add;\n    }()\n    /**\n     * Add a non-chat participant to the Conversation.\n     *\n     * @param {String} proxyAddress Proxy (Twilio) address of the participant\n     * @param {String} address User address of the participant\n     * @param {any} [attributes] Attributes to be attached to the participant\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"addNonChatParticipant\",\n    value: function () {\n      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(proxyAddress, address) {\n        var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        return _regenerator2.default.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", this.participantsEntity.addNonChatParticipant(proxyAddress, address, attributes));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function addNonChatParticipant(_x3, _x4) {\n        return _ref4.apply(this, arguments);\n      }\n\n      return addNonChatParticipant;\n    }()\n    /**\n     * Advance last consumed Conversation's Message index to current consumption horizon.\n     * Rejects if User is not Participant of Conversation.\n     * Last consumed Message index is updated only if new index value is higher than previous.\n     * @param {Number} index - Message index to advance to as last read\n     * @returns {Promise<number>} resulting unread messages count in the conversation\n     */\n\n  }, {\n    key: \"advanceLastConsumedMessageIndex\",\n    value: function () {\n      var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(index) {\n        return _regenerator2.default.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this._subscribeStreams();\n\n              case 2:\n                return _context5.abrupt(\"return\", this.services.consumptionHorizon.advanceLastConsumedMessageIndexForConversation(this.sid, index, this.lastConsumedMessageIndex));\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function advanceLastConsumedMessageIndex(_x5) {\n        return _ref5.apply(this, arguments);\n      }\n\n      return advanceLastConsumedMessageIndex;\n    }()\n    /**\n     * Delete the Conversation and unsubscribe from its events.\n     * @returns {Promise<Conversation>}\n     */\n\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6() {\n        return _regenerator2.default.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.services.session.addCommand('destroyChannel', {\n                  channelSid: this.sid\n                });\n\n              case 2:\n                return _context6.abrupt(\"return\", this);\n\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function _delete() {\n        return _ref6.apply(this, arguments);\n      }\n\n      return _delete;\n    }()\n    /**\n     * Get the custom attributes of this Conversation.\n     * @returns {Promise<any>} attributes of this Conversation\n     */\n\n  }, {\n    key: \"getAttributes\",\n    value: function () {\n      var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7() {\n        return _regenerator2.default.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this._subscribe();\n\n              case 2:\n                return _context7.abrupt(\"return\", this.attributes);\n\n              case 3:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function getAttributes() {\n        return _ref7.apply(this, arguments);\n      }\n\n      return getAttributes;\n    }()\n    /**\n     * Returns messages from conversation using paginator interface.\n     * @param {Number} [pageSize=30] Number of messages to return in single chunk\n     * @param {Number} [anchor] - Index of newest Message to fetch. From the end by default\n     * @param {('backwards'|'forward')} [direction=backwards] - Query direction. By default it query backwards\n     *                                                          from newer to older. 'forward' will query in opposite direction\n     * @returns {Promise<Paginator<Message>>} page of messages\n     */\n\n  }, {\n    key: \"getMessages\",\n    value: function () {\n      var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(pageSize, anchor, direction) {\n        return _regenerator2.default.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this._subscribeStreams();\n\n              case 2:\n                return _context8.abrupt(\"return\", this.messagesEntity.getMessages(pageSize, anchor, direction));\n\n              case 3:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function getMessages(_x6, _x7, _x8) {\n        return _ref8.apply(this, arguments);\n      }\n\n      return getMessages;\n    }()\n    /**\n     * Get a list of all Participants joined to this Conversation.\n     * @returns {Promise<Participant[]>}\n     */\n\n  }, {\n    key: \"getParticipants\",\n    value: function () {\n      var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9() {\n        return _regenerator2.default.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this._subscribeStreams();\n\n              case 2:\n                return _context9.abrupt(\"return\", this.participantsEntity.getParticipants());\n\n              case 3:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getParticipants() {\n        return _ref9.apply(this, arguments);\n      }\n\n      return getParticipants;\n    }()\n    /**\n     * Get conversation participants count.\n     * <br/>\n     * This method is semi-realtime. This means that this data will be eventually correct,\n     * but will also possibly be incorrect for a few seconds. The Conversation system does not\n     * provide real time events for counter values changes.\n     * <br/>\n     * So this is quite useful for any UI badges, but is not recommended\n     * to build any core application logic based on these counters being accurate in real time.\n     * @returns {Promise<number>}\n     */\n\n  }, {\n    key: \"getParticipantsCount\",\n    value: function () {\n      var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10() {\n        var links, url, response;\n        return _regenerator2.default.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.services.session.getSessionLinks();\n\n              case 2:\n                links = _context10.sent;\n                url = new util_1.UriBuilder(links.publicChannelsUrl).path(this.sid).build();\n                _context10.next = 6;\n                return this.services.network.get(url);\n\n              case 6:\n                response = _context10.sent;\n                return _context10.abrupt(\"return\", response.body.members_count);\n\n              case 8:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function getParticipantsCount() {\n        return _ref10.apply(this, arguments);\n      }\n\n      return getParticipantsCount;\n    }()\n    /**\n     * Get a Participant by its SID.\n     * @param {String} participantSid - Participant sid\n     * @returns {Promise<Participant>}\n     */\n\n  }, {\n    key: \"getParticipantBySid\",\n    value: function () {\n      var _ref11 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee11(participantSid) {\n        return _regenerator2.default.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                return _context11.abrupt(\"return\", this.participantsEntity.getParticipantBySid(participantSid));\n\n              case 1:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function getParticipantBySid(_x9) {\n        return _ref11.apply(this, arguments);\n      }\n\n      return getParticipantBySid;\n    }()\n    /**\n     * Get a Participant by its identity.\n     * @param {String} identity - Participant identity\n     * @returns {Promise<Participant>}\n     */\n\n  }, {\n    key: \"getParticipantByIdentity\",\n    value: function () {\n      var _ref12 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee12(identity) {\n        return _regenerator2.default.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                return _context12.abrupt(\"return\", this.participantsEntity.getParticipantByIdentity(identity));\n\n              case 1:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function getParticipantByIdentity(_x10) {\n        return _ref12.apply(this, arguments);\n      }\n\n      return getParticipantByIdentity;\n    }()\n    /**\n     * Get total message count in a conversation.\n     * <br/>\n     * This method is semi-realtime. This means that this data will be eventually correct,\n     * but will also possibly be incorrect for a few seconds. The Conversations system does not\n     * provide real time events for counter values changes.\n     * <br/>\n     * So this is quite useful for any UI badges, but is not recommended\n     * to build any core application logic based on these counters being accurate in real time.\n     * @returns {Promise<number>}\n     */\n\n  }, {\n    key: \"getMessagesCount\",\n    value: function () {\n      var _ref13 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee13() {\n        var links, url, response;\n        return _regenerator2.default.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.services.session.getSessionLinks();\n\n              case 2:\n                links = _context13.sent;\n                url = new util_1.UriBuilder(links.publicChannelsUrl).path(this.sid).build();\n                _context13.next = 6;\n                return this.services.network.get(url);\n\n              case 6:\n                response = _context13.sent;\n                return _context13.abrupt(\"return\", response.body.messages_count);\n\n              case 8:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function getMessagesCount() {\n        return _ref13.apply(this, arguments);\n      }\n\n      return getMessagesCount;\n    }()\n    /**\n     * Get unconsumed messages count for User if he is a Participant of this Conversation.\n     * Rejects if User is not Participant of the Conversation.\n     * <br/>\n     * Use this method to obtain number of unread messages together with\n     * updateLastConsumedMessageIndex() instead of relying on\n     * Message indices which may have gaps. See Message.index for details.\n     * <br/>\n     * This method is semi-realtime. This means that this data will be eventually correct,\n     * but will also possibly be incorrect for a few seconds. The Chat system does not\n     * provide real time events for counter values changes.\n     * <br/>\n     * This is quite useful for any “unread messages count” badges, but is not recommended\n     * to build any core application logic based on these counters being accurate in real time.\n     * @returns {Promise<number|null>}\n     */\n\n  }, {\n    key: \"getUnconsumedMessagesCount\",\n    value: function () {\n      var _ref14 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee14() {\n        var links, url, response;\n        return _regenerator2.default.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.services.session.getSessionLinks();\n\n              case 2:\n                links = _context14.sent;\n                url = new util_1.UriBuilder(links.myChannelsUrl).arg('ChannelSid', this.sid).build();\n                _context14.next = 6;\n                return this.services.network.get(url);\n\n              case 6:\n                response = _context14.sent;\n\n                if (!(response.body.channels.length && response.body.channels[0].channel_sid == this.sid)) {\n                  _context14.next = 11;\n                  break;\n                }\n\n                if (!(typeof response.body.channels[0].unread_messages_count !== 'undefined' && response.body.channels[0].unread_messages_count != null)) {\n                  _context14.next = 10;\n                  break;\n                }\n\n                return _context14.abrupt(\"return\", response.body.channels[0].unread_messages_count);\n\n              case 10:\n                return _context14.abrupt(\"return\", null);\n\n              case 11:\n                throw new Error('Conversation is not in user conversations list');\n\n              case 12:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function getUnconsumedMessagesCount() {\n        return _ref14.apply(this, arguments);\n      }\n\n      return getUnconsumedMessagesCount;\n    }()\n    /**\n     * Join the Conversation and subscribe to its events.\n     * @returns {Promise<Conversation>}\n     */\n\n  }, {\n    key: \"join\",\n    value: function () {\n      var _ref15 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee15() {\n        return _regenerator2.default.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return this.services.session.addCommand('joinChannelV2', {\n                  channelSid: this.sid\n                });\n\n              case 2:\n                return _context15.abrupt(\"return\", this);\n\n              case 3:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function join() {\n        return _ref15.apply(this, arguments);\n      }\n\n      return join;\n    }()\n    /**\n     * Leave the Conversation.\n     * @returns {Promise<Conversation>}\n     */\n\n  }, {\n    key: \"leave\",\n    value: function () {\n      var _ref16 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee16() {\n        return _regenerator2.default.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                if (!(this.channelState.status === 'joined')) {\n                  _context16.next = 3;\n                  break;\n                }\n\n                _context16.next = 3;\n                return this.services.session.addCommand('leaveChannel', {\n                  channelSid: this.sid\n                });\n\n              case 3:\n                return _context16.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function leave() {\n        return _ref16.apply(this, arguments);\n      }\n\n      return leave;\n    }()\n    /**\n     * Remove a Participant from the Conversation. When a string is passed as the argument, it will assume that the string is an identity.\n     * @param {String|Participant} participant - identity or participant object to remove\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"removeParticipant\",\n    value: function () {\n      var _ref17 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee17(participant) {\n        return _regenerator2.default.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                if (!(participant instanceof participant_1.Participant)) {\n                  _context17.next = 4;\n                  break;\n                }\n\n                _context17.next = 3;\n                return this.participantsEntity.removeBySid(participant.sid);\n\n              case 3:\n                return _context17.abrupt(\"return\");\n\n              case 4:\n                _context17.next = 6;\n                return this.participantsEntity.removeByIdentity(participant);\n\n              case 6:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function removeParticipant(_x11) {\n        return _ref17.apply(this, arguments);\n      }\n\n      return removeParticipant;\n    }()\n    /**\n     * Send a Message in the Conversation.\n     * @param {String|FormData|Conversation#SendMediaOptions|null} message - The message body for text message,\n     * FormData or MediaOptions for media content. Sending FormData supported only with browser engine\n     * @param {any} [messageAttributes] - attributes for the message\n     * @returns {Promise<number>} new Message's index in the Conversation's messages list\n     */\n\n  }, {\n    key: \"sendMessage\",\n    value: function () {\n      var _ref18 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee18(message, messageAttributes) {\n        var _response, response;\n\n        return _regenerator2.default.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                if (!(typeof message === 'string' || message === null)) {\n                  _context18.next = 5;\n                  break;\n                }\n\n                _context18.next = 3;\n                return this.messagesEntity.send(message, messageAttributes);\n\n              case 3:\n                _response = _context18.sent;\n                return _context18.abrupt(\"return\", util_1.parseToNumber(_response.messageId));\n\n              case 5:\n                _context18.next = 7;\n                return this.messagesEntity.sendMedia(message, messageAttributes);\n\n              case 7:\n                response = _context18.sent;\n                return _context18.abrupt(\"return\", util_1.parseToNumber(response.messageId));\n\n              case 9:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function sendMessage(_x12, _x13) {\n        return _ref18.apply(this, arguments);\n      }\n\n      return sendMessage;\n    }()\n    /**\n     * Set last consumed Conversation's Message index to last known Message's index in this Conversation.\n     * @returns {Promise<number>} resulting unread messages count in the conversation\n     */\n\n  }, {\n    key: \"setAllMessagesConsumed\",\n    value: function () {\n      var _ref19 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee19() {\n        var messagesPage;\n        return _regenerator2.default.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                _context19.next = 2;\n                return this._subscribeStreams();\n\n              case 2:\n                _context19.next = 4;\n                return this.getMessages(1);\n\n              case 4:\n                messagesPage = _context19.sent;\n\n                if (!(messagesPage.items.length > 0)) {\n                  _context19.next = 7;\n                  break;\n                }\n\n                return _context19.abrupt(\"return\", this.advanceLastConsumedMessageIndex(messagesPage.items[0].index));\n\n              case 7:\n                return _context19.abrupt(\"return\", _promise2.default.resolve(0));\n\n              case 8:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function setAllMessagesConsumed() {\n        return _ref19.apply(this, arguments);\n      }\n\n      return setAllMessagesConsumed;\n    }()\n    /**\n     * Set all messages in the conversation unread.\n     * @returns {Promise<number>} resulting unread messages count in the conversation\n     */\n\n  }, {\n    key: \"setNoMessagesConsumed\",\n    value: function () {\n      var _ref20 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee20() {\n        return _regenerator2.default.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                _context20.next = 2;\n                return this._subscribeStreams();\n\n              case 2:\n                return _context20.abrupt(\"return\", this.services.consumptionHorizon.updateLastConsumedMessageIndexForConversation(this.sid, null));\n\n              case 3:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function setNoMessagesConsumed() {\n        return _ref20.apply(this, arguments);\n      }\n\n      return setNoMessagesConsumed;\n    }()\n    /**\n     * Set User Notification level for this conversation.\n     * @param {Conversation#NotificationLevel} notificationLevel - The new user notification level\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"setUserNotificationLevel\",\n    value: function () {\n      var _ref21 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee21(notificationLevel) {\n        return _regenerator2.default.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                _context21.next = 2;\n                return this.services.session.addCommand('editNotificationLevel', {\n                  channelSid: this.sid,\n                  notificationLevel: notificationLevel\n                });\n\n              case 2:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function setUserNotificationLevel(_x14) {\n        return _ref21.apply(this, arguments);\n      }\n\n      return setUserNotificationLevel;\n    }()\n    /**\n     * Send a notification to the server indicating that this Client is currently typing in this Conversation.\n     * Typing ended notification is sent after a while automatically, but by calling again this method you ensure typing ended is not received.\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"typing\",\n    value: function typing() {\n      return this.services.typingIndicator.send(this.sid);\n    }\n    /**\n     * Update the Conversation's attributes.\n     * @param {any} attributes - The new attributes object\n     * @returns {Promise<Conversation>}\n     */\n\n  }, {\n    key: \"updateAttributes\",\n    value: function () {\n      var _ref22 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee22(attributes) {\n        return _regenerator2.default.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.next = 2;\n                return this.services.session.addCommand('editAttributes', {\n                  channelSid: this.sid,\n                  attributes: (0, _stringify2.default)(attributes)\n                });\n\n              case 2:\n                return _context22.abrupt(\"return\", this);\n\n              case 3:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function updateAttributes(_x15) {\n        return _ref22.apply(this, arguments);\n      }\n\n      return updateAttributes;\n    }()\n    /**\n     * Update the Conversation's friendlyName.\n     * @param {String|null} name - The new Conversation friendlyName\n     * @returns {Promise<Conversation>}\n     */\n\n  }, {\n    key: \"updateFriendlyName\",\n    value: function () {\n      var _ref23 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee23(name) {\n        return _regenerator2.default.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                if (!(this.channelState.friendlyName !== name)) {\n                  _context23.next = 3;\n                  break;\n                }\n\n                _context23.next = 3;\n                return this.services.session.addCommand('editFriendlyName', {\n                  channelSid: this.sid,\n                  friendlyName: name\n                });\n\n              case 3:\n                return _context23.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function updateFriendlyName(_x16) {\n        return _ref23.apply(this, arguments);\n      }\n\n      return updateFriendlyName;\n    }()\n    /**\n     * Set last consumed Conversation's Message index to current consumption horizon.\n     * @param {Number|null} index - Message index to set as last read.\n     * If null provided, then the behavior is identical to {@link Conversation#setNoMessagesConsumed}\n     * @returns {Promise<number>} resulting unread messages count in the conversation\n     */\n\n  }, {\n    key: \"updateLastConsumedMessageIndex\",\n    value: function () {\n      var _ref24 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee24(index) {\n        return _regenerator2.default.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                _context24.next = 2;\n                return this._subscribeStreams();\n\n              case 2:\n                return _context24.abrupt(\"return\", this.services.consumptionHorizon.updateLastConsumedMessageIndexForConversation(this.sid, index));\n\n              case 3:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      function updateLastConsumedMessageIndex(_x17) {\n        return _ref24.apply(this, arguments);\n      }\n\n      return updateLastConsumedMessageIndex;\n    }()\n  }, {\n    key: \"status\",\n    get: function get() {\n      return this.channelState.status;\n    }\n  }, {\n    key: \"friendlyName\",\n    get: function get() {\n      return this.channelState.friendlyName;\n    }\n  }, {\n    key: \"dateUpdated\",\n    get: function get() {\n      return this.channelState.dateUpdated;\n    }\n  }, {\n    key: \"dateCreated\",\n    get: function get() {\n      return this.channelState.dateCreated;\n    }\n  }, {\n    key: \"createdBy\",\n    get: function get() {\n      return this.channelState.createdBy;\n    }\n  }, {\n    key: \"attributes\",\n    get: function get() {\n      return this.channelState.attributes;\n    }\n  }, {\n    key: \"lastConsumedMessageIndex\",\n    get: function get() {\n      return this.channelState.lastConsumedMessageIndex;\n    }\n  }, {\n    key: \"lastMessage\",\n    get: function get() {\n      return this.channelState.lastMessage;\n    }\n  }, {\n    key: \"notificationLevel\",\n    get: function get() {\n      return this.channelState.notificationLevel;\n    }\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this.channelState.state;\n    }\n  }], [{\n    key: \"preprocessUpdate\",\n    value: function preprocessUpdate(update, conversationSid) {\n      try {\n        if (typeof update.attributes === 'string') {\n          update.attributes = JSON.parse(update.attributes);\n        } else if (update.attributes) {\n          (0, _stringify2.default)(update.attributes);\n        }\n      } catch (e) {\n        log.warn('Retrieved malformed attributes from the server for conversation: ' + conversationSid);\n        update.attributes = {};\n      }\n\n      try {\n        if (update.dateCreated) {\n          update.dateCreated = new Date(update.dateCreated);\n        }\n      } catch (e) {\n        log.warn('Retrieved malformed dateCreated from the server for conversation: ' + conversationSid);\n        delete update.dateCreated;\n      }\n\n      try {\n        if (update.dateUpdated) {\n          update.dateUpdated = new Date(update.dateUpdated);\n        }\n      } catch (e) {\n        log.warn('Retrieved malformed dateUpdated from the server for conversation: ' + conversationSid);\n        delete update.dateUpdated;\n      }\n\n      try {\n        if (update.lastMessage && update.lastMessage.timestamp) {\n          update.lastMessage.timestamp = new Date(update.lastMessage.timestamp);\n        }\n      } catch (e) {\n        log.warn('Retrieved malformed lastMessage.timestamp from the server for conversation: ' + conversationSid);\n        delete update.lastMessage.timestamp;\n      }\n    }\n  }]);\n  return Conversation;\n}(events_1.EventEmitter);\n\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"add\", null);\n\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.nonEmptyString, typecheck_1.nonEmptyString, ['undefined', 'object']), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String, String, Object]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"addNonChatParticipant\", null);\n\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.nonNegativeInteger), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"advanceLastConsumedMessageIndex\", null);\n\n__decorate([typecheck_1.asyncTypeCheck(['undefined', typecheck_1.nonNegativeInteger], ['undefined', typecheck_1.nonNegativeInteger], ['undefined', typecheck_1.literal('backwards', 'forward')]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number, Number, String]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"getMessages\", null);\n\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"getParticipantBySid\", null);\n\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"getParticipantByIdentity\", null);\n\n__decorate([typecheck_1.asyncTypeCheck([typecheck_1.nonEmptyString, participant_1.Participant]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"removeParticipant\", null);\n\n__decorate([typecheck_1.asyncTypeCheck(['string', 'object', typecheck_1.literal(null)], ['undefined', 'string', 'number', 'boolean', 'object', typecheck_1.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object, Object]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"sendMessage\", null);\n\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.literal('default', 'muted')), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"setUserNotificationLevel\", null);\n\n__decorate([typecheck_1.asyncTypeCheck(['string', 'number', 'boolean', 'object', typecheck_1.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"updateAttributes\", null);\n\n__decorate([typecheck_1.asyncTypeCheck(['string', typecheck_1.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"updateFriendlyName\", null);\n\n__decorate([typecheck_1.asyncTypeCheck([typecheck_1.literal(null), typecheck_1.nonNegativeInteger]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"updateLastConsumedMessageIndex\", null);\n\nexports.Conversation = Conversation;\n/**\n * Fired when a Participant has joined the Conversation.\n * @event Conversation#participantJoined\n * @type {Participant}\n */\n\n/**\n * Fired when a Participant has left the Conversation.\n * @event Conversation#participantLeft\n * @type {Participant}\n */\n\n/**\n * Fired when a Participant's fields has been updated.\n * @event Conversation#participantUpdated\n * @type {Object}\n * @property {Participant} participant - Updated Participant\n * @property {Participant#UpdateReason[]} updateReasons - Array of Participant's updated event reasons\n */\n\n/**\n * Fired when a new Message has been added to the Conversation.\n * @event Conversation#messageAdded\n * @type {Message}\n */\n\n/**\n * Fired when Message is removed from Conversation's message list.\n * @event Conversation#messageRemoved\n * @type {Message}\n */\n\n/**\n * Fired when an existing Message's fields are updated with new values.\n * @event Conversation#messageUpdated\n * @type {Object}\n * @property {Message} message - Updated Message\n * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons\n */\n\n/**\n * Fired when a Participant has stopped typing.\n * @event Conversation#typingEnded\n * @type {Participant}\n */\n\n/**\n * Fired when a Participant has started typing.\n * @event Conversation#typingStarted\n * @type {Participant}\n */\n\n/**\n * Fired when a Conversation's attributes or metadata have been updated.\n * @event Conversation#updated\n * @type {Object}\n * @property {Conversation} conversation - Updated Conversation\n * @property {Conversation#UpdateReason[]} updateReasons - Array of Conversation's updated event reasons\n */\n\n/**\n * Fired when the Conversation was destroyed or currently logged in User has left private Conversation\n * @event Conversation#removed\n * @type {Conversation}\n */","map":{"version":3,"sources":["/Users/stefanpjanic/Desktop/mango_dev/node_modules/@twilio/conversations/browser/conversation.js"],"names":["_keys","require","_keys2","_interopRequireDefault","_getIterator2","_getIterator3","_toConsumableArray2","_toConsumableArray3","_set","_set2","_regenerator","_regenerator2","_promise","_promise2","_asyncToGenerator2","_asyncToGenerator3","_map","_map2","_stringify","_stringify2","_isInteger","_isInteger2","_getPrototypeOf","_getPrototypeOf2","_classCallCheck2","_classCallCheck3","_createClass2","_createClass3","_possibleConstructorReturn2","_possibleConstructorReturn3","_inherits2","_inherits3","_metadata","_metadata2","_defineProperty","_defineProperty2","_typeof2","_typeof3","_getOwnPropertyDescriptor","_getOwnPropertyDescriptor2","obj","__esModule","default","__decorate","undefined","decorators","target","key","desc","c","arguments","length","r","d","Reflect","decorate","i","__metadata","k","v","Object","defineProperty","exports","value","Conversation","events_1","logger_1","participants_1","participant_1","messages_1","util_1","typecheck_1","log","Logger","scope","fieldMappings","lastMessage","attributes","createdBy","dateCreated","dateUpdated","friendlyName","lastConsumedMessageIndex","notificationLevel","sid","status","state","parseTime","timeString","Date","e","_events_1$EventEmitte","services","descriptor","_this","__proto__","call","Error","entityName","channel","channelState","participants","participantsEntity","Participants","on","emit","bind","args","messagesEntity","Messages","message","_onMessageAdded","_subscribe","_this2","entityPromise","syncClient","document","id","mode","then","entity","_update","catch","err","connectionState","error","debug","_ref","mark","_callee","messagesObjectName","rosterObjectName","wrap","_callee$","_context","prev","next","trace","messages","roster","all","subscribe","t0","stop","_subscribeStreams","apply","_ref2","_callee2","_callee2$","_context2","close","abrupt","unsubscribe","_unsubscribe","_setStatus","source","_this3","statusSource","_statusSource","update","_a","_b","_c","_d","_e","preprocessUpdate","updateReasons","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","done","localKey","add","isDeepEqual","index","timestamp","getTime","isDate","keysMatchAsDates","keysMatchAsNonDates","return","size","conversation","concat","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","values","_step2","participant","identity","author","_endTyping","_ref3","_callee3","_callee3$","_context3","_x","_ref4","_callee4","proxyAddress","address","_callee4$","_context4","addNonChatParticipant","_x3","_x4","_ref5","_callee5","_callee5$","_context5","consumptionHorizon","advanceLastConsumedMessageIndexForConversation","advanceLastConsumedMessageIndex","_x5","_ref6","_callee6","_callee6$","_context6","session","addCommand","channelSid","_delete","_ref7","_callee7","_callee7$","_context7","getAttributes","_ref8","_callee8","pageSize","anchor","direction","_callee8$","_context8","getMessages","_x6","_x7","_x8","_ref9","_callee9","_callee9$","_context9","getParticipants","_ref10","_callee10","links","url","response","_callee10$","_context10","getSessionLinks","sent","UriBuilder","publicChannelsUrl","path","build","network","get","body","members_count","getParticipantsCount","_ref11","_callee11","participantSid","_callee11$","_context11","getParticipantBySid","_x9","_ref12","_callee12","_callee12$","_context12","getParticipantByIdentity","_x10","_ref13","_callee13","_callee13$","_context13","messages_count","getMessagesCount","_ref14","_callee14","_callee14$","_context14","myChannelsUrl","arg","channels","channel_sid","unread_messages_count","getUnconsumedMessagesCount","_ref15","_callee15","_callee15$","_context15","join","_ref16","_callee16","_callee16$","_context16","leave","_ref17","_callee17","_callee17$","_context17","Participant","removeBySid","removeByIdentity","removeParticipant","_x11","_ref18","_callee18","messageAttributes","_response","_callee18$","_context18","send","parseToNumber","messageId","sendMedia","sendMessage","_x12","_x13","_ref19","_callee19","messagesPage","_callee19$","_context19","items","resolve","setAllMessagesConsumed","_ref20","_callee20","_callee20$","_context20","updateLastConsumedMessageIndexForConversation","setNoMessagesConsumed","_ref21","_callee21","_callee21$","_context21","setUserNotificationLevel","_x14","typing","typingIndicator","_ref22","_callee22","_callee22$","_context22","updateAttributes","_x15","_ref23","_callee23","name","_callee23$","_context23","updateFriendlyName","_x16","_ref24","_callee24","_callee24$","_context24","updateLastConsumedMessageIndex","_x17","conversationSid","JSON","parse","warn","EventEmitter","asyncTypeCheck","nonEmptyString","Function","String","prototype","nonNegativeInteger","Number","literal"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _keys = require(\"babel-runtime/core-js/object/keys\");\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _toConsumableArray2 = require(\"babel-runtime/helpers/toConsumableArray\");\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _set = require(\"babel-runtime/core-js/set\");\n\nvar _set2 = _interopRequireDefault(_set);\n\nvar _regenerator = require(\"babel-runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _asyncToGenerator2 = require(\"babel-runtime/helpers/asyncToGenerator\");\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _map = require(\"babel-runtime/core-js/map\");\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _stringify = require(\"babel-runtime/core-js/json/stringify\");\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _isInteger = require(\"babel-runtime/core-js/number/is-integer\");\n\nvar _isInteger2 = _interopRequireDefault(_isInteger);\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _metadata = require(\"babel-runtime/core-js/reflect/metadata\");\n\nvar _metadata2 = _interopRequireDefault(_metadata);\n\nvar _defineProperty = require(\"babel-runtime/core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _getOwnPropertyDescriptor = require(\"babel-runtime/core-js/object/get-own-property-descriptor\");\n\nvar _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = (0, _getOwnPropertyDescriptor2.default)(target, key) : desc,\n        d;\n    if ((typeof Reflect === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    }return c > 3 && r && (0, _defineProperty2.default)(target, key, r), r;\n};\nvar __metadata = undefined && undefined.__metadata || function (k, v) {\n    if ((typeof Reflect === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(Reflect)) === \"object\" && typeof _metadata2.default === \"function\") return (0, _metadata2.default)(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Conversation = void 0;\nvar events_1 = require(\"events\");\nvar logger_1 = require(\"./logger\");\nvar participants_1 = require(\"./data/participants\");\nvar participant_1 = require(\"./participant\");\nvar messages_1 = require(\"./data/messages\");\nvar util_1 = require(\"./util\");\nvar typecheck_1 = require(\"./util/typecheck\");\nvar log = logger_1.Logger.scope('Conversation');\nvar fieldMappings = {\n    lastMessage: 'lastMessage',\n    attributes: 'attributes',\n    createdBy: 'createdBy',\n    dateCreated: 'dateCreated',\n    dateUpdated: 'dateUpdated',\n    friendlyName: 'friendlyName',\n    lastConsumedMessageIndex: 'lastConsumedMessageIndex',\n    notificationLevel: 'notificationLevel',\n    sid: 'sid',\n    status: 'status',\n    state: 'state'\n};\nfunction parseTime(timeString) {\n    try {\n        return new Date(timeString);\n    } catch (e) {\n        return null;\n    }\n}\n// todo @property {String} uniqueName - The Conversation's unique name (tag)\n/**\n * @classdesc A Conversation represents communication between multiple Conversations Clients\n * @property {any} attributes - The Conversation's custom attributes\n * @property {String} createdBy - The identity of the User that created this Conversation\n * @property {Date} dateCreated - The Date this Conversation was created\n * @property {Date} dateUpdated - The Date this Conversation was last updated\n * @property {String} [friendlyName] - The Conversation's name\n * @property {Number} lastConsumedMessageIndex - Index of the last Message the User has consumed in this Conversation\n * @property {Conversation#LastMessage} lastMessage - Last Message sent to this Conversation\n * @property {Conversation#NotificationLevel} notificationLevel - User Notification level for this Conversation\n * @property {String} sid - The Conversation's unique system identifier\n * @property {Conversation#Status} status - The Conversation's status\n * @property {Conversation#State} state - The Channel's state\n * @fires Conversation#participantJoined\n * @fires Conversation#participantLeft\n * @fires Conversation#participantUpdated\n * @fires Conversation#messageAdded\n * @fires Conversation#messageRemoved\n * @fires Conversation#messageUpdated\n * @fires Conversation#typingEnded\n * @fires Conversation#typingStarted\n * @fires Conversation#updated\n * @fires Conversation#removed\n */\n\nvar Conversation = function (_events_1$EventEmitte) {\n    (0, _inherits3.default)(Conversation, _events_1$EventEmitte);\n\n    /**\n     * These options can be passed to {@link Conversation#sendMessage}.\n     * @typedef {Object} Conversation#SendMediaOptions\n     * @property {String} contentType - content type of media\n     * @property {String | Buffer} media - content to post\n     */\n    // todo 'uniqueName' |\n    /**\n     * The update reason for <code>updated</code> event emitted on Conversation\n     * @typedef {('attributes' | 'createdBy' | 'dateCreated' | 'dateUpdated' |\n      'friendlyName' | 'lastConsumedMessageIndex' | 'state' | 'status' | 'uniqueName' | 'lastMessage' |\n      'notificationLevel' )} Conversation#UpdateReason\n     */\n    /**\n     * The status of the Conversation, relative to the Client: whether the Conversation has been <code>joined</code> or the Client is\n     * <code>notParticipating</code> in the Conversation.\n     * @typedef {('notParticipating' | 'joined')} Conversation#Status\n     */\n    /**\n     * The User's Notification level for Conversation, determines whether the currently logged-in User will receive\n     * pushes for events in this Conversation. Can be either <code>muted</code> or <code>default</code>,\n     * where <code>default</code> defers to global Service push configuration.\n     * @typedef {('default' | 'muted')} Conversation#NotificationLevel\n     */\n    /**\n     * The Channel's state. Set to undefined if the channel is not a conversation.\n     * @typedef {Object | undefined} Conversation#State\n     * @property {('active' | 'inactive' | 'closed')} current - the current state\n     * @property {Date} dateUpdated - date at which the latest channel state update happened\n     */\n    function Conversation(services, descriptor, sid) {\n        (0, _classCallCheck3.default)(this, Conversation);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (Conversation.__proto__ || (0, _getPrototypeOf2.default)(Conversation)).call(this));\n\n        var attributes = descriptor.attributes || {};\n        var createdBy = descriptor.createdBy;\n        var dateCreated = parseTime(descriptor.dateCreated);\n        var dateUpdated = parseTime(descriptor.dateUpdated);\n        var friendlyName = descriptor.friendlyName || null;\n        var lastConsumedMessageIndex = (0, _isInteger2.default)(descriptor.lastConsumedMessageIndex) ? descriptor.lastConsumedMessageIndex : null;\n        //let uniqueName = descriptor.uniqueName || null;\n        try {\n            (0, _stringify2.default)(attributes);\n        } catch (e) {\n            throw new Error('Attributes must be a valid JSON object.');\n        }\n        _this.services = services;\n        _this.sid = sid;\n        _this.entityName = descriptor.channel;\n        _this.channelState = {\n            //uniqueName,\n            status: 'notParticipating',\n            attributes: attributes,\n            createdBy: createdBy,\n            dateCreated: dateCreated,\n            dateUpdated: dateUpdated,\n            friendlyName: friendlyName,\n            lastConsumedMessageIndex: lastConsumedMessageIndex\n        };\n        if (descriptor.notificationLevel) {\n            _this.channelState.notificationLevel = descriptor.notificationLevel;\n        }\n        _this.participants = new _map2.default();\n        _this.participantsEntity = new participants_1.Participants(_this, _this.services, _this.participants);\n        _this.participantsEntity.on('participantJoined', _this.emit.bind(_this, 'participantJoined'));\n        _this.participantsEntity.on('participantLeft', _this.emit.bind(_this, 'participantLeft'));\n        _this.participantsEntity.on('participantUpdated', function (args) {\n            return _this.emit('participantUpdated', args);\n        });\n        _this.messagesEntity = new messages_1.Messages(_this, services);\n        _this.messagesEntity.on('messageAdded', function (message) {\n            return _this._onMessageAdded(message);\n        });\n        _this.messagesEntity.on('messageUpdated', function (args) {\n            return _this.emit('messageUpdated', args);\n        });\n        _this.messagesEntity.on('messageRemoved', _this.emit.bind(_this, 'messageRemoved'));\n        return _this;\n    }\n\n    (0, _createClass3.default)(Conversation, [{\n        key: \"_subscribe\",\n\n        /**\n         * The Conversation's last message's information.\n         * @typedef {Object} Conversation#LastMessage\n         * @property {Number} index - Message's index\n         * @property {Date} dateCreated - Message's creation date\n         */\n        /**\n         * Load and Subscribe to this Conversation and do not subscribe to its Participants and Messages.\n         * This or _subscribeStreams will need to be called before any events on Conversation will fire.\n         * @returns {Promise}\n         * @private\n         */\n        value: function _subscribe() {\n            var _this2 = this;\n\n            if (this.entityPromise) {\n                return this.entityPromise;\n            }\n            return this.entityPromise = this.entityPromise || this.services.syncClient.document({ id: this.entityName, mode: 'open_existing' }).then(function (entity) {\n                _this2.entity = entity;\n                _this2.entity.on('updated', function (args) {\n                    _this2._update(args.value);\n                });\n                _this2.entity.on('removed', function () {\n                    return _this2.emit('removed', _this2);\n                });\n                _this2._update(_this2.entity.value);\n                return entity;\n            }).catch(function (err) {\n                _this2.entity = null;\n                _this2.entityPromise = null;\n                if (_this2.services.syncClient.connectionState != 'disconnected') {\n                    log.error('Failed to get conversation object', err);\n                }\n                log.debug('ERROR: Failed to get conversation object', err);\n                throw err;\n            });\n        }\n        /**\n         * Load the attributes of this Conversation and instantiate its Participants and Messages.\n         * This or _subscribe will need to be called before any events on Conversation will fire.\n         * This will need to be called before any events on Participants or Messages will fire\n         * @returns {Promise}\n         * @private\n         */\n\n    }, {\n        key: \"_subscribeStreams\",\n        value: function () {\n            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {\n                var messagesObjectName, rosterObjectName;\n                return _regenerator2.default.wrap(function _callee$(_context) {\n                    while (1) {\n                        switch (_context.prev = _context.next) {\n                            case 0:\n                                _context.prev = 0;\n                                _context.next = 3;\n                                return this._subscribe();\n\n                            case 3:\n                                log.trace('_subscribeStreams, this.entity.value=', this.entity.value);\n                                messagesObjectName = this.entity.value.messages;\n                                rosterObjectName = this.entity.value.roster;\n                                _context.next = 8;\n                                return _promise2.default.all([this.messagesEntity.subscribe(messagesObjectName), this.participantsEntity.subscribe(rosterObjectName)]);\n\n                            case 8:\n                                _context.next = 15;\n                                break;\n\n                            case 10:\n                                _context.prev = 10;\n                                _context.t0 = _context[\"catch\"](0);\n\n                                if (this.services.syncClient.connectionState !== 'disconnected') {\n                                    log.error('Failed to subscribe on conversation objects', this.sid, _context.t0);\n                                }\n                                log.debug('ERROR: Failed to subscribe on conversation objects', this.sid, _context.t0);\n                                throw _context.t0;\n\n                            case 15:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }\n                }, _callee, this, [[0, 10]]);\n            }));\n\n            function _subscribeStreams() {\n                return _ref.apply(this, arguments);\n            }\n\n            return _subscribeStreams;\n        }()\n        /**\n         * Stop listening for and firing events on this Conversation.\n         * @returns {Promise}\n         * @private\n         */\n\n    }, {\n        key: \"_unsubscribe\",\n        value: function () {\n            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {\n                return _regenerator2.default.wrap(function _callee2$(_context2) {\n                    while (1) {\n                        switch (_context2.prev = _context2.next) {\n                            case 0:\n                                if (!this.entity) {\n                                    _context2.next = 5;\n                                    break;\n                                }\n\n                                _context2.next = 3;\n                                return this.entity.close();\n\n                            case 3:\n                                this.entity = null;\n                                this.entityPromise = null;\n\n                            case 5:\n                                return _context2.abrupt(\"return\", _promise2.default.all([this.participantsEntity.unsubscribe(), this.messagesEntity.unsubscribe()]));\n\n                            case 6:\n                            case \"end\":\n                                return _context2.stop();\n                        }\n                    }\n                }, _callee2, this);\n            }));\n\n            function _unsubscribe() {\n                return _ref2.apply(this, arguments);\n            }\n\n            return _unsubscribe;\n        }()\n        /**\n         * Set conversation status\n         * @private\n         */\n\n    }, {\n        key: \"_setStatus\",\n        value: function _setStatus(status, source) {\n            var _this3 = this;\n\n            this.statusSource = source;\n            if (this.channelState.status === status) {\n                return;\n            }\n            this.channelState.status = status;\n            if (status === 'joined') {\n                this._subscribeStreams().catch(function (err) {\n                    log.debug('ERROR while setting conversation status ' + status, err);\n                    if (_this3.services.syncClient.connectionState !== 'disconnected') {\n                        throw err;\n                    }\n                });\n                // } else if (status === 'invited') {\n                //   this._subscribe()\n                //       .catch(err => {\n                //         log.debug('ERROR while setting conversation status ' + status, err);\n                //         if (this.services.syncClient.connectionState !== 'disconnected') {\n                //           throw err;\n                //         }\n                //       });\n            } else if (this.entityPromise) {\n                this._unsubscribe().catch(function (err) {\n                    log.debug('ERROR while setting conversation status ' + status, err);\n                    if (_this3.services.syncClient.connectionState !== 'disconnected') {\n                        throw err;\n                    }\n                });\n            }\n        }\n        /**\n         * If conversation's status update source\n         * @private\n         * @return {Conversations.DataSource}\n         */\n\n    }, {\n        key: \"_statusSource\",\n        value: function _statusSource() {\n            return this.statusSource;\n        }\n    }, {\n        key: \"_update\",\n\n        /**\n         * Updates local conversation object with new values\n         * @private\n         */\n        value: function _update(update) {\n            var _a, _b, _c, _d, _e;\n            log.trace('_update', update);\n            Conversation.preprocessUpdate(update, this.sid);\n            var updateReasons = new _set2.default();\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = (0, _getIterator3.default)((0, _keys2.default)(update)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var key = _step.value;\n\n                    var localKey = fieldMappings[key];\n                    if (!localKey) {\n                        continue;\n                    }\n                    switch (localKey) {\n                        case fieldMappings.status:\n                            if (!update.status || update.status === 'unknown' || this.channelState.status === update.status) {\n                                break;\n                            }\n                            this.channelState.status = update.status;\n                            updateReasons.add(localKey);\n                            break;\n                        case fieldMappings.attributes:\n                            if (util_1.isDeepEqual(this.channelState.attributes, update.attributes)) {\n                                break;\n                            }\n                            this.channelState.attributes = update.attributes;\n                            updateReasons.add(localKey);\n                            break;\n                        case fieldMappings.lastConsumedMessageIndex:\n                            if (update.lastConsumedMessageIndex === undefined || update.lastConsumedMessageIndex === this.channelState.lastConsumedMessageIndex) {\n                                break;\n                            }\n                            this.channelState.lastConsumedMessageIndex = update.lastConsumedMessageIndex;\n                            updateReasons.add(localKey);\n                            break;\n                        case fieldMappings.lastMessage:\n                            if (this.channelState.lastMessage && !update.lastMessage) {\n                                delete this.channelState.lastMessage;\n                                updateReasons.add(localKey);\n                                break;\n                            }\n                            this.channelState.lastMessage = this.channelState.lastMessage || {};\n                            if (((_a = update.lastMessage) === null || _a === void 0 ? void 0 : _a.index) !== undefined && update.lastMessage.index !== this.channelState.lastMessage.index) {\n                                this.channelState.lastMessage.index = update.lastMessage.index;\n                                updateReasons.add(localKey);\n                            }\n                            if (((_b = update.lastMessage) === null || _b === void 0 ? void 0 : _b.timestamp) !== undefined && ((_d = (_c = this.channelState.lastMessage) === null || _c === void 0 ? void 0 : _c.dateCreated) === null || _d === void 0 ? void 0 : _d.getTime()) !== update.lastMessage.timestamp.getTime()) {\n                                this.channelState.lastMessage.dateCreated = update.lastMessage.timestamp;\n                                updateReasons.add(localKey);\n                            }\n                            if (util_1.isDeepEqual(this.channelState.lastMessage, {})) {\n                                delete this.channelState.lastMessage;\n                            }\n                            break;\n                        case fieldMappings.state:\n                            var state = update.state || undefined;\n                            if (state !== undefined) {\n                                state.dateUpdated = new Date(state.dateUpdated);\n                            }\n                            if (util_1.isDeepEqual(this.channelState.state, state)) {\n                                break;\n                            }\n                            this.channelState.state = state;\n                            updateReasons.add(localKey);\n                            break;\n                        default:\n                            var isDate = update[key] instanceof Date;\n                            var keysMatchAsDates = isDate && ((_e = this.channelState[localKey]) === null || _e === void 0 ? void 0 : _e.getTime()) === update[key].getTime();\n                            var keysMatchAsNonDates = !isDate && this[localKey] === update[key];\n                            if (keysMatchAsDates || keysMatchAsNonDates) {\n                                break;\n                            }\n                            this.channelState[localKey] = update[key];\n                            updateReasons.add(localKey);\n                    }\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n\n            if (updateReasons.size > 0) {\n                this.emit('updated', { conversation: this, updateReasons: [].concat((0, _toConsumableArray3.default)(updateReasons)) });\n            }\n        }\n        /**\n         * @private\n         */\n\n    }, {\n        key: \"_onMessageAdded\",\n        value: function _onMessageAdded(message) {\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n                for (var _iterator2 = (0, _getIterator3.default)(this.participants.values()), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                    var participant = _step2.value;\n\n                    if (participant.identity === message.author) {\n                        participant._endTyping();\n                        break;\n                    }\n                }\n            } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                        _iterator2.return();\n                    }\n                } finally {\n                    if (_didIteratorError2) {\n                        throw _iteratorError2;\n                    }\n                }\n            }\n\n            this.emit('messageAdded', message);\n        }\n        /**\n         * Add a participant to the Conversation by its Identity.\n         * @param {String} identity - Identity of the Client to add\n         * @returns {Promise<void>}\n         */\n\n    }, {\n        key: \"add\",\n        value: function () {\n            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(identity) {\n                return _regenerator2.default.wrap(function _callee3$(_context3) {\n                    while (1) {\n                        switch (_context3.prev = _context3.next) {\n                            case 0:\n                                return _context3.abrupt(\"return\", this.participantsEntity.add(identity));\n\n                            case 1:\n                            case \"end\":\n                                return _context3.stop();\n                        }\n                    }\n                }, _callee3, this);\n            }));\n\n            function add(_x) {\n                return _ref3.apply(this, arguments);\n            }\n\n            return add;\n        }()\n        /**\n         * Add a non-chat participant to the Conversation.\n         *\n         * @param {String} proxyAddress Proxy (Twilio) address of the participant\n         * @param {String} address User address of the participant\n         * @param {any} [attributes] Attributes to be attached to the participant\n         * @returns {Promise<void>}\n         */\n\n    }, {\n        key: \"addNonChatParticipant\",\n        value: function () {\n            var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(proxyAddress, address) {\n                var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n                return _regenerator2.default.wrap(function _callee4$(_context4) {\n                    while (1) {\n                        switch (_context4.prev = _context4.next) {\n                            case 0:\n                                return _context4.abrupt(\"return\", this.participantsEntity.addNonChatParticipant(proxyAddress, address, attributes));\n\n                            case 1:\n                            case \"end\":\n                                return _context4.stop();\n                        }\n                    }\n                }, _callee4, this);\n            }));\n\n            function addNonChatParticipant(_x3, _x4) {\n                return _ref4.apply(this, arguments);\n            }\n\n            return addNonChatParticipant;\n        }()\n        /**\n         * Advance last consumed Conversation's Message index to current consumption horizon.\n         * Rejects if User is not Participant of Conversation.\n         * Last consumed Message index is updated only if new index value is higher than previous.\n         * @param {Number} index - Message index to advance to as last read\n         * @returns {Promise<number>} resulting unread messages count in the conversation\n         */\n\n    }, {\n        key: \"advanceLastConsumedMessageIndex\",\n        value: function () {\n            var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(index) {\n                return _regenerator2.default.wrap(function _callee5$(_context5) {\n                    while (1) {\n                        switch (_context5.prev = _context5.next) {\n                            case 0:\n                                _context5.next = 2;\n                                return this._subscribeStreams();\n\n                            case 2:\n                                return _context5.abrupt(\"return\", this.services.consumptionHorizon.advanceLastConsumedMessageIndexForConversation(this.sid, index, this.lastConsumedMessageIndex));\n\n                            case 3:\n                            case \"end\":\n                                return _context5.stop();\n                        }\n                    }\n                }, _callee5, this);\n            }));\n\n            function advanceLastConsumedMessageIndex(_x5) {\n                return _ref5.apply(this, arguments);\n            }\n\n            return advanceLastConsumedMessageIndex;\n        }()\n        /**\n         * Delete the Conversation and unsubscribe from its events.\n         * @returns {Promise<Conversation>}\n         */\n\n    }, {\n        key: \"delete\",\n        value: function () {\n            var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6() {\n                return _regenerator2.default.wrap(function _callee6$(_context6) {\n                    while (1) {\n                        switch (_context6.prev = _context6.next) {\n                            case 0:\n                                _context6.next = 2;\n                                return this.services.session.addCommand('destroyChannel', {\n                                    channelSid: this.sid\n                                });\n\n                            case 2:\n                                return _context6.abrupt(\"return\", this);\n\n                            case 3:\n                            case \"end\":\n                                return _context6.stop();\n                        }\n                    }\n                }, _callee6, this);\n            }));\n\n            function _delete() {\n                return _ref6.apply(this, arguments);\n            }\n\n            return _delete;\n        }()\n        /**\n         * Get the custom attributes of this Conversation.\n         * @returns {Promise<any>} attributes of this Conversation\n         */\n\n    }, {\n        key: \"getAttributes\",\n        value: function () {\n            var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7() {\n                return _regenerator2.default.wrap(function _callee7$(_context7) {\n                    while (1) {\n                        switch (_context7.prev = _context7.next) {\n                            case 0:\n                                _context7.next = 2;\n                                return this._subscribe();\n\n                            case 2:\n                                return _context7.abrupt(\"return\", this.attributes);\n\n                            case 3:\n                            case \"end\":\n                                return _context7.stop();\n                        }\n                    }\n                }, _callee7, this);\n            }));\n\n            function getAttributes() {\n                return _ref7.apply(this, arguments);\n            }\n\n            return getAttributes;\n        }()\n        /**\n         * Returns messages from conversation using paginator interface.\n         * @param {Number} [pageSize=30] Number of messages to return in single chunk\n         * @param {Number} [anchor] - Index of newest Message to fetch. From the end by default\n         * @param {('backwards'|'forward')} [direction=backwards] - Query direction. By default it query backwards\n         *                                                          from newer to older. 'forward' will query in opposite direction\n         * @returns {Promise<Paginator<Message>>} page of messages\n         */\n\n    }, {\n        key: \"getMessages\",\n        value: function () {\n            var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(pageSize, anchor, direction) {\n                return _regenerator2.default.wrap(function _callee8$(_context8) {\n                    while (1) {\n                        switch (_context8.prev = _context8.next) {\n                            case 0:\n                                _context8.next = 2;\n                                return this._subscribeStreams();\n\n                            case 2:\n                                return _context8.abrupt(\"return\", this.messagesEntity.getMessages(pageSize, anchor, direction));\n\n                            case 3:\n                            case \"end\":\n                                return _context8.stop();\n                        }\n                    }\n                }, _callee8, this);\n            }));\n\n            function getMessages(_x6, _x7, _x8) {\n                return _ref8.apply(this, arguments);\n            }\n\n            return getMessages;\n        }()\n        /**\n         * Get a list of all Participants joined to this Conversation.\n         * @returns {Promise<Participant[]>}\n         */\n\n    }, {\n        key: \"getParticipants\",\n        value: function () {\n            var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9() {\n                return _regenerator2.default.wrap(function _callee9$(_context9) {\n                    while (1) {\n                        switch (_context9.prev = _context9.next) {\n                            case 0:\n                                _context9.next = 2;\n                                return this._subscribeStreams();\n\n                            case 2:\n                                return _context9.abrupt(\"return\", this.participantsEntity.getParticipants());\n\n                            case 3:\n                            case \"end\":\n                                return _context9.stop();\n                        }\n                    }\n                }, _callee9, this);\n            }));\n\n            function getParticipants() {\n                return _ref9.apply(this, arguments);\n            }\n\n            return getParticipants;\n        }()\n        /**\n         * Get conversation participants count.\n         * <br/>\n         * This method is semi-realtime. This means that this data will be eventually correct,\n         * but will also possibly be incorrect for a few seconds. The Conversation system does not\n         * provide real time events for counter values changes.\n         * <br/>\n         * So this is quite useful for any UI badges, but is not recommended\n         * to build any core application logic based on these counters being accurate in real time.\n         * @returns {Promise<number>}\n         */\n\n    }, {\n        key: \"getParticipantsCount\",\n        value: function () {\n            var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10() {\n                var links, url, response;\n                return _regenerator2.default.wrap(function _callee10$(_context10) {\n                    while (1) {\n                        switch (_context10.prev = _context10.next) {\n                            case 0:\n                                _context10.next = 2;\n                                return this.services.session.getSessionLinks();\n\n                            case 2:\n                                links = _context10.sent;\n                                url = new util_1.UriBuilder(links.publicChannelsUrl).path(this.sid).build();\n                                _context10.next = 6;\n                                return this.services.network.get(url);\n\n                            case 6:\n                                response = _context10.sent;\n                                return _context10.abrupt(\"return\", response.body.members_count);\n\n                            case 8:\n                            case \"end\":\n                                return _context10.stop();\n                        }\n                    }\n                }, _callee10, this);\n            }));\n\n            function getParticipantsCount() {\n                return _ref10.apply(this, arguments);\n            }\n\n            return getParticipantsCount;\n        }()\n        /**\n         * Get a Participant by its SID.\n         * @param {String} participantSid - Participant sid\n         * @returns {Promise<Participant>}\n         */\n\n    }, {\n        key: \"getParticipantBySid\",\n        value: function () {\n            var _ref11 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee11(participantSid) {\n                return _regenerator2.default.wrap(function _callee11$(_context11) {\n                    while (1) {\n                        switch (_context11.prev = _context11.next) {\n                            case 0:\n                                return _context11.abrupt(\"return\", this.participantsEntity.getParticipantBySid(participantSid));\n\n                            case 1:\n                            case \"end\":\n                                return _context11.stop();\n                        }\n                    }\n                }, _callee11, this);\n            }));\n\n            function getParticipantBySid(_x9) {\n                return _ref11.apply(this, arguments);\n            }\n\n            return getParticipantBySid;\n        }()\n        /**\n         * Get a Participant by its identity.\n         * @param {String} identity - Participant identity\n         * @returns {Promise<Participant>}\n         */\n\n    }, {\n        key: \"getParticipantByIdentity\",\n        value: function () {\n            var _ref12 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee12(identity) {\n                return _regenerator2.default.wrap(function _callee12$(_context12) {\n                    while (1) {\n                        switch (_context12.prev = _context12.next) {\n                            case 0:\n                                return _context12.abrupt(\"return\", this.participantsEntity.getParticipantByIdentity(identity));\n\n                            case 1:\n                            case \"end\":\n                                return _context12.stop();\n                        }\n                    }\n                }, _callee12, this);\n            }));\n\n            function getParticipantByIdentity(_x10) {\n                return _ref12.apply(this, arguments);\n            }\n\n            return getParticipantByIdentity;\n        }()\n        /**\n         * Get total message count in a conversation.\n         * <br/>\n         * This method is semi-realtime. This means that this data will be eventually correct,\n         * but will also possibly be incorrect for a few seconds. The Conversations system does not\n         * provide real time events for counter values changes.\n         * <br/>\n         * So this is quite useful for any UI badges, but is not recommended\n         * to build any core application logic based on these counters being accurate in real time.\n         * @returns {Promise<number>}\n         */\n\n    }, {\n        key: \"getMessagesCount\",\n        value: function () {\n            var _ref13 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee13() {\n                var links, url, response;\n                return _regenerator2.default.wrap(function _callee13$(_context13) {\n                    while (1) {\n                        switch (_context13.prev = _context13.next) {\n                            case 0:\n                                _context13.next = 2;\n                                return this.services.session.getSessionLinks();\n\n                            case 2:\n                                links = _context13.sent;\n                                url = new util_1.UriBuilder(links.publicChannelsUrl).path(this.sid).build();\n                                _context13.next = 6;\n                                return this.services.network.get(url);\n\n                            case 6:\n                                response = _context13.sent;\n                                return _context13.abrupt(\"return\", response.body.messages_count);\n\n                            case 8:\n                            case \"end\":\n                                return _context13.stop();\n                        }\n                    }\n                }, _callee13, this);\n            }));\n\n            function getMessagesCount() {\n                return _ref13.apply(this, arguments);\n            }\n\n            return getMessagesCount;\n        }()\n        /**\n         * Get unconsumed messages count for User if he is a Participant of this Conversation.\n         * Rejects if User is not Participant of the Conversation.\n         * <br/>\n         * Use this method to obtain number of unread messages together with\n         * updateLastConsumedMessageIndex() instead of relying on\n         * Message indices which may have gaps. See Message.index for details.\n         * <br/>\n         * This method is semi-realtime. This means that this data will be eventually correct,\n         * but will also possibly be incorrect for a few seconds. The Chat system does not\n         * provide real time events for counter values changes.\n         * <br/>\n         * This is quite useful for any “unread messages count” badges, but is not recommended\n         * to build any core application logic based on these counters being accurate in real time.\n         * @returns {Promise<number|null>}\n         */\n\n    }, {\n        key: \"getUnconsumedMessagesCount\",\n        value: function () {\n            var _ref14 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee14() {\n                var links, url, response;\n                return _regenerator2.default.wrap(function _callee14$(_context14) {\n                    while (1) {\n                        switch (_context14.prev = _context14.next) {\n                            case 0:\n                                _context14.next = 2;\n                                return this.services.session.getSessionLinks();\n\n                            case 2:\n                                links = _context14.sent;\n                                url = new util_1.UriBuilder(links.myChannelsUrl).arg('ChannelSid', this.sid).build();\n                                _context14.next = 6;\n                                return this.services.network.get(url);\n\n                            case 6:\n                                response = _context14.sent;\n\n                                if (!(response.body.channels.length && response.body.channels[0].channel_sid == this.sid)) {\n                                    _context14.next = 11;\n                                    break;\n                                }\n\n                                if (!(typeof response.body.channels[0].unread_messages_count !== 'undefined' && response.body.channels[0].unread_messages_count != null)) {\n                                    _context14.next = 10;\n                                    break;\n                                }\n\n                                return _context14.abrupt(\"return\", response.body.channels[0].unread_messages_count);\n\n                            case 10:\n                                return _context14.abrupt(\"return\", null);\n\n                            case 11:\n                                throw new Error('Conversation is not in user conversations list');\n\n                            case 12:\n                            case \"end\":\n                                return _context14.stop();\n                        }\n                    }\n                }, _callee14, this);\n            }));\n\n            function getUnconsumedMessagesCount() {\n                return _ref14.apply(this, arguments);\n            }\n\n            return getUnconsumedMessagesCount;\n        }()\n        /**\n         * Join the Conversation and subscribe to its events.\n         * @returns {Promise<Conversation>}\n         */\n\n    }, {\n        key: \"join\",\n        value: function () {\n            var _ref15 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee15() {\n                return _regenerator2.default.wrap(function _callee15$(_context15) {\n                    while (1) {\n                        switch (_context15.prev = _context15.next) {\n                            case 0:\n                                _context15.next = 2;\n                                return this.services.session.addCommand('joinChannelV2', { channelSid: this.sid });\n\n                            case 2:\n                                return _context15.abrupt(\"return\", this);\n\n                            case 3:\n                            case \"end\":\n                                return _context15.stop();\n                        }\n                    }\n                }, _callee15, this);\n            }));\n\n            function join() {\n                return _ref15.apply(this, arguments);\n            }\n\n            return join;\n        }()\n        /**\n         * Leave the Conversation.\n         * @returns {Promise<Conversation>}\n         */\n\n    }, {\n        key: \"leave\",\n        value: function () {\n            var _ref16 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee16() {\n                return _regenerator2.default.wrap(function _callee16$(_context16) {\n                    while (1) {\n                        switch (_context16.prev = _context16.next) {\n                            case 0:\n                                if (!(this.channelState.status === 'joined')) {\n                                    _context16.next = 3;\n                                    break;\n                                }\n\n                                _context16.next = 3;\n                                return this.services.session.addCommand('leaveChannel', { channelSid: this.sid });\n\n                            case 3:\n                                return _context16.abrupt(\"return\", this);\n\n                            case 4:\n                            case \"end\":\n                                return _context16.stop();\n                        }\n                    }\n                }, _callee16, this);\n            }));\n\n            function leave() {\n                return _ref16.apply(this, arguments);\n            }\n\n            return leave;\n        }()\n        /**\n         * Remove a Participant from the Conversation. When a string is passed as the argument, it will assume that the string is an identity.\n         * @param {String|Participant} participant - identity or participant object to remove\n         * @returns {Promise<void>}\n         */\n\n    }, {\n        key: \"removeParticipant\",\n        value: function () {\n            var _ref17 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee17(participant) {\n                return _regenerator2.default.wrap(function _callee17$(_context17) {\n                    while (1) {\n                        switch (_context17.prev = _context17.next) {\n                            case 0:\n                                if (!(participant instanceof participant_1.Participant)) {\n                                    _context17.next = 4;\n                                    break;\n                                }\n\n                                _context17.next = 3;\n                                return this.participantsEntity.removeBySid(participant.sid);\n\n                            case 3:\n                                return _context17.abrupt(\"return\");\n\n                            case 4:\n                                _context17.next = 6;\n                                return this.participantsEntity.removeByIdentity(participant);\n\n                            case 6:\n                            case \"end\":\n                                return _context17.stop();\n                        }\n                    }\n                }, _callee17, this);\n            }));\n\n            function removeParticipant(_x11) {\n                return _ref17.apply(this, arguments);\n            }\n\n            return removeParticipant;\n        }()\n        /**\n         * Send a Message in the Conversation.\n         * @param {String|FormData|Conversation#SendMediaOptions|null} message - The message body for text message,\n         * FormData or MediaOptions for media content. Sending FormData supported only with browser engine\n         * @param {any} [messageAttributes] - attributes for the message\n         * @returns {Promise<number>} new Message's index in the Conversation's messages list\n         */\n\n    }, {\n        key: \"sendMessage\",\n        value: function () {\n            var _ref18 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee18(message, messageAttributes) {\n                var _response, response;\n\n                return _regenerator2.default.wrap(function _callee18$(_context18) {\n                    while (1) {\n                        switch (_context18.prev = _context18.next) {\n                            case 0:\n                                if (!(typeof message === 'string' || message === null)) {\n                                    _context18.next = 5;\n                                    break;\n                                }\n\n                                _context18.next = 3;\n                                return this.messagesEntity.send(message, messageAttributes);\n\n                            case 3:\n                                _response = _context18.sent;\n                                return _context18.abrupt(\"return\", util_1.parseToNumber(_response.messageId));\n\n                            case 5:\n                                _context18.next = 7;\n                                return this.messagesEntity.sendMedia(message, messageAttributes);\n\n                            case 7:\n                                response = _context18.sent;\n                                return _context18.abrupt(\"return\", util_1.parseToNumber(response.messageId));\n\n                            case 9:\n                            case \"end\":\n                                return _context18.stop();\n                        }\n                    }\n                }, _callee18, this);\n            }));\n\n            function sendMessage(_x12, _x13) {\n                return _ref18.apply(this, arguments);\n            }\n\n            return sendMessage;\n        }()\n        /**\n         * Set last consumed Conversation's Message index to last known Message's index in this Conversation.\n         * @returns {Promise<number>} resulting unread messages count in the conversation\n         */\n\n    }, {\n        key: \"setAllMessagesConsumed\",\n        value: function () {\n            var _ref19 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee19() {\n                var messagesPage;\n                return _regenerator2.default.wrap(function _callee19$(_context19) {\n                    while (1) {\n                        switch (_context19.prev = _context19.next) {\n                            case 0:\n                                _context19.next = 2;\n                                return this._subscribeStreams();\n\n                            case 2:\n                                _context19.next = 4;\n                                return this.getMessages(1);\n\n                            case 4:\n                                messagesPage = _context19.sent;\n\n                                if (!(messagesPage.items.length > 0)) {\n                                    _context19.next = 7;\n                                    break;\n                                }\n\n                                return _context19.abrupt(\"return\", this.advanceLastConsumedMessageIndex(messagesPage.items[0].index));\n\n                            case 7:\n                                return _context19.abrupt(\"return\", _promise2.default.resolve(0));\n\n                            case 8:\n                            case \"end\":\n                                return _context19.stop();\n                        }\n                    }\n                }, _callee19, this);\n            }));\n\n            function setAllMessagesConsumed() {\n                return _ref19.apply(this, arguments);\n            }\n\n            return setAllMessagesConsumed;\n        }()\n        /**\n         * Set all messages in the conversation unread.\n         * @returns {Promise<number>} resulting unread messages count in the conversation\n         */\n\n    }, {\n        key: \"setNoMessagesConsumed\",\n        value: function () {\n            var _ref20 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee20() {\n                return _regenerator2.default.wrap(function _callee20$(_context20) {\n                    while (1) {\n                        switch (_context20.prev = _context20.next) {\n                            case 0:\n                                _context20.next = 2;\n                                return this._subscribeStreams();\n\n                            case 2:\n                                return _context20.abrupt(\"return\", this.services.consumptionHorizon.updateLastConsumedMessageIndexForConversation(this.sid, null));\n\n                            case 3:\n                            case \"end\":\n                                return _context20.stop();\n                        }\n                    }\n                }, _callee20, this);\n            }));\n\n            function setNoMessagesConsumed() {\n                return _ref20.apply(this, arguments);\n            }\n\n            return setNoMessagesConsumed;\n        }()\n        /**\n         * Set User Notification level for this conversation.\n         * @param {Conversation#NotificationLevel} notificationLevel - The new user notification level\n         * @returns {Promise<void>}\n         */\n\n    }, {\n        key: \"setUserNotificationLevel\",\n        value: function () {\n            var _ref21 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee21(notificationLevel) {\n                return _regenerator2.default.wrap(function _callee21$(_context21) {\n                    while (1) {\n                        switch (_context21.prev = _context21.next) {\n                            case 0:\n                                _context21.next = 2;\n                                return this.services.session.addCommand('editNotificationLevel', { channelSid: this.sid, notificationLevel: notificationLevel });\n\n                            case 2:\n                            case \"end\":\n                                return _context21.stop();\n                        }\n                    }\n                }, _callee21, this);\n            }));\n\n            function setUserNotificationLevel(_x14) {\n                return _ref21.apply(this, arguments);\n            }\n\n            return setUserNotificationLevel;\n        }()\n        /**\n         * Send a notification to the server indicating that this Client is currently typing in this Conversation.\n         * Typing ended notification is sent after a while automatically, but by calling again this method you ensure typing ended is not received.\n         * @returns {Promise<void>}\n         */\n\n    }, {\n        key: \"typing\",\n        value: function typing() {\n            return this.services.typingIndicator.send(this.sid);\n        }\n        /**\n         * Update the Conversation's attributes.\n         * @param {any} attributes - The new attributes object\n         * @returns {Promise<Conversation>}\n         */\n\n    }, {\n        key: \"updateAttributes\",\n        value: function () {\n            var _ref22 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee22(attributes) {\n                return _regenerator2.default.wrap(function _callee22$(_context22) {\n                    while (1) {\n                        switch (_context22.prev = _context22.next) {\n                            case 0:\n                                _context22.next = 2;\n                                return this.services.session.addCommand('editAttributes', {\n                                    channelSid: this.sid,\n                                    attributes: (0, _stringify2.default)(attributes)\n                                });\n\n                            case 2:\n                                return _context22.abrupt(\"return\", this);\n\n                            case 3:\n                            case \"end\":\n                                return _context22.stop();\n                        }\n                    }\n                }, _callee22, this);\n            }));\n\n            function updateAttributes(_x15) {\n                return _ref22.apply(this, arguments);\n            }\n\n            return updateAttributes;\n        }()\n        /**\n         * Update the Conversation's friendlyName.\n         * @param {String|null} name - The new Conversation friendlyName\n         * @returns {Promise<Conversation>}\n         */\n\n    }, {\n        key: \"updateFriendlyName\",\n        value: function () {\n            var _ref23 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee23(name) {\n                return _regenerator2.default.wrap(function _callee23$(_context23) {\n                    while (1) {\n                        switch (_context23.prev = _context23.next) {\n                            case 0:\n                                if (!(this.channelState.friendlyName !== name)) {\n                                    _context23.next = 3;\n                                    break;\n                                }\n\n                                _context23.next = 3;\n                                return this.services.session.addCommand('editFriendlyName', {\n                                    channelSid: this.sid,\n                                    friendlyName: name\n                                });\n\n                            case 3:\n                                return _context23.abrupt(\"return\", this);\n\n                            case 4:\n                            case \"end\":\n                                return _context23.stop();\n                        }\n                    }\n                }, _callee23, this);\n            }));\n\n            function updateFriendlyName(_x16) {\n                return _ref23.apply(this, arguments);\n            }\n\n            return updateFriendlyName;\n        }()\n        /**\n         * Set last consumed Conversation's Message index to current consumption horizon.\n         * @param {Number|null} index - Message index to set as last read.\n         * If null provided, then the behavior is identical to {@link Conversation#setNoMessagesConsumed}\n         * @returns {Promise<number>} resulting unread messages count in the conversation\n         */\n\n    }, {\n        key: \"updateLastConsumedMessageIndex\",\n        value: function () {\n            var _ref24 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee24(index) {\n                return _regenerator2.default.wrap(function _callee24$(_context24) {\n                    while (1) {\n                        switch (_context24.prev = _context24.next) {\n                            case 0:\n                                _context24.next = 2;\n                                return this._subscribeStreams();\n\n                            case 2:\n                                return _context24.abrupt(\"return\", this.services.consumptionHorizon.updateLastConsumedMessageIndexForConversation(this.sid, index));\n\n                            case 3:\n                            case \"end\":\n                                return _context24.stop();\n                        }\n                    }\n                }, _callee24, this);\n            }));\n\n            function updateLastConsumedMessageIndex(_x17) {\n                return _ref24.apply(this, arguments);\n            }\n\n            return updateLastConsumedMessageIndex;\n        }()\n    }, {\n        key: \"status\",\n        get: function get() {\n            return this.channelState.status;\n        }\n    }, {\n        key: \"friendlyName\",\n        get: function get() {\n            return this.channelState.friendlyName;\n        }\n    }, {\n        key: \"dateUpdated\",\n        get: function get() {\n            return this.channelState.dateUpdated;\n        }\n    }, {\n        key: \"dateCreated\",\n        get: function get() {\n            return this.channelState.dateCreated;\n        }\n    }, {\n        key: \"createdBy\",\n        get: function get() {\n            return this.channelState.createdBy;\n        }\n    }, {\n        key: \"attributes\",\n        get: function get() {\n            return this.channelState.attributes;\n        }\n    }, {\n        key: \"lastConsumedMessageIndex\",\n        get: function get() {\n            return this.channelState.lastConsumedMessageIndex;\n        }\n    }, {\n        key: \"lastMessage\",\n        get: function get() {\n            return this.channelState.lastMessage;\n        }\n    }, {\n        key: \"notificationLevel\",\n        get: function get() {\n            return this.channelState.notificationLevel;\n        }\n    }, {\n        key: \"state\",\n        get: function get() {\n            return this.channelState.state;\n        }\n    }], [{\n        key: \"preprocessUpdate\",\n        value: function preprocessUpdate(update, conversationSid) {\n            try {\n                if (typeof update.attributes === 'string') {\n                    update.attributes = JSON.parse(update.attributes);\n                } else if (update.attributes) {\n                    (0, _stringify2.default)(update.attributes);\n                }\n            } catch (e) {\n                log.warn('Retrieved malformed attributes from the server for conversation: ' + conversationSid);\n                update.attributes = {};\n            }\n            try {\n                if (update.dateCreated) {\n                    update.dateCreated = new Date(update.dateCreated);\n                }\n            } catch (e) {\n                log.warn('Retrieved malformed dateCreated from the server for conversation: ' + conversationSid);\n                delete update.dateCreated;\n            }\n            try {\n                if (update.dateUpdated) {\n                    update.dateUpdated = new Date(update.dateUpdated);\n                }\n            } catch (e) {\n                log.warn('Retrieved malformed dateUpdated from the server for conversation: ' + conversationSid);\n                delete update.dateUpdated;\n            }\n            try {\n                if (update.lastMessage && update.lastMessage.timestamp) {\n                    update.lastMessage.timestamp = new Date(update.lastMessage.timestamp);\n                }\n            } catch (e) {\n                log.warn('Retrieved malformed lastMessage.timestamp from the server for conversation: ' + conversationSid);\n                delete update.lastMessage.timestamp;\n            }\n        }\n    }]);\n    return Conversation;\n}(events_1.EventEmitter);\n\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"add\", null);\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.nonEmptyString, typecheck_1.nonEmptyString, ['undefined', 'object']), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String, String, Object]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"addNonChatParticipant\", null);\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.nonNegativeInteger), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"advanceLastConsumedMessageIndex\", null);\n__decorate([typecheck_1.asyncTypeCheck(['undefined', typecheck_1.nonNegativeInteger], ['undefined', typecheck_1.nonNegativeInteger], ['undefined', typecheck_1.literal('backwards', 'forward')]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number, Number, String]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"getMessages\", null);\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"getParticipantBySid\", null);\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"getParticipantByIdentity\", null);\n__decorate([typecheck_1.asyncTypeCheck([typecheck_1.nonEmptyString, participant_1.Participant]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"removeParticipant\", null);\n__decorate([typecheck_1.asyncTypeCheck(['string', 'object', typecheck_1.literal(null)], ['undefined', 'string', 'number', 'boolean', 'object', typecheck_1.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object, Object]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"sendMessage\", null);\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.literal('default', 'muted')), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"setUserNotificationLevel\", null);\n__decorate([typecheck_1.asyncTypeCheck(['string', 'number', 'boolean', 'object', typecheck_1.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"updateAttributes\", null);\n__decorate([typecheck_1.asyncTypeCheck(['string', typecheck_1.literal(null)]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"updateFriendlyName\", null);\n__decorate([typecheck_1.asyncTypeCheck([typecheck_1.literal(null), typecheck_1.nonNegativeInteger]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number]), __metadata(\"design:returntype\", _promise2.default)], Conversation.prototype, \"updateLastConsumedMessageIndex\", null);\nexports.Conversation = Conversation;\n/**\n * Fired when a Participant has joined the Conversation.\n * @event Conversation#participantJoined\n * @type {Participant}\n */\n/**\n * Fired when a Participant has left the Conversation.\n * @event Conversation#participantLeft\n * @type {Participant}\n */\n/**\n * Fired when a Participant's fields has been updated.\n * @event Conversation#participantUpdated\n * @type {Object}\n * @property {Participant} participant - Updated Participant\n * @property {Participant#UpdateReason[]} updateReasons - Array of Participant's updated event reasons\n */\n/**\n * Fired when a new Message has been added to the Conversation.\n * @event Conversation#messageAdded\n * @type {Message}\n */\n/**\n * Fired when Message is removed from Conversation's message list.\n * @event Conversation#messageRemoved\n * @type {Message}\n */\n/**\n * Fired when an existing Message's fields are updated with new values.\n * @event Conversation#messageUpdated\n * @type {Object}\n * @property {Message} message - Updated Message\n * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons\n */\n/**\n * Fired when a Participant has stopped typing.\n * @event Conversation#typingEnded\n * @type {Participant}\n */\n/**\n * Fired when a Participant has started typing.\n * @event Conversation#typingStarted\n * @type {Participant}\n */\n/**\n * Fired when a Conversation's attributes or metadata have been updated.\n * @event Conversation#updated\n * @type {Object}\n * @property {Conversation} conversation - Updated Conversation\n * @property {Conversation#UpdateReason[]} updateReasons - Array of Conversation's updated event reasons\n */\n/**\n * Fired when the Conversation was destroyed or currently logged in User has left private Conversation\n * @event Conversation#removed\n * @type {Conversation}\n */"]},"metadata":{},"sourceType":"script"}