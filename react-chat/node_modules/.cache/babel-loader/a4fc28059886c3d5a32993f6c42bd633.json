{"ast":null,"code":"\"use strict\";\n\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _slicedToArray2 = require(\"babel-runtime/helpers/slicedToArray\");\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _map = require(\"babel-runtime/core-js/map\");\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _regenerator = require(\"babel-runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _assign = require(\"babel-runtime/core-js/object/assign\");\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _asyncToGenerator2 = require(\"babel-runtime/helpers/asyncToGenerator\");\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _metadata = require(\"babel-runtime/core-js/reflect/metadata\");\n\nvar _metadata2 = _interopRequireDefault(_metadata);\n\nvar _defineProperty = require(\"babel-runtime/core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _getOwnPropertyDescriptor = require(\"babel-runtime/core-js/object/get-own-property-descriptor\");\n\nvar _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = (0, _getOwnPropertyDescriptor2.default)(target, key) : desc,\n      d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && (0, _defineProperty2.default)(target, key, r), r;\n};\n\nvar __metadata = undefined && undefined.__metadata || function (k, v) {\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(Reflect)) === \"object\" && typeof _metadata2.default === \"function\") return (0, _metadata2.default)(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PushNotification = exports.Client = exports.User = void 0;\n\nvar events_1 = require(\"events\");\n\nvar logger_1 = require(\"./logger\");\n\nvar configuration_1 = require(\"./configuration\");\n\nvar user_1 = require(\"./user\");\n\nObject.defineProperty(exports, \"User\", {\n  enumerable: true,\n  get: function get() {\n    return user_1.User;\n  }\n});\n\nvar network_1 = require(\"./services/network\");\n\nvar notificationtypes_1 = require(\"./interfaces/notificationtypes\");\n\nvar synclist_1 = require(\"./synclist\");\n\nvar twilsock_1 = require(\"twilsock\");\n\nvar twilio_notifications_1 = require(\"twilio-notifications\");\n\nvar twilio_sync_1 = require(\"twilio-sync\");\n\nvar twilio_mcs_client_1 = require(\"twilio-mcs-client\");\n\nvar session_1 = require(\"./session\");\n\nvar conversations_1 = require(\"./data/conversations\");\n\nvar users_1 = require(\"./data/users\");\n\nvar typingindicator_1 = require(\"./services/typingindicator\");\n\nvar consumptionhorizon_1 = require(\"./services/consumptionhorizon\");\n\nvar pushnotification_1 = require(\"./pushnotification\");\n\nObject.defineProperty(exports, \"PushNotification\", {\n  enumerable: true,\n  get: function get() {\n    return pushnotification_1.PushNotification;\n  }\n});\n\nvar util_1 = require(\"./util\");\n\nvar typecheck_1 = require(\"./util/typecheck\");\n\nvar log = logger_1.Logger.scope('Client');\n\nvar SDK_VERSION = require('./../package.json').version;\n\nvar ClientServices = function ClientServices() {\n  (0, _classCallCheck3.default)(this, ClientServices);\n};\n/**\n * A Client is a starting point to access Twilio Conversations functionality.\n *\n * @property {Client#ConnectionState} connectionState - Client connection state\n * @property {Boolean} reachabilityEnabled - Client reachability state\n * @property {User} user - Information for logged in user\n * @property {String} version - Current version of Conversations client\n *\n * @fires Client#connectionError\n * @fires Client#connectionStateChanged\n * @fires Client#conversationAdded\n * @fires Client#conversationJoined\n * @fires Client#conversationLeft\n * @fires Client#conversationRemoved\n * @fires Client#conversationUpdated\n * @fires Client#participantJoined\n * @fires Client#participantLeft\n * @fires Client#participantUpdated\n * @fires Client#messageAdded\n * @fires Client#messageRemoved\n * @fires Client#messageUpdated\n * @fires Client#pushNotification\n * @fires Client#tokenAboutToExpire\n * @fires Client#tokenExpired\n * @fires Client#typingEnded\n * @fires Client#typingStarted\n * @fires Client#userSubscribed\n * @fires Client#userUnsubscribed\n * @fires Client#userUpdated\n */\n\n\nvar Client = function (_events_1$EventEmitte) {\n  (0, _inherits3.default)(Client, _events_1$EventEmitte);\n  /**\n   * These options can be passed to Client constructor.\n   * @typedef {Object} Client#ClientOptions\n   * @property {String} [logLevel='error'] - The level of logging to enable. Valid options\n   *   (from strictest to broadest): ['silent', 'error', 'warn', 'info', 'debug', 'trace']\n   */\n\n  /**\n   * These options can be passed to {@link Client#createConversation}.\n   * @typedef {Object} Client#CreateConversationOptions\n   * @property {any} [attributes] - Any custom attributes to attach to the Conversation\n   * @property {String} [friendlyName] - The non-unique display name of the Conversation\n   */\n\n  /**\n   * Connection state of Client.\n   * @typedef {('connecting'|'connected'|'disconnecting'|'disconnected'|'denied')} Client#ConnectionState\n   */\n\n  /**\n   * Notifications conversation type.\n   * @typedef {('gcm'|'fcm'|'apn')} Client#NotificationsChannelType\n   */\n  // TODO: uniqueNames @property {('lastMessage'|'friendlyName'|'uniqueName')} [criteria] - Sorting criteria for Channels array\n\n  /**\n   * These options can be passed to {@link Client#getLocalConversations}.\n   * @typedef {Object} Client#ConversationSortingOptions\n   * @property {('lastMessage'|'friendlyName')} [criteria] - Sorting criteria for Conversations array\n   * @property {('ascending'|'descending')} [order] - Sorting order. If not present, then default is <code>ascending</code>\n   */\n\n  function Client(token, options) {\n    (0, _classCallCheck3.default)(this, Client);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (Client.__proto__ || (0, _getPrototypeOf2.default)(Client)).call(this));\n\n    _this.connectionState = 'connecting';\n    _this.sessionPromise = null;\n    _this.conversationsPromise = null;\n    _this.version = SDK_VERSION;\n    _this.parsePushNotification = Client.parsePushNotification;\n    _this.options = options || {};\n\n    if (!_this.options.disableDeepClone) {\n      _this.options = util_1.deepClone(_this.options);\n    }\n\n    _this.options.logLevel = _this.options.logLevel || 'silent';\n    log.setLevel(_this.options.logLevel);\n    var productId = _this.options.productId = 'ip_messaging'; // Filling ClientMetadata\n\n    _this.options.clientMetadata = _this.options.clientMetadata || {};\n\n    if (!_this.options.clientMetadata.hasOwnProperty('type')) {\n      _this.options.clientMetadata.type = 'conversations';\n    }\n\n    if (!_this.options.clientMetadata.hasOwnProperty('sdk')) {\n      _this.options.clientMetadata.sdk = 'JS';\n      _this.options.clientMetadata.sdkv = SDK_VERSION;\n    } // Enable session local storage for Sync\n\n\n    _this.options.Sync = _this.options.Sync || {};\n\n    if (typeof _this.options.Sync.enableSessionStorage === 'undefined') {\n      _this.options.Sync.enableSessionStorage = true;\n    }\n\n    if (_this.options.region) {\n      _this.options.Sync.region = _this.options.region;\n    }\n\n    if (!token) {\n      throw new Error('A valid Twilio token should be provided');\n    }\n\n    _this.services = new ClientServices();\n    _this.config = new configuration_1.Configuration(_this.options);\n    _this.options.twilsockClient = _this.options.twilsockClient || new twilsock_1.Twilsock(token, productId, _this.options);\n    _this.options.transport = _this.options.transport || _this.options.twilsockClient;\n    _this.options.notificationsClient = _this.options.notificationsClient || new twilio_notifications_1.Notifications(token, _this.options);\n    _this.options.syncClient = _this.options.syncClient || new twilio_sync_1.SyncClient(token, _this.options);\n    _this.services.syncClient = _this.options.syncClient;\n    _this.services.transport = _this.options.transport;\n    _this.services.twilsockClient = _this.options.twilsockClient;\n    _this.services.notificationClient = _this.options.notificationsClient;\n    _this.services.session = new session_1.Session(_this.services, _this.config);\n    _this.sessionPromise = _this.services.session.initialize();\n    _this.services.network = new network_1.Network(_this.config, _this.services);\n    _this.services.users = new users_1.Users({\n      session: _this.services.session,\n      network: _this.services.network,\n      syncClient: _this.services.syncClient\n    });\n\n    _this.services.users.on('userSubscribed', _this.emit.bind(_this, 'userSubscribed'));\n\n    _this.services.users.on('userUpdated', function (args) {\n      return _this.emit('userUpdated', args);\n    });\n\n    _this.services.users.on('userUnsubscribed', _this.emit.bind(_this, 'userUnsubscribed'));\n\n    _this.services.twilsockClient.on('tokenAboutToExpire', function (ttl) {\n      return _this.emit('tokenAboutToExpire', ttl);\n    });\n\n    _this.services.twilsockClient.on('tokenExpired', function () {\n      return _this.emit('tokenExpired');\n    });\n\n    _this.services.twilsockClient.on('connectionError', function (error) {\n      return _this.emit('connectionError', error);\n    });\n\n    _this.services.consumptionHorizon = new consumptionhorizon_1.ConsumptionHorizon(_this.services);\n    _this.services.typingIndicator = new typingindicator_1.TypingIndicator(_this.config, {\n      transport: _this.services.twilsockClient,\n      notificationClient: _this.services.notificationClient\n    }, _this.getConversationBySid.bind(_this));\n    _this.services.syncList = new synclist_1.SyncList(_this.services);\n    _this.conversations = new conversations_1.Conversations(_this.services);\n    _this.conversationsPromise = _this.sessionPromise.then(function () {\n      _this.conversations.on('conversationAdded', _this.emit.bind(_this, 'conversationAdded'));\n\n      _this.conversations.on('conversationRemoved', _this.emit.bind(_this, 'conversationRemoved')); // this.conversations.on('channelInvited', this.emit.bind(this, 'channelInvited'));\n\n\n      _this.conversations.on('conversationJoined', _this.emit.bind(_this, 'conversationJoined'));\n\n      _this.conversations.on('conversationLeft', _this.emit.bind(_this, 'conversationLeft'));\n\n      _this.conversations.on('conversationUpdated', function (args) {\n        return _this.emit('conversationUpdated', args);\n      });\n\n      _this.conversations.on('participantJoined', _this.emit.bind(_this, 'participantJoined'));\n\n      _this.conversations.on('participantLeft', _this.emit.bind(_this, 'participantLeft'));\n\n      _this.conversations.on('participantUpdated', function (args) {\n        return _this.emit('participantUpdated', args);\n      });\n\n      _this.conversations.on('messageAdded', _this.emit.bind(_this, 'messageAdded'));\n\n      _this.conversations.on('messageUpdated', function (args) {\n        return _this.emit('messageUpdated', args);\n      });\n\n      _this.conversations.on('messageRemoved', _this.emit.bind(_this, 'messageRemoved'));\n\n      _this.conversations.on('typingStarted', _this.emit.bind(_this, 'typingStarted'));\n\n      _this.conversations.on('typingEnded', _this.emit.bind(_this, 'typingEnded'));\n\n      return _this.conversations.fetchConversations();\n    }).then(function () {\n      return _this.conversations;\n    });\n\n    _this.services.notificationClient.on('connectionStateChanged', function (state) {\n      var changedConnectionState = null;\n\n      switch (state) {\n        case 'connected':\n          changedConnectionState = 'connected';\n          break;\n\n        case 'denied':\n          changedConnectionState = 'denied';\n          break;\n\n        case 'disconnecting':\n          changedConnectionState = 'disconnecting';\n          break;\n\n        case 'disconnected':\n          changedConnectionState = 'disconnected';\n          break;\n\n        default:\n          changedConnectionState = 'connecting';\n      }\n\n      if (changedConnectionState !== _this.connectionState) {\n        _this.connectionState = changedConnectionState;\n\n        _this.emit('connectionStateChanged', _this.connectionState);\n      }\n    });\n\n    _this.fpaToken = token;\n    return _this;\n  }\n  /**\n   * Factory method to create Conversations client instance.\n   *\n   * @param {String} token - Access token\n   * @param {Client#ClientOptions} [options] - Options to customize the Client\n   * @returns {Promise<Client>}\n   */\n\n\n  (0, _createClass3.default)(Client, [{\n    key: \"subscribeToPushNotifications\",\n    value: function subscribeToPushNotifications(channelType) {\n      var _this2 = this;\n\n      var subscriptions = [];\n      [notificationtypes_1.NotificationTypes.NEW_MESSAGE, notificationtypes_1.NotificationTypes.ADDED_TO_CHANNEL, // NotificationTypes.INVITED_TO_CHANNEL,\n      notificationtypes_1.NotificationTypes.REMOVED_FROM_CHANNEL, notificationtypes_1.NotificationTypes.TYPING_INDICATOR, notificationtypes_1.NotificationTypes.CONSUMPTION_UPDATE].forEach(function (messageType) {\n        subscriptions.push(_this2.services.notificationClient.subscribe(messageType, channelType));\n      });\n      return _promise2.default.all(subscriptions);\n    }\n  }, {\n    key: \"unsubscribeFromPushNotifications\",\n    value: function unsubscribeFromPushNotifications(channelType) {\n      var _this3 = this;\n\n      var subscriptions = [];\n      [notificationtypes_1.NotificationTypes.NEW_MESSAGE, notificationtypes_1.NotificationTypes.ADDED_TO_CHANNEL, // NotificationTypes.INVITED_TO_CHANNEL,\n      notificationtypes_1.NotificationTypes.REMOVED_FROM_CHANNEL, notificationtypes_1.NotificationTypes.TYPING_INDICATOR, notificationtypes_1.NotificationTypes.CONSUMPTION_UPDATE].forEach(function (messageType) {\n        subscriptions.push(_this3.services.notificationClient.unsubscribe(messageType, channelType));\n      });\n      return _promise2.default.all(subscriptions);\n    }\n  }, {\n    key: \"initialize\",\n    value: function () {\n      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {\n        var _this4 = this;\n\n        var links, options;\n        return _regenerator2.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.sessionPromise;\n\n              case 2:\n                Client.supportedPushChannels.forEach(function (channelType) {\n                  return _this4.subscribeToPushNotifications(channelType);\n                });\n                _context.next = 5;\n                return this.services.session.getSessionLinks();\n\n              case 5:\n                links = _context.sent; // this.services.publicChannels = new PublicConversations(this, this.services, links.publicConversationsUrl);\n                // this.services.myConversations = new UserConversations(this, this.services, links.myChannelsUrl);\n\n                options = (0, _assign2.default)(this.options);\n                options.transport = null;\n                this.services.mcsClient = new twilio_mcs_client_1.McsClient(this.fpaToken, links.mediaServiceUrl, options);\n                _context.next = 11;\n                return this.services.typingIndicator.initialize();\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function initialize() {\n        return _ref.apply(this, arguments);\n      }\n\n      return initialize;\n    }()\n    /**\n     * Gracefully shutting down library instance.\n     * @public\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"shutdown\",\n    value: function () {\n      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {\n        return _regenerator2.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.services.twilsockClient.disconnect();\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function shutdown() {\n        return _ref2.apply(this, arguments);\n      }\n\n      return shutdown;\n    }()\n    /**\n     * Update the token used by the Client and re-register with Conversations services.\n     * @param {String} token - Access token\n     * @public\n     * @returns {Promise<Client>}\n     */\n\n  }, {\n    key: \"updateToken\",\n    value: function () {\n      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(token) {\n        var _this5 = this;\n\n        return _regenerator2.default.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                log.info('updateToken');\n\n                if (!(this.fpaToken === token)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", this);\n\n              case 3:\n                _context3.next = 5;\n                return this.services.twilsockClient.updateToken(token).then(function () {\n                  return _this5.fpaToken = token;\n                }).then(function () {\n                  return _this5.services.mcsClient.updateToken(token);\n                }).then(function () {\n                  return _this5.sessionPromise;\n                });\n\n              case 5:\n                return _context3.abrupt(\"return\", this);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function updateToken(_x) {\n        return _ref3.apply(this, arguments);\n      }\n\n      return updateToken;\n    }()\n    /**\n     * Get a known Conversation by its SID.\n     * @param {String} conversationSid - Conversation sid\n     * @returns {Promise<Conversation>}\n     */\n\n  }, {\n    key: \"getConversationBySid\",\n    value: function () {\n      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(conversationSid) {\n        var _this6 = this;\n\n        return _regenerator2.default.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", this.conversations.syncListRead.promise.then(function () {\n                  return _this6.conversations.getConversation(conversationSid);\n                }).then(function (conversation) {\n                  if (!conversation) {\n                    throw new Error(\"Conversation with SID \" + conversationSid + \" is not found.\");\n                  }\n\n                  return conversation;\n                }));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getConversationBySid(_x2) {\n        return _ref4.apply(this, arguments);\n      }\n\n      return getConversationBySid;\n    }()\n    /*\n     * Get a known Conversation by its unique identifier name.\n     * @param {String} uniqueName - The unique identifier name of the Conversation to get\n     * @returns {Promise<Conversation>}\n     *\n    @asyncTypeCheck('string')\n    async getConversationByUniqueName(uniqueName: string): Promise<Conversation> {\n      throw new Error('Not implemented yet.');\n         /*\n      if (!uniqueName || typeof uniqueName !== 'string') {\n        throw new Error('Client.getConversationByUniqueName requires a <String>uniqueName parameter');\n      }\n         return this.conversations.syncListRead.promise.then(() =>\n        this.services.myConversations.getConversationByUniqueName(uniqueName).then(x => this.conversations.pushConversation(x)));\n    }\n    */\n\n    /**\n     * Get the current list of all subscribed Conversations.\n     * @returns {Promise<Paginator<Conversation>>}\n     */\n\n  }, {\n    key: \"getSubscribedConversations\",\n    value: function getSubscribedConversations(args) {\n      return this.conversationsPromise.then(function (conversations) {\n        return conversations.getConversations(args);\n      });\n    }\n    /**\n     * Get array of Conversations locally known to Client in provided sorting order.\n     * Locally known conversations are the ones created and/or joined during client runtime and currently logged in User subscribed Conversations.\n     * To ensure full list of subscribed Conversations fetched - call the {@link Client#getSubscribedConversations} method\n     * and fetch all pages with help of {@link Paginator#nextPage} method.\n     * @param {Client#ConversationSortingOptions} [sortingOptions] - Options for the Conversation sorting\n     * @returns {Promise<Array<Conversation>>}\n     */\n\n  }, {\n    key: \"getLocalConversations\",\n    value: function getLocalConversations(sortingOptions) {\n      return this.conversationsPromise.then(function (channels) {\n        var result = [];\n        channels.conversations.forEach(function (value) {\n          result.push(value);\n        });\n        var sortingOrder = (sortingOptions === null || sortingOptions === void 0 ? void 0 : sortingOptions.order) || 'ascending';\n\n        if (sortingOptions && sortingOptions.criteria) {\n          if (sortingOptions.criteria === 'lastMessage') {\n            result.sort(function (a, b) {\n              return Client.compareConversationsByLastMessage(a, b, sortingOrder);\n            });\n            /*} else if (sortingOptions.criteria === 'uniqueName') {\n              result.sort((a: Conversation, b: Conversation) =>\n                Client.compareConversationsByStringProperty(a.uniqueName, b.uniqueName, sortingOrder));*/\n          } else if (sortingOptions.criteria === 'friendlyName') {\n            result.sort(function (a, b) {\n              return Client.compareConversationsByStringProperty(a.friendlyName, b.friendlyName, sortingOrder);\n            });\n          }\n        }\n\n        return result;\n      });\n    }\n  }, {\n    key: \"createConversation\",\n\n    /**\n     * Create a Conversation on the server and subscribe to its events.\n     * The default is a Conversation with an empty friendlyName.\n     * @param {Client#CreateConversationOptions} [options] - Options for the Conversation\n     * @returns {Promise<Conversation>}\n     */\n    value: function createConversation(options) {\n      options = options || {};\n      return this.conversationsPromise.then(function (conversationsEntity) {\n        return conversationsEntity.addConversation(options);\n      });\n    }\n    /**\n     * Registers for push notifications.\n     * @param {Client#NotificationsChannelType} channelType - 'gcm', 'apn' and 'fcm' are supported\n     * @param {string} registrationId - Push notification id provided by platform\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"setPushRegistrationId\",\n    value: function () {\n      var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(channelType, registrationId) {\n        var _this7 = this;\n\n        return _regenerator2.default.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.subscribeToPushNotifications(channelType).then(function () {\n                  return _this7.services.notificationClient.setPushRegistrationId(registrationId, channelType);\n                });\n\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function setPushRegistrationId(_x3, _x4) {\n        return _ref5.apply(this, arguments);\n      }\n\n      return setPushRegistrationId;\n    }()\n    /**\n     * Unregisters from push notifications.\n     * @param {Client#NotificationsChannelType} channelType - 'gcm', 'apn' and 'fcm' are supported\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"unsetPushRegistrationId\",\n    value: function () {\n      var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(channelType) {\n        return _regenerator2.default.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (!(Client.supportedPushChannels.indexOf(channelType) === -1)) {\n                  _context6.next = 2;\n                  break;\n                }\n\n                throw new Error('Invalid or unsupported channelType: ' + channelType);\n\n              case 2:\n                _context6.next = 4;\n                return this.unsubscribeFromPushNotifications(channelType);\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function unsetPushRegistrationId(_x5) {\n        return _ref6.apply(this, arguments);\n      }\n\n      return unsetPushRegistrationId;\n    }()\n  }, {\n    key: \"handlePushNotification\",\n\n    /**\n     * Handle push notification payload parsing and emits event {@link Client#event:pushNotification} on this {@link Client} instance.\n     * @param {Object} notificationPayload - Push notification payload\n     * @returns {Promise<void>}\n     */\n    value: function () {\n      var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7(notificationPayload) {\n        return _regenerator2.default.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                log.debug('handlePushNotification, notificationPayload=', notificationPayload);\n                this.emit('pushNotification', Client.parsePushNotification(notificationPayload));\n\n              case 2:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function handlePushNotification(_x6) {\n        return _ref7.apply(this, arguments);\n      }\n\n      return handlePushNotification;\n    }()\n    /**\n     * Gets user for given identity, if it's in subscribed list - then return the user object from it,\n     * if not - then subscribes and adds user to the subscribed list.\n     * @param {String} identity - Identity of User\n     * @returns {Promise<User>} Fully initialized user\n     */\n\n  }, {\n    key: \"getUser\",\n    value: function getUser(identity) {\n      return this.services.users.getUser(identity);\n    }\n    /**\n     * @returns {Promise<Array<User>>} List of subscribed User objects\n     */\n\n  }, {\n    key: \"getSubscribedUsers\",\n    value: function () {\n      var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8() {\n        return _regenerator2.default.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                return _context8.abrupt(\"return\", this.services.users.getSubscribedUsers());\n\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function getSubscribedUsers() {\n        return _ref8.apply(this, arguments);\n      }\n\n      return getSubscribedUsers;\n    }()\n  }, {\n    key: \"user\",\n    get: function get() {\n      return this.services.users.myself;\n    }\n  }, {\n    key: \"reachabilityEnabled\",\n    get: function get() {\n      return this.services.session.reachabilityEnabled;\n    }\n  }, {\n    key: \"token\",\n    get: function get() {\n      return this.fpaToken;\n    }\n  }], [{\n    key: \"create\",\n    value: function () {\n      var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9(token, options) {\n        var client;\n        return _regenerator2.default.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                client = new Client(token, options);\n                _context9.next = 3;\n                return client.initialize();\n\n              case 3:\n                return _context9.abrupt(\"return\", client);\n\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function create(_x7, _x8) {\n        return _ref9.apply(this, arguments);\n      }\n\n      return create;\n    }()\n  }, {\n    key: \"compareConversationsByLastMessage\",\n    value: function compareConversationsByLastMessage(a, b, order) {\n      if (a.lastMessage && b.lastMessage) {\n        if (a.lastMessage.dateCreated && b.lastMessage.dateCreated) {\n          if (a.lastMessage.dateCreated.getTime() < b.lastMessage.dateCreated.getTime()) {\n            return order === 'ascending' ? -1 : 1;\n          } else {\n            return order === 'ascending' ? 1 : -1;\n          }\n        } else {\n          if (a.lastMessage.dateCreated) {\n            return -1;\n          } else if (b.lastMessage.dateCreated) {\n            return 1;\n          }\n        }\n      }\n\n      if (a.lastMessage) {\n        return -1;\n      } else if (b.lastMessage) {\n        return 1;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"compareConversationsByStringProperty\",\n    value: function compareConversationsByStringProperty(str1, str2, order) {\n      if (str1 && str2) {\n        return order === 'ascending' ? str1.localeCompare(str2) : -1 * str1.localeCompare(str2);\n      } else if (str1) {\n        return -1;\n      } else if (str2) {\n        return 1;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"parsePushNotificationChatData\",\n    value: function parsePushNotificationChatData(data) {\n      var result = {};\n\n      for (var key in Client.supportedPushDataFields) {\n        if (typeof data[key] !== 'undefined' && data[key] !== null) {\n          if (key === 'message_index') {\n            if (util_1.parseToNumber(data[key]) !== null) {\n              result[Client.supportedPushDataFields[key]] = Number(data[key]);\n            }\n          } else {\n            result[Client.supportedPushDataFields[key]] = data[key];\n          }\n        }\n      }\n\n      return result;\n    }\n    /**\n     * Static method for push notification payload parsing. Returns parsed push as {@link PushNotification} object\n     * @param {Object} notificationPayload - Push notification payload\n     * @returns {PushNotification|Error}\n     */\n\n  }, {\n    key: \"parsePushNotification\",\n    value: function parsePushNotification(notificationPayload) {\n      log.debug('parsePushNotification, notificationPayload=', notificationPayload); // APNS specifics\n\n      if (typeof notificationPayload.aps !== 'undefined') {\n        if (!notificationPayload.twi_message_type) {\n          throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');\n        }\n\n        var data = Client.parsePushNotificationChatData(notificationPayload);\n        var apsPayload = notificationPayload.aps;\n        var body = null;\n        var title = null;\n\n        if (typeof apsPayload.alert === 'string') {\n          body = apsPayload.alert || null;\n        } else {\n          body = apsPayload.alert.body || null;\n          title = apsPayload.alert.title || null;\n        }\n\n        return new pushnotification_1.PushNotification({\n          title: title,\n          body: body,\n          sound: apsPayload.sound || null,\n          badge: apsPayload.badge || null,\n          action: apsPayload.category || null,\n          type: notificationPayload.twi_message_type,\n          data: data\n        });\n      } // FCM/GCM specifics\n\n\n      if (typeof notificationPayload.data !== 'undefined') {\n        var dataPayload = notificationPayload.data;\n\n        if (!dataPayload.twi_message_type) {\n          throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');\n        }\n\n        var _data = Client.parsePushNotificationChatData(notificationPayload.data);\n\n        return new pushnotification_1.PushNotification({\n          title: dataPayload.twi_title || null,\n          body: dataPayload.twi_body || null,\n          sound: dataPayload.twi_sound || null,\n          badge: null,\n          action: dataPayload.twi_action || null,\n          type: dataPayload.twi_message_type,\n          data: _data\n        });\n      }\n\n      throw new Error('Provided push notification payload is not Programmable Chat notification');\n    }\n  }]);\n  return Client;\n}(events_1.EventEmitter);\n\nClient.version = SDK_VERSION;\nClient.supportedPushChannels = ['fcm', 'apn', 'gcm'];\nClient.supportedPushDataFields = {\n  'channel_sid': 'channelSid',\n  'message_sid': 'messageSid',\n  'message_index': 'messageIndex'\n};\n\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"updateToken\", null);\n\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"getConversationBySid\", null);\n\n__decorate([typecheck_1.asyncTypeCheck(['undefined', typecheck_1.custom(function (value) {\n  var baseDescription = 'valid sorting options';\n\n  if ((typeof value === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(value)) !== 'object' || value === null || Array.isArray(value)) {\n    return [false, baseDescription + \" (should be a pure object)\"];\n  }\n\n  var literalMap = new _map2.default([['criteria', ['lastMessage', 'friendlyName']], ['order', ['ascending', 'descending']]]);\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = (0, _getIterator3.default)(literalMap.entries()), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _ref10 = _step.value;\n\n      var _ref11 = (0, _slicedToArray3.default)(_ref10, 2);\n\n      var field = _ref11[0];\n      var literals = _ref11[1];\n\n      if (value[field] !== undefined && !literals.includes(value[field])) {\n        return [false, baseDescription + \" (sortingOptions.\" + field + \" should be one of: \\\"\" + literals.join('\", \"') + \"\\\")\", \"malformed sorting options (sortingOptions.\" + field + \" is \" + typecheck_1.stringifyReceivedType(value[field]) + \")\"];\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return [true];\n})]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"getLocalConversations\", null);\n\n__decorate([typecheck_1.asyncTypeCheck(['undefined', typecheck_1.custom(function (value) {\n  var baseDescription = 'valid conversation options';\n\n  if ((typeof value === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(value)) !== 'object' || value === null || Array.isArray(value)) {\n    return [false, baseDescription + \" (should be a pure object)\"];\n  }\n\n  var typeCheckMap = new _map2.default([['friendlyName', 'string']]);\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = (0, _getIterator3.default)(typeCheckMap.entries()), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var _ref12 = _step2.value;\n\n      var _ref13 = (0, _slicedToArray3.default)(_ref12, 2);\n\n      var field = _ref13[0];\n      var type = _ref13[1];\n\n      if (value[field] !== undefined && (0, _typeof3.default)(value[field]) !== type) {\n        return [false, baseDescription + \" (options.\" + field + \" should be of type \" + type + \")\", \"malformed conversation options (options.\" + field + \" is \" + typecheck_1.stringifyReceivedType(value[field]) + \")\"];\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  return [true];\n})]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"createConversation\", null);\n\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.literal('gcm', 'fcm', 'apn'), 'string'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String, String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"setPushRegistrationId\", null);\n\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.literal('gcm', 'fcm', 'apn')), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"unsetPushRegistrationId\", null);\n\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.pureObject), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"handlePushNotification\", null);\n\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"getUser\", null);\n\n__decorate([typecheck_1.asyncTypeCheck('string', ['undefined', typecheck_1.pureObject]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String, Object]), __metadata(\"design:returntype\", _promise2.default)], Client, \"create\", null);\n\n__decorate([typecheck_1.typeCheck(typecheck_1.pureObject), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", pushnotification_1.PushNotification)], Client, \"parsePushNotification\", null);\n\nexports.Client = Client;\nexports.default = Client;\n/**\n * Fired when a Conversation becomes visible to the Client. The event is also triggered when the client creates a new Conversation.\n * Fired for all conversations Client has joined.\n * @event Client#conversationAdded\n * @type {Conversation}\n */\n\n/**\n * Fired when the Client joins a Conversation.\n * @event Client#conversationJoined\n * @type {Conversation}\n */\n\n/**\n * Fired when the Client leaves a Conversation.\n * @event Client#conversationLeft\n * @type {Conversation}\n */\n\n/**\n * Fired when a Conversation is no longer visible to the Client.\n * @event Client#conversationRemoved\n * @type {Conversation}\n */\n\n/**\n * Fired when a Conversation's attributes or metadata have been updated.\n * During Conversation's {@link Client.create| creation and initialization} this event might be fired multiple times\n * for same joined or created Conversation as new data is arriving from different sources.\n * @event Client#conversationUpdated\n * @type {Object}\n * @property {Conversation} conversation - Updated Conversation\n * @property {Conversation#UpdateReason[]} updateReasons - Array of Conversation's updated event reasons\n */\n\n/**\n * Fired when Client's connection state has been changed.\n * @event Client#connectionStateChanged\n * @type {Client#ConnectionState}\n */\n\n/**\n * Fired when a Participant has joined the Conversation.\n * @event Client#participantJoined\n * @type {Participant}\n */\n\n/**\n * Fired when a Participant has left the Conversation.\n * @event Client#participantLeft\n * @type {Participant}\n */\n\n/**\n * Fired when a Participant's fields has been updated.\n * @event Client#participantUpdated\n * @type {Object}\n * @property {Participant} participant - Updated Participant\n * @property {Participant#UpdateReason[]} updateReasons - Array of Participant's updated event reasons\n */\n\n/**\n * Fired when a new Message has been added to the Conversation on the server.\n * @event Client#messageAdded\n * @type {Message}\n */\n\n/**\n * Fired when Message is removed from Conversation's message list.\n * @event Client#messageRemoved\n * @type {Message}\n */\n\n/**\n * Fired when an existing Message's fields are updated with new values.\n * @event Client#messageUpdated\n * @type {Object}\n * @property {Message} message - Updated Message\n * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons\n */\n\n/**\n * Fired when token is about to expire and needs to be updated.\n * @event Client#tokenAboutToExpire\n * @type {void}\n */\n\n/**\n * Fired when token is expired.\n * @event Client#tokenExpired\n * @type {void}\n */\n\n/**\n * Fired when a Participant has stopped typing.\n * @event Client#typingEnded\n * @type {Participant}\n */\n\n/**\n * Fired when a Participant has started typing.\n * @event Client#typingStarted\n * @type {Participant}\n */\n\n/**\n * Fired when client received (and parsed) push notification via one of push conversations (apn, gcm, fcm).\n * @event Client#pushNotification\n * @type {PushNotification}\n */\n\n/**\n * Fired when the Client is subscribed to a User.\n * @event Client#userSubscribed\n * @type {User}\n */\n\n/**\n * Fired when the Client is unsubscribed from a User.\n * @event Client#userUnsubscribed\n * @type {User}\n */\n\n/**\n * Fired when the User's properties or reachability status have been updated.\n * @event Client#userUpdated\n * @type {Object}\n * @property {User} user - Updated User\n * @property {User#UpdateReason[]} updateReasons - Array of User's updated event reasons\n */\n\n/**\n * Fired when connection is interrupted by unexpected reason\n * @event Client#connectionError\n * @type {Object}\n * @property {Boolean} terminal - twilsock will stop connection attempts\n * @property {String} message - root cause\n * @property {Number} [httpStatusCode] - http status code if available\n * @property {Number} [errorCode] - Twilio public error code if available\n */","map":{"version":3,"sources":["/Users/stefanpjanic/Desktop/mango_dev/node_modules/@twilio/conversations/browser/client.js"],"names":["_getIterator2","require","_getIterator3","_interopRequireDefault","_slicedToArray2","_slicedToArray3","_map","_map2","_regenerator","_regenerator2","_assign","_assign2","_asyncToGenerator2","_asyncToGenerator3","_promise","_promise2","_getPrototypeOf","_getPrototypeOf2","_createClass2","_createClass3","_possibleConstructorReturn2","_possibleConstructorReturn3","_inherits2","_inherits3","_classCallCheck2","_classCallCheck3","_metadata","_metadata2","_defineProperty","_defineProperty2","_typeof2","_typeof3","_getOwnPropertyDescriptor","_getOwnPropertyDescriptor2","obj","__esModule","default","__decorate","undefined","decorators","target","key","desc","c","arguments","length","r","d","Reflect","decorate","i","__metadata","k","v","Object","defineProperty","exports","value","PushNotification","Client","User","events_1","logger_1","configuration_1","user_1","enumerable","get","network_1","notificationtypes_1","synclist_1","twilsock_1","twilio_notifications_1","twilio_sync_1","twilio_mcs_client_1","session_1","conversations_1","users_1","typingindicator_1","consumptionhorizon_1","pushnotification_1","util_1","typecheck_1","log","Logger","scope","SDK_VERSION","version","ClientServices","_events_1$EventEmitte","token","options","_this","__proto__","call","connectionState","sessionPromise","conversationsPromise","parsePushNotification","disableDeepClone","deepClone","logLevel","setLevel","productId","clientMetadata","hasOwnProperty","type","sdk","sdkv","Sync","enableSessionStorage","region","Error","services","config","Configuration","twilsockClient","Twilsock","transport","notificationsClient","Notifications","syncClient","SyncClient","notificationClient","session","Session","initialize","network","Network","users","Users","on","emit","bind","args","ttl","error","consumptionHorizon","ConsumptionHorizon","typingIndicator","TypingIndicator","getConversationBySid","syncList","SyncList","conversations","Conversations","then","fetchConversations","state","changedConnectionState","fpaToken","subscribeToPushNotifications","channelType","_this2","subscriptions","NotificationTypes","NEW_MESSAGE","ADDED_TO_CHANNEL","REMOVED_FROM_CHANNEL","TYPING_INDICATOR","CONSUMPTION_UPDATE","forEach","messageType","push","subscribe","all","unsubscribeFromPushNotifications","_this3","unsubscribe","_ref","mark","_callee","_this4","links","wrap","_callee$","_context","prev","next","supportedPushChannels","getSessionLinks","sent","mcsClient","McsClient","mediaServiceUrl","stop","apply","_ref2","_callee2","_callee2$","_context2","disconnect","shutdown","_ref3","_callee3","_this5","_callee3$","_context3","info","abrupt","updateToken","_x","_ref4","_callee4","conversationSid","_this6","_callee4$","_context4","syncListRead","promise","getConversation","conversation","_x2","getSubscribedConversations","getConversations","getLocalConversations","sortingOptions","channels","result","sortingOrder","order","criteria","sort","a","b","compareConversationsByLastMessage","compareConversationsByStringProperty","friendlyName","createConversation","conversationsEntity","addConversation","_ref5","_callee5","registrationId","_this7","_callee5$","_context5","setPushRegistrationId","_x3","_x4","_ref6","_callee6","_callee6$","_context6","indexOf","unsetPushRegistrationId","_x5","_ref7","_callee7","notificationPayload","_callee7$","_context7","debug","handlePushNotification","_x6","getUser","identity","_ref8","_callee8","_callee8$","_context8","getSubscribedUsers","myself","reachabilityEnabled","_ref9","_callee9","client","_callee9$","_context9","create","_x7","_x8","lastMessage","dateCreated","getTime","str1","str2","localeCompare","parsePushNotificationChatData","data","supportedPushDataFields","parseToNumber","Number","aps","twi_message_type","apsPayload","body","title","alert","sound","badge","action","category","dataPayload","_data","twi_title","twi_body","twi_sound","twi_action","EventEmitter","asyncTypeCheck","nonEmptyString","Function","String","prototype","custom","baseDescription","Array","isArray","literalMap","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","entries","_step","done","_ref10","_ref11","field","literals","includes","join","stringifyReceivedType","err","return","typeCheckMap","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_ref12","_ref13","literal","pureObject","typeCheck"],"mappings":"AAAA;;AAEA,IAAIA,aAAa,GAAGC,OAAO,CAAC,oCAAD,CAA3B;;AAEA,IAAIC,aAAa,GAAGC,sBAAsB,CAACH,aAAD,CAA1C;;AAEA,IAAII,eAAe,GAAGH,OAAO,CAAC,qCAAD,CAA7B;;AAEA,IAAII,eAAe,GAAGF,sBAAsB,CAACC,eAAD,CAA5C;;AAEA,IAAIE,IAAI,GAAGL,OAAO,CAAC,2BAAD,CAAlB;;AAEA,IAAIM,KAAK,GAAGJ,sBAAsB,CAACG,IAAD,CAAlC;;AAEA,IAAIE,YAAY,GAAGP,OAAO,CAAC,2BAAD,CAA1B;;AAEA,IAAIQ,aAAa,GAAGN,sBAAsB,CAACK,YAAD,CAA1C;;AAEA,IAAIE,OAAO,GAAGT,OAAO,CAAC,qCAAD,CAArB;;AAEA,IAAIU,QAAQ,GAAGR,sBAAsB,CAACO,OAAD,CAArC;;AAEA,IAAIE,kBAAkB,GAAGX,OAAO,CAAC,wCAAD,CAAhC;;AAEA,IAAIY,kBAAkB,GAAGV,sBAAsB,CAACS,kBAAD,CAA/C;;AAEA,IAAIE,QAAQ,GAAGb,OAAO,CAAC,+BAAD,CAAtB;;AAEA,IAAIc,SAAS,GAAGZ,sBAAsB,CAACW,QAAD,CAAtC;;AAEA,IAAIE,eAAe,GAAGf,OAAO,CAAC,+CAAD,CAA7B;;AAEA,IAAIgB,gBAAgB,GAAGd,sBAAsB,CAACa,eAAD,CAA7C;;AAEA,IAAIE,aAAa,GAAGjB,OAAO,CAAC,mCAAD,CAA3B;;AAEA,IAAIkB,aAAa,GAAGhB,sBAAsB,CAACe,aAAD,CAA1C;;AAEA,IAAIE,2BAA2B,GAAGnB,OAAO,CAAC,iDAAD,CAAzC;;AAEA,IAAIoB,2BAA2B,GAAGlB,sBAAsB,CAACiB,2BAAD,CAAxD;;AAEA,IAAIE,UAAU,GAAGrB,OAAO,CAAC,gCAAD,CAAxB;;AAEA,IAAIsB,UAAU,GAAGpB,sBAAsB,CAACmB,UAAD,CAAvC;;AAEA,IAAIE,gBAAgB,GAAGvB,OAAO,CAAC,sCAAD,CAA9B;;AAEA,IAAIwB,gBAAgB,GAAGtB,sBAAsB,CAACqB,gBAAD,CAA7C;;AAEA,IAAIE,SAAS,GAAGzB,OAAO,CAAC,wCAAD,CAAvB;;AAEA,IAAI0B,UAAU,GAAGxB,sBAAsB,CAACuB,SAAD,CAAvC;;AAEA,IAAIE,eAAe,GAAG3B,OAAO,CAAC,8CAAD,CAA7B;;AAEA,IAAI4B,gBAAgB,GAAG1B,sBAAsB,CAACyB,eAAD,CAA7C;;AAEA,IAAIE,QAAQ,GAAG7B,OAAO,CAAC,8BAAD,CAAtB;;AAEA,IAAI8B,QAAQ,GAAG5B,sBAAsB,CAAC2B,QAAD,CAArC;;AAEA,IAAIE,yBAAyB,GAAG/B,OAAO,CAAC,0DAAD,CAAvC;;AAEA,IAAIgC,0BAA0B,GAAG9B,sBAAsB,CAAC6B,yBAAD,CAAvD;;AAEA,SAAS7B,sBAAT,CAAgC+B,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;;AAE/F,IAAIG,UAAU,GAAGC,SAAS,IAAIA,SAAS,CAACD,UAAvB,IAAqC,UAAUE,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AAC3F,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MACIC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAG,CAAC,GAAGT,0BAA0B,CAACG,OAA/B,EAAwCI,MAAxC,EAAgDC,GAAhD,CAAvB,GAA8EC,IADvG;AAAA,MAEIK,CAFJ;AAGA,MAAI,CAAC,OAAOC,OAAP,KAAmB,WAAnB,GAAiC,WAAjC,GAA+C,CAAC,GAAGjB,QAAQ,CAACK,OAAb,EAAsBY,OAAtB,CAAhD,MAAoF,QAApF,IAAgG,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAAhI,EAA4IH,CAAC,GAAGE,OAAO,CAACC,QAAR,CAAiBV,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA5I,KAAqM,KAAK,IAAIQ,CAAC,GAAGX,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCK,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C,EAAiD;AAClP,QAAIH,CAAC,GAAGR,UAAU,CAACW,CAAD,CAAlB,EAAuBJ,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQI,CAAC,CAACD,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQI,CAAC,CAACP,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BC,CAAC,CAACP,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAC1B;AAAA,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAc,CAAC,GAAGjB,gBAAgB,CAACO,OAArB,EAA8BI,MAA9B,EAAsCC,GAAtC,EAA2CK,CAA3C,CAAd,EAA6DA,CAApE;AACJ,CAPD;;AAQA,IAAIK,UAAU,GAAGb,SAAS,IAAIA,SAAS,CAACa,UAAvB,IAAqC,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAClE,MAAI,CAAC,OAAOL,OAAP,KAAmB,WAAnB,GAAiC,WAAjC,GAA+C,CAAC,GAAGjB,QAAQ,CAACK,OAAb,EAAsBY,OAAtB,CAAhD,MAAoF,QAApF,IAAgG,OAAOrB,UAAU,CAACS,OAAlB,KAA8B,UAAlI,EAA8I,OAAO,CAAC,GAAGT,UAAU,CAACS,OAAf,EAAwBgB,CAAxB,EAA2BC,CAA3B,CAAP;AACjJ,CAFD;;AAGAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,gBAAR,GAA2BF,OAAO,CAACG,MAAR,GAAiBH,OAAO,CAACI,IAAR,GAAe,KAAK,CAAhE;;AACA,IAAIC,QAAQ,GAAG5D,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAI6D,QAAQ,GAAG7D,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAI8D,eAAe,GAAG9D,OAAO,CAAC,iBAAD,CAA7B;;AACA,IAAI+D,MAAM,GAAG/D,OAAO,CAAC,QAAD,CAApB;;AACAqD,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,MAA/B,EAAuC;AAAES,EAAAA,UAAU,EAAE,IAAd;AAAoBC,EAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AACvE,WAAOF,MAAM,CAACJ,IAAd;AACH;AAFkC,CAAvC;;AAGA,IAAIO,SAAS,GAAGlE,OAAO,CAAC,oBAAD,CAAvB;;AACA,IAAImE,mBAAmB,GAAGnE,OAAO,CAAC,gCAAD,CAAjC;;AACA,IAAIoE,UAAU,GAAGpE,OAAO,CAAC,YAAD,CAAxB;;AACA,IAAIqE,UAAU,GAAGrE,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAIsE,sBAAsB,GAAGtE,OAAO,CAAC,sBAAD,CAApC;;AACA,IAAIuE,aAAa,GAAGvE,OAAO,CAAC,aAAD,CAA3B;;AACA,IAAIwE,mBAAmB,GAAGxE,OAAO,CAAC,mBAAD,CAAjC;;AACA,IAAIyE,SAAS,GAAGzE,OAAO,CAAC,WAAD,CAAvB;;AACA,IAAI0E,eAAe,GAAG1E,OAAO,CAAC,sBAAD,CAA7B;;AACA,IAAI2E,OAAO,GAAG3E,OAAO,CAAC,cAAD,CAArB;;AACA,IAAI4E,iBAAiB,GAAG5E,OAAO,CAAC,4BAAD,CAA/B;;AACA,IAAI6E,oBAAoB,GAAG7E,OAAO,CAAC,+BAAD,CAAlC;;AACA,IAAI8E,kBAAkB,GAAG9E,OAAO,CAAC,oBAAD,CAAhC;;AACAqD,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,kBAA/B,EAAmD;AAAES,EAAAA,UAAU,EAAE,IAAd;AAAoBC,EAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AACnF,WAAOa,kBAAkB,CAACrB,gBAA1B;AACH;AAF8C,CAAnD;;AAGA,IAAIsB,MAAM,GAAG/E,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIgF,WAAW,GAAGhF,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAIiF,GAAG,GAAGpB,QAAQ,CAACqB,MAAT,CAAgBC,KAAhB,CAAsB,QAAtB,CAAV;;AACA,IAAIC,WAAW,GAAGpF,OAAO,CAAC,mBAAD,CAAP,CAA6BqF,OAA/C;;AAEA,IAAIC,cAAc,GAAG,SAASA,cAAT,GAA0B;AAC3C,GAAC,GAAG9D,gBAAgB,CAACW,OAArB,EAA8B,IAA9B,EAAoCmD,cAApC;AACH,CAFD;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAI5B,MAAM,GAAG,UAAU6B,qBAAV,EAAiC;AAC1C,GAAC,GAAGjE,UAAU,CAACa,OAAf,EAAwBuB,MAAxB,EAAgC6B,qBAAhC;AAEA;AACJ;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;;AACI;AACJ;AACA;AACA;AACI;;AACA;AACJ;AACA;AACA;AACA;AACA;;AACI,WAAS7B,MAAT,CAAgB8B,KAAhB,EAAuBC,OAAvB,EAAgC;AAC5B,KAAC,GAAGjE,gBAAgB,CAACW,OAArB,EAA8B,IAA9B,EAAoCuB,MAApC;;AAEA,QAAIgC,KAAK,GAAG,CAAC,GAAGtE,2BAA2B,CAACe,OAAhC,EAAyC,IAAzC,EAA+C,CAACuB,MAAM,CAACiC,SAAP,IAAoB,CAAC,GAAG3E,gBAAgB,CAACmB,OAArB,EAA8BuB,MAA9B,CAArB,EAA4DkC,IAA5D,CAAiE,IAAjE,CAA/C,CAAZ;;AAEAF,IAAAA,KAAK,CAACG,eAAN,GAAwB,YAAxB;AACAH,IAAAA,KAAK,CAACI,cAAN,GAAuB,IAAvB;AACAJ,IAAAA,KAAK,CAACK,oBAAN,GAA6B,IAA7B;AACAL,IAAAA,KAAK,CAACL,OAAN,GAAgBD,WAAhB;AACAM,IAAAA,KAAK,CAACM,qBAAN,GAA8BtC,MAAM,CAACsC,qBAArC;AACAN,IAAAA,KAAK,CAACD,OAAN,GAAgBA,OAAO,IAAI,EAA3B;;AACA,QAAI,CAACC,KAAK,CAACD,OAAN,CAAcQ,gBAAnB,EAAqC;AACjCP,MAAAA,KAAK,CAACD,OAAN,GAAgBV,MAAM,CAACmB,SAAP,CAAiBR,KAAK,CAACD,OAAvB,CAAhB;AACH;;AACDC,IAAAA,KAAK,CAACD,OAAN,CAAcU,QAAd,GAAyBT,KAAK,CAACD,OAAN,CAAcU,QAAd,IAA0B,QAAnD;AACAlB,IAAAA,GAAG,CAACmB,QAAJ,CAAaV,KAAK,CAACD,OAAN,CAAcU,QAA3B;AACA,QAAIE,SAAS,GAAGX,KAAK,CAACD,OAAN,CAAcY,SAAd,GAA0B,cAA1C,CAhB4B,CAiB5B;;AACAX,IAAAA,KAAK,CAACD,OAAN,CAAca,cAAd,GAA+BZ,KAAK,CAACD,OAAN,CAAca,cAAd,IAAgC,EAA/D;;AACA,QAAI,CAACZ,KAAK,CAACD,OAAN,CAAca,cAAd,CAA6BC,cAA7B,CAA4C,MAA5C,CAAL,EAA0D;AACtDb,MAAAA,KAAK,CAACD,OAAN,CAAca,cAAd,CAA6BE,IAA7B,GAAoC,eAApC;AACH;;AACD,QAAI,CAACd,KAAK,CAACD,OAAN,CAAca,cAAd,CAA6BC,cAA7B,CAA4C,KAA5C,CAAL,EAAyD;AACrDb,MAAAA,KAAK,CAACD,OAAN,CAAca,cAAd,CAA6BG,GAA7B,GAAmC,IAAnC;AACAf,MAAAA,KAAK,CAACD,OAAN,CAAca,cAAd,CAA6BI,IAA7B,GAAoCtB,WAApC;AACH,KAzB2B,CA0B5B;;;AACAM,IAAAA,KAAK,CAACD,OAAN,CAAckB,IAAd,GAAqBjB,KAAK,CAACD,OAAN,CAAckB,IAAd,IAAsB,EAA3C;;AACA,QAAI,OAAOjB,KAAK,CAACD,OAAN,CAAckB,IAAd,CAAmBC,oBAA1B,KAAmD,WAAvD,EAAoE;AAChElB,MAAAA,KAAK,CAACD,OAAN,CAAckB,IAAd,CAAmBC,oBAAnB,GAA0C,IAA1C;AACH;;AACD,QAAIlB,KAAK,CAACD,OAAN,CAAcoB,MAAlB,EAA0B;AACtBnB,MAAAA,KAAK,CAACD,OAAN,CAAckB,IAAd,CAAmBE,MAAnB,GAA4BnB,KAAK,CAACD,OAAN,CAAcoB,MAA1C;AACH;;AACD,QAAI,CAACrB,KAAL,EAAY;AACR,YAAM,IAAIsB,KAAJ,CAAU,yCAAV,CAAN;AACH;;AACDpB,IAAAA,KAAK,CAACqB,QAAN,GAAiB,IAAIzB,cAAJ,EAAjB;AACAI,IAAAA,KAAK,CAACsB,MAAN,GAAe,IAAIlD,eAAe,CAACmD,aAApB,CAAkCvB,KAAK,CAACD,OAAxC,CAAf;AACAC,IAAAA,KAAK,CAACD,OAAN,CAAcyB,cAAd,GAA+BxB,KAAK,CAACD,OAAN,CAAcyB,cAAd,IAAgC,IAAI7C,UAAU,CAAC8C,QAAf,CAAwB3B,KAAxB,EAA+Ba,SAA/B,EAA0CX,KAAK,CAACD,OAAhD,CAA/D;AACAC,IAAAA,KAAK,CAACD,OAAN,CAAc2B,SAAd,GAA0B1B,KAAK,CAACD,OAAN,CAAc2B,SAAd,IAA2B1B,KAAK,CAACD,OAAN,CAAcyB,cAAnE;AACAxB,IAAAA,KAAK,CAACD,OAAN,CAAc4B,mBAAd,GAAoC3B,KAAK,CAACD,OAAN,CAAc4B,mBAAd,IAAqC,IAAI/C,sBAAsB,CAACgD,aAA3B,CAAyC9B,KAAzC,EAAgDE,KAAK,CAACD,OAAtD,CAAzE;AACAC,IAAAA,KAAK,CAACD,OAAN,CAAc8B,UAAd,GAA2B7B,KAAK,CAACD,OAAN,CAAc8B,UAAd,IAA4B,IAAIhD,aAAa,CAACiD,UAAlB,CAA6BhC,KAA7B,EAAoCE,KAAK,CAACD,OAA1C,CAAvD;AACAC,IAAAA,KAAK,CAACqB,QAAN,CAAeQ,UAAf,GAA4B7B,KAAK,CAACD,OAAN,CAAc8B,UAA1C;AACA7B,IAAAA,KAAK,CAACqB,QAAN,CAAeK,SAAf,GAA2B1B,KAAK,CAACD,OAAN,CAAc2B,SAAzC;AACA1B,IAAAA,KAAK,CAACqB,QAAN,CAAeG,cAAf,GAAgCxB,KAAK,CAACD,OAAN,CAAcyB,cAA9C;AACAxB,IAAAA,KAAK,CAACqB,QAAN,CAAeU,kBAAf,GAAoC/B,KAAK,CAACD,OAAN,CAAc4B,mBAAlD;AACA3B,IAAAA,KAAK,CAACqB,QAAN,CAAeW,OAAf,GAAyB,IAAIjD,SAAS,CAACkD,OAAd,CAAsBjC,KAAK,CAACqB,QAA5B,EAAsCrB,KAAK,CAACsB,MAA5C,CAAzB;AACAtB,IAAAA,KAAK,CAACI,cAAN,GAAuBJ,KAAK,CAACqB,QAAN,CAAeW,OAAf,CAAuBE,UAAvB,EAAvB;AACAlC,IAAAA,KAAK,CAACqB,QAAN,CAAec,OAAf,GAAyB,IAAI3D,SAAS,CAAC4D,OAAd,CAAsBpC,KAAK,CAACsB,MAA5B,EAAoCtB,KAAK,CAACqB,QAA1C,CAAzB;AACArB,IAAAA,KAAK,CAACqB,QAAN,CAAegB,KAAf,GAAuB,IAAIpD,OAAO,CAACqD,KAAZ,CAAkB;AACrCN,MAAAA,OAAO,EAAEhC,KAAK,CAACqB,QAAN,CAAeW,OADa;AAErCG,MAAAA,OAAO,EAAEnC,KAAK,CAACqB,QAAN,CAAec,OAFa;AAGrCN,MAAAA,UAAU,EAAE7B,KAAK,CAACqB,QAAN,CAAeQ;AAHU,KAAlB,CAAvB;;AAKA7B,IAAAA,KAAK,CAACqB,QAAN,CAAegB,KAAf,CAAqBE,EAArB,CAAwB,gBAAxB,EAA0CvC,KAAK,CAACwC,IAAN,CAAWC,IAAX,CAAgBzC,KAAhB,EAAuB,gBAAvB,CAA1C;;AACAA,IAAAA,KAAK,CAACqB,QAAN,CAAegB,KAAf,CAAqBE,EAArB,CAAwB,aAAxB,EAAuC,UAAUG,IAAV,EAAgB;AACnD,aAAO1C,KAAK,CAACwC,IAAN,CAAW,aAAX,EAA0BE,IAA1B,CAAP;AACH,KAFD;;AAGA1C,IAAAA,KAAK,CAACqB,QAAN,CAAegB,KAAf,CAAqBE,EAArB,CAAwB,kBAAxB,EAA4CvC,KAAK,CAACwC,IAAN,CAAWC,IAAX,CAAgBzC,KAAhB,EAAuB,kBAAvB,CAA5C;;AACAA,IAAAA,KAAK,CAACqB,QAAN,CAAeG,cAAf,CAA8Be,EAA9B,CAAiC,oBAAjC,EAAuD,UAAUI,GAAV,EAAe;AAClE,aAAO3C,KAAK,CAACwC,IAAN,CAAW,oBAAX,EAAiCG,GAAjC,CAAP;AACH,KAFD;;AAGA3C,IAAAA,KAAK,CAACqB,QAAN,CAAeG,cAAf,CAA8Be,EAA9B,CAAiC,cAAjC,EAAiD,YAAY;AACzD,aAAOvC,KAAK,CAACwC,IAAN,CAAW,cAAX,CAAP;AACH,KAFD;;AAGAxC,IAAAA,KAAK,CAACqB,QAAN,CAAeG,cAAf,CAA8Be,EAA9B,CAAiC,iBAAjC,EAAoD,UAAUK,KAAV,EAAiB;AACjE,aAAO5C,KAAK,CAACwC,IAAN,CAAW,iBAAX,EAA8BI,KAA9B,CAAP;AACH,KAFD;;AAGA5C,IAAAA,KAAK,CAACqB,QAAN,CAAewB,kBAAf,GAAoC,IAAI1D,oBAAoB,CAAC2D,kBAAzB,CAA4C9C,KAAK,CAACqB,QAAlD,CAApC;AACArB,IAAAA,KAAK,CAACqB,QAAN,CAAe0B,eAAf,GAAiC,IAAI7D,iBAAiB,CAAC8D,eAAtB,CAAsChD,KAAK,CAACsB,MAA5C,EAAoD;AACjFI,MAAAA,SAAS,EAAE1B,KAAK,CAACqB,QAAN,CAAeG,cADuD;AAEjFO,MAAAA,kBAAkB,EAAE/B,KAAK,CAACqB,QAAN,CAAeU;AAF8C,KAApD,EAG9B/B,KAAK,CAACiD,oBAAN,CAA2BR,IAA3B,CAAgCzC,KAAhC,CAH8B,CAAjC;AAIAA,IAAAA,KAAK,CAACqB,QAAN,CAAe6B,QAAf,GAA0B,IAAIxE,UAAU,CAACyE,QAAf,CAAwBnD,KAAK,CAACqB,QAA9B,CAA1B;AACArB,IAAAA,KAAK,CAACoD,aAAN,GAAsB,IAAIpE,eAAe,CAACqE,aAApB,CAAkCrD,KAAK,CAACqB,QAAxC,CAAtB;AACArB,IAAAA,KAAK,CAACK,oBAAN,GAA6BL,KAAK,CAACI,cAAN,CAAqBkD,IAArB,CAA0B,YAAY;AAC/DtD,MAAAA,KAAK,CAACoD,aAAN,CAAoBb,EAApB,CAAuB,mBAAvB,EAA4CvC,KAAK,CAACwC,IAAN,CAAWC,IAAX,CAAgBzC,KAAhB,EAAuB,mBAAvB,CAA5C;;AACAA,MAAAA,KAAK,CAACoD,aAAN,CAAoBb,EAApB,CAAuB,qBAAvB,EAA8CvC,KAAK,CAACwC,IAAN,CAAWC,IAAX,CAAgBzC,KAAhB,EAAuB,qBAAvB,CAA9C,EAF+D,CAG/D;;;AACAA,MAAAA,KAAK,CAACoD,aAAN,CAAoBb,EAApB,CAAuB,oBAAvB,EAA6CvC,KAAK,CAACwC,IAAN,CAAWC,IAAX,CAAgBzC,KAAhB,EAAuB,oBAAvB,CAA7C;;AACAA,MAAAA,KAAK,CAACoD,aAAN,CAAoBb,EAApB,CAAuB,kBAAvB,EAA2CvC,KAAK,CAACwC,IAAN,CAAWC,IAAX,CAAgBzC,KAAhB,EAAuB,kBAAvB,CAA3C;;AACAA,MAAAA,KAAK,CAACoD,aAAN,CAAoBb,EAApB,CAAuB,qBAAvB,EAA8C,UAAUG,IAAV,EAAgB;AAC1D,eAAO1C,KAAK,CAACwC,IAAN,CAAW,qBAAX,EAAkCE,IAAlC,CAAP;AACH,OAFD;;AAGA1C,MAAAA,KAAK,CAACoD,aAAN,CAAoBb,EAApB,CAAuB,mBAAvB,EAA4CvC,KAAK,CAACwC,IAAN,CAAWC,IAAX,CAAgBzC,KAAhB,EAAuB,mBAAvB,CAA5C;;AACAA,MAAAA,KAAK,CAACoD,aAAN,CAAoBb,EAApB,CAAuB,iBAAvB,EAA0CvC,KAAK,CAACwC,IAAN,CAAWC,IAAX,CAAgBzC,KAAhB,EAAuB,iBAAvB,CAA1C;;AACAA,MAAAA,KAAK,CAACoD,aAAN,CAAoBb,EAApB,CAAuB,oBAAvB,EAA6C,UAAUG,IAAV,EAAgB;AACzD,eAAO1C,KAAK,CAACwC,IAAN,CAAW,oBAAX,EAAiCE,IAAjC,CAAP;AACH,OAFD;;AAGA1C,MAAAA,KAAK,CAACoD,aAAN,CAAoBb,EAApB,CAAuB,cAAvB,EAAuCvC,KAAK,CAACwC,IAAN,CAAWC,IAAX,CAAgBzC,KAAhB,EAAuB,cAAvB,CAAvC;;AACAA,MAAAA,KAAK,CAACoD,aAAN,CAAoBb,EAApB,CAAuB,gBAAvB,EAAyC,UAAUG,IAAV,EAAgB;AACrD,eAAO1C,KAAK,CAACwC,IAAN,CAAW,gBAAX,EAA6BE,IAA7B,CAAP;AACH,OAFD;;AAGA1C,MAAAA,KAAK,CAACoD,aAAN,CAAoBb,EAApB,CAAuB,gBAAvB,EAAyCvC,KAAK,CAACwC,IAAN,CAAWC,IAAX,CAAgBzC,KAAhB,EAAuB,gBAAvB,CAAzC;;AACAA,MAAAA,KAAK,CAACoD,aAAN,CAAoBb,EAApB,CAAuB,eAAvB,EAAwCvC,KAAK,CAACwC,IAAN,CAAWC,IAAX,CAAgBzC,KAAhB,EAAuB,eAAvB,CAAxC;;AACAA,MAAAA,KAAK,CAACoD,aAAN,CAAoBb,EAApB,CAAuB,aAAvB,EAAsCvC,KAAK,CAACwC,IAAN,CAAWC,IAAX,CAAgBzC,KAAhB,EAAuB,aAAvB,CAAtC;;AACA,aAAOA,KAAK,CAACoD,aAAN,CAAoBG,kBAApB,EAAP;AACH,KAtB4B,EAsB1BD,IAtB0B,CAsBrB,YAAY;AAChB,aAAOtD,KAAK,CAACoD,aAAb;AACH,KAxB4B,CAA7B;;AAyBApD,IAAAA,KAAK,CAACqB,QAAN,CAAeU,kBAAf,CAAkCQ,EAAlC,CAAqC,wBAArC,EAA+D,UAAUiB,KAAV,EAAiB;AAC5E,UAAIC,sBAAsB,GAAG,IAA7B;;AACA,cAAQD,KAAR;AACI,aAAK,WAAL;AACIC,UAAAA,sBAAsB,GAAG,WAAzB;AACA;;AACJ,aAAK,QAAL;AACIA,UAAAA,sBAAsB,GAAG,QAAzB;AACA;;AACJ,aAAK,eAAL;AACIA,UAAAA,sBAAsB,GAAG,eAAzB;AACA;;AACJ,aAAK,cAAL;AACIA,UAAAA,sBAAsB,GAAG,cAAzB;AACA;;AACJ;AACIA,UAAAA,sBAAsB,GAAG,YAAzB;AAdR;;AAgBA,UAAIA,sBAAsB,KAAKzD,KAAK,CAACG,eAArC,EAAsD;AAClDH,QAAAA,KAAK,CAACG,eAAN,GAAwBsD,sBAAxB;;AACAzD,QAAAA,KAAK,CAACwC,IAAN,CAAW,wBAAX,EAAqCxC,KAAK,CAACG,eAA3C;AACH;AACJ,KAtBD;;AAuBAH,IAAAA,KAAK,CAAC0D,QAAN,GAAiB5D,KAAjB;AACA,WAAOE,KAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AAGI,GAAC,GAAGxE,aAAa,CAACiB,OAAlB,EAA2BuB,MAA3B,EAAmC,CAAC;AAChClB,IAAAA,GAAG,EAAE,8BAD2B;AAEhCgB,IAAAA,KAAK,EAAE,SAAS6F,4BAAT,CAAsCC,WAAtC,EAAmD;AACtD,UAAIC,MAAM,GAAG,IAAb;;AAEA,UAAIC,aAAa,GAAG,EAApB;AACA,OAACrF,mBAAmB,CAACsF,iBAApB,CAAsCC,WAAvC,EAAoDvF,mBAAmB,CAACsF,iBAApB,CAAsCE,gBAA1F,EACA;AACAxF,MAAAA,mBAAmB,CAACsF,iBAApB,CAAsCG,oBAFtC,EAE4DzF,mBAAmB,CAACsF,iBAApB,CAAsCI,gBAFlG,EAEoH1F,mBAAmB,CAACsF,iBAApB,CAAsCK,kBAF1J,EAE8KC,OAF9K,CAEsL,UAAUC,WAAV,EAAuB;AACzMR,QAAAA,aAAa,CAACS,IAAd,CAAmBV,MAAM,CAACxC,QAAP,CAAgBU,kBAAhB,CAAmCyC,SAAnC,CAA6CF,WAA7C,EAA0DV,WAA1D,CAAnB;AACH,OAJD;AAKA,aAAOxI,SAAS,CAACqB,OAAV,CAAkBgI,GAAlB,CAAsBX,aAAtB,CAAP;AACH;AAZ+B,GAAD,EAahC;AACChH,IAAAA,GAAG,EAAE,kCADN;AAECgB,IAAAA,KAAK,EAAE,SAAS4G,gCAAT,CAA0Cd,WAA1C,EAAuD;AAC1D,UAAIe,MAAM,GAAG,IAAb;;AAEA,UAAIb,aAAa,GAAG,EAApB;AACA,OAACrF,mBAAmB,CAACsF,iBAApB,CAAsCC,WAAvC,EAAoDvF,mBAAmB,CAACsF,iBAApB,CAAsCE,gBAA1F,EACA;AACAxF,MAAAA,mBAAmB,CAACsF,iBAApB,CAAsCG,oBAFtC,EAE4DzF,mBAAmB,CAACsF,iBAApB,CAAsCI,gBAFlG,EAEoH1F,mBAAmB,CAACsF,iBAApB,CAAsCK,kBAF1J,EAE8KC,OAF9K,CAEsL,UAAUC,WAAV,EAAuB;AACzMR,QAAAA,aAAa,CAACS,IAAd,CAAmBI,MAAM,CAACtD,QAAP,CAAgBU,kBAAhB,CAAmC6C,WAAnC,CAA+CN,WAA/C,EAA4DV,WAA5D,CAAnB;AACH,OAJD;AAKA,aAAOxI,SAAS,CAACqB,OAAV,CAAkBgI,GAAlB,CAAsBX,aAAtB,CAAP;AACH;AAZF,GAbgC,EA0BhC;AACChH,IAAAA,GAAG,EAAE,YADN;AAECgB,IAAAA,KAAK,EAAE,YAAY;AACf,UAAI+G,IAAI,GAAG,CAAC,GAAG3J,kBAAkB,CAACuB,OAAvB,GAAiC,aAAa3B,aAAa,CAAC2B,OAAd,CAAsBqI,IAAtB,CAA2B,SAASC,OAAT,GAAmB;AACnG,YAAIC,MAAM,GAAG,IAAb;;AAEA,YAAIC,KAAJ,EAAWlF,OAAX;AACA,eAAOjF,aAAa,CAAC2B,OAAd,CAAsByI,IAAtB,CAA2B,SAASC,QAAT,CAAkBC,QAAlB,EAA4B;AAC1D,iBAAO,CAAP,EAAU;AACN,oBAAQA,QAAQ,CAACC,IAAT,GAAgBD,QAAQ,CAACE,IAAjC;AACI,mBAAK,CAAL;AACIF,gBAAAA,QAAQ,CAACE,IAAT,GAAgB,CAAhB;AACA,uBAAO,KAAKlF,cAAZ;;AAEJ,mBAAK,CAAL;AACIpC,gBAAAA,MAAM,CAACuH,qBAAP,CAA6BlB,OAA7B,CAAqC,UAAUT,WAAV,EAAuB;AACxD,yBAAOoB,MAAM,CAACrB,4BAAP,CAAoCC,WAApC,CAAP;AACH,iBAFD;AAGAwB,gBAAAA,QAAQ,CAACE,IAAT,GAAgB,CAAhB;AACA,uBAAO,KAAKjE,QAAL,CAAcW,OAAd,CAAsBwD,eAAtB,EAAP;;AAEJ,mBAAK,CAAL;AACIP,gBAAAA,KAAK,GAAGG,QAAQ,CAACK,IAAjB,CADJ,CAGI;AACA;;AACA1F,gBAAAA,OAAO,GAAG,CAAC,GAAG/E,QAAQ,CAACyB,OAAb,EAAsB,KAAKsD,OAA3B,CAAV;AAEAA,gBAAAA,OAAO,CAAC2B,SAAR,GAAoB,IAApB;AACA,qBAAKL,QAAL,CAAcqE,SAAd,GAA0B,IAAI5G,mBAAmB,CAAC6G,SAAxB,CAAkC,KAAKjC,QAAvC,EAAiDuB,KAAK,CAACW,eAAvD,EAAwE7F,OAAxE,CAA1B;AACAqF,gBAAAA,QAAQ,CAACE,IAAT,GAAgB,EAAhB;AACA,uBAAO,KAAKjE,QAAL,CAAc0B,eAAd,CAA8Bb,UAA9B,EAAP;;AAEJ,mBAAK,EAAL;AACA,mBAAK,KAAL;AACI,uBAAOkD,QAAQ,CAACS,IAAT,EAAP;AA1BR;AA4BH;AACJ,SA/BM,EA+BJd,OA/BI,EA+BK,IA/BL,CAAP;AAgCH,OApCwD,CAA9C,CAAX;;AAsCA,eAAS7C,UAAT,GAAsB;AAClB,eAAO2C,IAAI,CAACiB,KAAL,CAAW,IAAX,EAAiB7I,SAAjB,CAAP;AACH;;AAED,aAAOiF,UAAP;AACH,KA5CM;AA6CP;AACR;AACA;AACA;AACA;;AAnDO,GA1BgC,EA+EhC;AACCpF,IAAAA,GAAG,EAAE,UADN;AAECgB,IAAAA,KAAK,EAAE,YAAY;AACf,UAAIiI,KAAK,GAAG,CAAC,GAAG7K,kBAAkB,CAACuB,OAAvB,GAAiC,aAAa3B,aAAa,CAAC2B,OAAd,CAAsBqI,IAAtB,CAA2B,SAASkB,QAAT,GAAoB;AACrG,eAAOlL,aAAa,CAAC2B,OAAd,CAAsByI,IAAtB,CAA2B,SAASe,SAAT,CAAmBC,SAAnB,EAA8B;AAC5D,iBAAO,CAAP,EAAU;AACN,oBAAQA,SAAS,CAACb,IAAV,GAAiBa,SAAS,CAACZ,IAAnC;AACI,mBAAK,CAAL;AACIY,gBAAAA,SAAS,CAACZ,IAAV,GAAiB,CAAjB;AACA,uBAAO,KAAKjE,QAAL,CAAcG,cAAd,CAA6B2E,UAA7B,EAAP;;AAEJ,mBAAK,CAAL;AACA,mBAAK,KAAL;AACI,uBAAOD,SAAS,CAACL,IAAV,EAAP;AAPR;AASH;AACJ,SAZM,EAYJG,QAZI,EAYM,IAZN,CAAP;AAaH,OAdyD,CAA9C,CAAZ;;AAgBA,eAASI,QAAT,GAAoB;AAChB,eAAOL,KAAK,CAACD,KAAN,CAAY,IAAZ,EAAkB7I,SAAlB,CAAP;AACH;;AAED,aAAOmJ,QAAP;AACH,KAtBM;AAuBP;AACR;AACA;AACA;AACA;AACA;;AA9BO,GA/EgC,EA+GhC;AACCtJ,IAAAA,GAAG,EAAE,aADN;AAECgB,IAAAA,KAAK,EAAE,YAAY;AACf,UAAIuI,KAAK,GAAG,CAAC,GAAGnL,kBAAkB,CAACuB,OAAvB,GAAiC,aAAa3B,aAAa,CAAC2B,OAAd,CAAsBqI,IAAtB,CAA2B,SAASwB,QAAT,CAAkBxG,KAAlB,EAAyB;AAC1G,YAAIyG,MAAM,GAAG,IAAb;;AAEA,eAAOzL,aAAa,CAAC2B,OAAd,CAAsByI,IAAtB,CAA2B,SAASsB,SAAT,CAAmBC,SAAnB,EAA8B;AAC5D,iBAAO,CAAP,EAAU;AACN,oBAAQA,SAAS,CAACpB,IAAV,GAAiBoB,SAAS,CAACnB,IAAnC;AACI,mBAAK,CAAL;AACI/F,gBAAAA,GAAG,CAACmH,IAAJ,CAAS,aAAT;;AAEA,oBAAI,EAAE,KAAKhD,QAAL,KAAkB5D,KAApB,CAAJ,EAAgC;AAC5B2G,kBAAAA,SAAS,CAACnB,IAAV,GAAiB,CAAjB;AACA;AACH;;AAED,uBAAOmB,SAAS,CAACE,MAAV,CAAiB,QAAjB,EAA2B,IAA3B,CAAP;;AAEJ,mBAAK,CAAL;AACIF,gBAAAA,SAAS,CAACnB,IAAV,GAAiB,CAAjB;AACA,uBAAO,KAAKjE,QAAL,CAAcG,cAAd,CAA6BoF,WAA7B,CAAyC9G,KAAzC,EAAgDwD,IAAhD,CAAqD,YAAY;AACpE,yBAAOiD,MAAM,CAAC7C,QAAP,GAAkB5D,KAAzB;AACH,iBAFM,EAEJwD,IAFI,CAEC,YAAY;AAChB,yBAAOiD,MAAM,CAAClF,QAAP,CAAgBqE,SAAhB,CAA0BkB,WAA1B,CAAsC9G,KAAtC,CAAP;AACH,iBAJM,EAIJwD,IAJI,CAIC,YAAY;AAChB,yBAAOiD,MAAM,CAACnG,cAAd;AACH,iBANM,CAAP;;AAQJ,mBAAK,CAAL;AACI,uBAAOqG,SAAS,CAACE,MAAV,CAAiB,QAAjB,EAA2B,IAA3B,CAAP;;AAEJ,mBAAK,CAAL;AACA,mBAAK,KAAL;AACI,uBAAOF,SAAS,CAACZ,IAAV,EAAP;AA1BR;AA4BH;AACJ,SA/BM,EA+BJS,QA/BI,EA+BM,IA/BN,CAAP;AAgCH,OAnCyD,CAA9C,CAAZ;;AAqCA,eAASM,WAAT,CAAqBC,EAArB,EAAyB;AACrB,eAAOR,KAAK,CAACP,KAAN,CAAY,IAAZ,EAAkB7I,SAAlB,CAAP;AACH;;AAED,aAAO2J,WAAP;AACH,KA3CM;AA4CP;AACR;AACA;AACA;AACA;;AAlDO,GA/GgC,EAmKhC;AACC9J,IAAAA,GAAG,EAAE,sBADN;AAECgB,IAAAA,KAAK,EAAE,YAAY;AACf,UAAIgJ,KAAK,GAAG,CAAC,GAAG5L,kBAAkB,CAACuB,OAAvB,GAAiC,aAAa3B,aAAa,CAAC2B,OAAd,CAAsBqI,IAAtB,CAA2B,SAASiC,QAAT,CAAkBC,eAAlB,EAAmC;AACpH,YAAIC,MAAM,GAAG,IAAb;;AAEA,eAAOnM,aAAa,CAAC2B,OAAd,CAAsByI,IAAtB,CAA2B,SAASgC,SAAT,CAAmBC,SAAnB,EAA8B;AAC5D,iBAAO,CAAP,EAAU;AACN,oBAAQA,SAAS,CAAC9B,IAAV,GAAiB8B,SAAS,CAAC7B,IAAnC;AACI,mBAAK,CAAL;AACI,uBAAO6B,SAAS,CAACR,MAAV,CAAiB,QAAjB,EAA2B,KAAKvD,aAAL,CAAmBgE,YAAnB,CAAgCC,OAAhC,CAAwC/D,IAAxC,CAA6C,YAAY;AACvF,yBAAO2D,MAAM,CAAC7D,aAAP,CAAqBkE,eAArB,CAAqCN,eAArC,CAAP;AACH,iBAFiC,EAE/B1D,IAF+B,CAE1B,UAAUiE,YAAV,EAAwB;AAC5B,sBAAI,CAACA,YAAL,EAAmB;AACf,0BAAM,IAAInG,KAAJ,CAAU,2BAA2B4F,eAA3B,GAA6C,gBAAvD,CAAN;AACH;;AACD,yBAAOO,YAAP;AACH,iBAPiC,CAA3B,CAAP;;AASJ,mBAAK,CAAL;AACA,mBAAK,KAAL;AACI,uBAAOJ,SAAS,CAACtB,IAAV,EAAP;AAbR;AAeH;AACJ,SAlBM,EAkBJkB,QAlBI,EAkBM,IAlBN,CAAP;AAmBH,OAtByD,CAA9C,CAAZ;;AAwBA,eAAS9D,oBAAT,CAA8BuE,GAA9B,EAAmC;AAC/B,eAAOV,KAAK,CAAChB,KAAN,CAAY,IAAZ,EAAkB7I,SAAlB,CAAP;AACH;;AAED,aAAOgG,oBAAP;AACH,KA9BM;AA+BP;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ;AACR;AACA;AACA;;AApDO,GAnKgC,EAyNhC;AACCnG,IAAAA,GAAG,EAAE,4BADN;AAECgB,IAAAA,KAAK,EAAE,SAAS2J,0BAAT,CAAoC/E,IAApC,EAA0C;AAC7C,aAAO,KAAKrC,oBAAL,CAA0BiD,IAA1B,CAA+B,UAAUF,aAAV,EAAyB;AAC3D,eAAOA,aAAa,CAACsE,gBAAd,CAA+BhF,IAA/B,CAAP;AACH,OAFM,CAAP;AAGH;AACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AAdO,GAzNgC,EAyOhC;AACC5F,IAAAA,GAAG,EAAE,uBADN;AAECgB,IAAAA,KAAK,EAAE,SAAS6J,qBAAT,CAA+BC,cAA/B,EAA+C;AAClD,aAAO,KAAKvH,oBAAL,CAA0BiD,IAA1B,CAA+B,UAAUuE,QAAV,EAAoB;AACtD,YAAIC,MAAM,GAAG,EAAb;AACAD,QAAAA,QAAQ,CAACzE,aAAT,CAAuBiB,OAAvB,CAA+B,UAAUvG,KAAV,EAAiB;AAC5CgK,UAAAA,MAAM,CAACvD,IAAP,CAAYzG,KAAZ;AACH,SAFD;AAGA,YAAIiK,YAAY,GAAG,CAACH,cAAc,KAAK,IAAnB,IAA2BA,cAAc,KAAK,KAAK,CAAnD,GAAuD,KAAK,CAA5D,GAAgEA,cAAc,CAACI,KAAhF,KAA0F,WAA7G;;AACA,YAAIJ,cAAc,IAAIA,cAAc,CAACK,QAArC,EAA+C;AAC3C,cAAIL,cAAc,CAACK,QAAf,KAA4B,aAAhC,EAA+C;AAC3CH,YAAAA,MAAM,CAACI,IAAP,CAAY,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACxB,qBAAOpK,MAAM,CAACqK,iCAAP,CAAyCF,CAAzC,EAA4CC,CAA5C,EAA+CL,YAA/C,CAAP;AACH,aAFD;AAGA;AACxB;AACA;AACqB,WAPD,MAOO,IAAIH,cAAc,CAACK,QAAf,KAA4B,cAAhC,EAAgD;AACnDH,YAAAA,MAAM,CAACI,IAAP,CAAY,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACxB,qBAAOpK,MAAM,CAACsK,oCAAP,CAA4CH,CAAC,CAACI,YAA9C,EAA4DH,CAAC,CAACG,YAA9D,EAA4ER,YAA5E,CAAP;AACH,aAFD;AAGH;AACJ;;AACD,eAAOD,MAAP;AACH,OArBM,CAAP;AAsBH;AAzBF,GAzOgC,EAmQhC;AACChL,IAAAA,GAAG,EAAE,oBADN;;AAGC;AACR;AACA;AACA;AACA;AACA;AACQgB,IAAAA,KAAK,EAAE,SAAS0K,kBAAT,CAA4BzI,OAA5B,EAAqC;AACxCA,MAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,aAAO,KAAKM,oBAAL,CAA0BiD,IAA1B,CAA+B,UAAUmF,mBAAV,EAA+B;AACjE,eAAOA,mBAAmB,CAACC,eAApB,CAAoC3I,OAApC,CAAP;AACH,OAFM,CAAP;AAGH;AACD;AACR;AACA;AACA;AACA;AACA;;AApBO,GAnQgC,EAyRhC;AACCjD,IAAAA,GAAG,EAAE,uBADN;AAECgB,IAAAA,KAAK,EAAE,YAAY;AACf,UAAI6K,KAAK,GAAG,CAAC,GAAGzN,kBAAkB,CAACuB,OAAvB,GAAiC,aAAa3B,aAAa,CAAC2B,OAAd,CAAsBqI,IAAtB,CAA2B,SAAS8D,QAAT,CAAkBhF,WAAlB,EAA+BiF,cAA/B,EAA+C;AAChI,YAAIC,MAAM,GAAG,IAAb;;AAEA,eAAOhO,aAAa,CAAC2B,OAAd,CAAsByI,IAAtB,CAA2B,SAAS6D,SAAT,CAAmBC,SAAnB,EAA8B;AAC5D,iBAAO,CAAP,EAAU;AACN,oBAAQA,SAAS,CAAC3D,IAAV,GAAiB2D,SAAS,CAAC1D,IAAnC;AACI,mBAAK,CAAL;AACI0D,gBAAAA,SAAS,CAAC1D,IAAV,GAAiB,CAAjB;AACA,uBAAO,KAAK3B,4BAAL,CAAkCC,WAAlC,EAA+CN,IAA/C,CAAoD,YAAY;AACnE,yBAAOwF,MAAM,CAACzH,QAAP,CAAgBU,kBAAhB,CAAmCkH,qBAAnC,CAAyDJ,cAAzD,EAAyEjF,WAAzE,CAAP;AACH,iBAFM,CAAP;;AAIJ,mBAAK,CAAL;AACA,mBAAK,KAAL;AACI,uBAAOoF,SAAS,CAACnD,IAAV,EAAP;AATR;AAWH;AACJ,SAdM,EAcJ+C,QAdI,EAcM,IAdN,CAAP;AAeH,OAlByD,CAA9C,CAAZ;;AAoBA,eAASK,qBAAT,CAA+BC,GAA/B,EAAoCC,GAApC,EAAyC;AACrC,eAAOR,KAAK,CAAC7C,KAAN,CAAY,IAAZ,EAAkB7I,SAAlB,CAAP;AACH;;AAED,aAAOgM,qBAAP;AACH,KA1BM;AA2BP;AACR;AACA;AACA;AACA;;AAjCO,GAzRgC,EA4ThC;AACCnM,IAAAA,GAAG,EAAE,yBADN;AAECgB,IAAAA,KAAK,EAAE,YAAY;AACf,UAAIsL,KAAK,GAAG,CAAC,GAAGlO,kBAAkB,CAACuB,OAAvB,GAAiC,aAAa3B,aAAa,CAAC2B,OAAd,CAAsBqI,IAAtB,CAA2B,SAASuE,QAAT,CAAkBzF,WAAlB,EAA+B;AAChH,eAAO9I,aAAa,CAAC2B,OAAd,CAAsByI,IAAtB,CAA2B,SAASoE,SAAT,CAAmBC,SAAnB,EAA8B;AAC5D,iBAAO,CAAP,EAAU;AACN,oBAAQA,SAAS,CAAClE,IAAV,GAAiBkE,SAAS,CAACjE,IAAnC;AACI,mBAAK,CAAL;AACI,oBAAI,EAAEtH,MAAM,CAACuH,qBAAP,CAA6BiE,OAA7B,CAAqC5F,WAArC,MAAsD,CAAC,CAAzD,CAAJ,EAAiE;AAC7D2F,kBAAAA,SAAS,CAACjE,IAAV,GAAiB,CAAjB;AACA;AACH;;AAED,sBAAM,IAAIlE,KAAJ,CAAU,yCAAyCwC,WAAnD,CAAN;;AAEJ,mBAAK,CAAL;AACI2F,gBAAAA,SAAS,CAACjE,IAAV,GAAiB,CAAjB;AACA,uBAAO,KAAKZ,gCAAL,CAAsCd,WAAtC,CAAP;;AAEJ,mBAAK,CAAL;AACA,mBAAK,KAAL;AACI,uBAAO2F,SAAS,CAAC1D,IAAV,EAAP;AAfR;AAiBH;AACJ,SApBM,EAoBJwD,QApBI,EAoBM,IApBN,CAAP;AAqBH,OAtByD,CAA9C,CAAZ;;AAwBA,eAASI,uBAAT,CAAiCC,GAAjC,EAAsC;AAClC,eAAON,KAAK,CAACtD,KAAN,CAAY,IAAZ,EAAkB7I,SAAlB,CAAP;AACH;;AAED,aAAOwM,uBAAP;AACH,KA9BM;AAFR,GA5TgC,EA6VhC;AACC3M,IAAAA,GAAG,EAAE,wBADN;;AAGC;AACR;AACA;AACA;AACA;AACQgB,IAAAA,KAAK,EAAE,YAAY;AACf,UAAI6L,KAAK,GAAG,CAAC,GAAGzO,kBAAkB,CAACuB,OAAvB,GAAiC,aAAa3B,aAAa,CAAC2B,OAAd,CAAsBqI,IAAtB,CAA2B,SAAS8E,QAAT,CAAkBC,mBAAlB,EAAuC;AACxH,eAAO/O,aAAa,CAAC2B,OAAd,CAAsByI,IAAtB,CAA2B,SAAS4E,SAAT,CAAmBC,SAAnB,EAA8B;AAC5D,iBAAO,CAAP,EAAU;AACN,oBAAQA,SAAS,CAAC1E,IAAV,GAAiB0E,SAAS,CAACzE,IAAnC;AACI,mBAAK,CAAL;AACI/F,gBAAAA,GAAG,CAACyK,KAAJ,CAAU,8CAAV,EAA0DH,mBAA1D;AACA,qBAAKrH,IAAL,CAAU,kBAAV,EAA8BxE,MAAM,CAACsC,qBAAP,CAA6BuJ,mBAA7B,CAA9B;;AAEJ,mBAAK,CAAL;AACA,mBAAK,KAAL;AACI,uBAAOE,SAAS,CAAClE,IAAV,EAAP;AAPR;AASH;AACJ,SAZM,EAYJ+D,QAZI,EAYM,IAZN,CAAP;AAaH,OAdyD,CAA9C,CAAZ;;AAgBA,eAASK,sBAAT,CAAgCC,GAAhC,EAAqC;AACjC,eAAOP,KAAK,CAAC7D,KAAN,CAAY,IAAZ,EAAkB7I,SAAlB,CAAP;AACH;;AAED,aAAOgN,sBAAP;AACH,KAtBM;AAuBP;AACR;AACA;AACA;AACA;AACA;;AApCO,GA7VgC,EAmYhC;AACCnN,IAAAA,GAAG,EAAE,SADN;AAECgB,IAAAA,KAAK,EAAE,SAASqM,OAAT,CAAiBC,QAAjB,EAA2B;AAC9B,aAAO,KAAK/I,QAAL,CAAcgB,KAAd,CAAoB8H,OAApB,CAA4BC,QAA5B,CAAP;AACH;AACD;AACR;AACA;;AAPO,GAnYgC,EA4YhC;AACCtN,IAAAA,GAAG,EAAE,oBADN;AAECgB,IAAAA,KAAK,EAAE,YAAY;AACf,UAAIuM,KAAK,GAAG,CAAC,GAAGnP,kBAAkB,CAACuB,OAAvB,GAAiC,aAAa3B,aAAa,CAAC2B,OAAd,CAAsBqI,IAAtB,CAA2B,SAASwF,QAAT,GAAoB;AACrG,eAAOxP,aAAa,CAAC2B,OAAd,CAAsByI,IAAtB,CAA2B,SAASqF,SAAT,CAAmBC,SAAnB,EAA8B;AAC5D,iBAAO,CAAP,EAAU;AACN,oBAAQA,SAAS,CAACnF,IAAV,GAAiBmF,SAAS,CAAClF,IAAnC;AACI,mBAAK,CAAL;AACI,uBAAOkF,SAAS,CAAC7D,MAAV,CAAiB,QAAjB,EAA2B,KAAKtF,QAAL,CAAcgB,KAAd,CAAoBoI,kBAApB,EAA3B,CAAP;;AAEJ,mBAAK,CAAL;AACA,mBAAK,KAAL;AACI,uBAAOD,SAAS,CAAC3E,IAAV,EAAP;AANR;AAQH;AACJ,SAXM,EAWJyE,QAXI,EAWM,IAXN,CAAP;AAYH,OAbyD,CAA9C,CAAZ;;AAeA,eAASG,kBAAT,GAA8B;AAC1B,eAAOJ,KAAK,CAACvE,KAAN,CAAY,IAAZ,EAAkB7I,SAAlB,CAAP;AACH;;AAED,aAAOwN,kBAAP;AACH,KArBM;AAFR,GA5YgC,EAoahC;AACC3N,IAAAA,GAAG,EAAE,MADN;AAECyB,IAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAChB,aAAO,KAAK8C,QAAL,CAAcgB,KAAd,CAAoBqI,MAA3B;AACH;AAJF,GApagC,EAyahC;AACC5N,IAAAA,GAAG,EAAE,qBADN;AAECyB,IAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAChB,aAAO,KAAK8C,QAAL,CAAcW,OAAd,CAAsB2I,mBAA7B;AACH;AAJF,GAzagC,EA8ahC;AACC7N,IAAAA,GAAG,EAAE,OADN;AAECyB,IAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAChB,aAAO,KAAKmF,QAAZ;AACH;AAJF,GA9agC,CAAnC,EAmbI,CAAC;AACD5G,IAAAA,GAAG,EAAE,QADJ;AAEDgB,IAAAA,KAAK,EAAE,YAAY;AACf,UAAI8M,KAAK,GAAG,CAAC,GAAG1P,kBAAkB,CAACuB,OAAvB,GAAiC,aAAa3B,aAAa,CAAC2B,OAAd,CAAsBqI,IAAtB,CAA2B,SAAS+F,QAAT,CAAkB/K,KAAlB,EAAyBC,OAAzB,EAAkC;AACnH,YAAI+K,MAAJ;AACA,eAAOhQ,aAAa,CAAC2B,OAAd,CAAsByI,IAAtB,CAA2B,SAAS6F,SAAT,CAAmBC,SAAnB,EAA8B;AAC5D,iBAAO,CAAP,EAAU;AACN,oBAAQA,SAAS,CAAC3F,IAAV,GAAiB2F,SAAS,CAAC1F,IAAnC;AACI,mBAAK,CAAL;AACIwF,gBAAAA,MAAM,GAAG,IAAI9M,MAAJ,CAAW8B,KAAX,EAAkBC,OAAlB,CAAT;AACAiL,gBAAAA,SAAS,CAAC1F,IAAV,GAAiB,CAAjB;AACA,uBAAOwF,MAAM,CAAC5I,UAAP,EAAP;;AAEJ,mBAAK,CAAL;AACI,uBAAO8I,SAAS,CAACrE,MAAV,CAAiB,QAAjB,EAA2BmE,MAA3B,CAAP;;AAEJ,mBAAK,CAAL;AACA,mBAAK,KAAL;AACI,uBAAOE,SAAS,CAACnF,IAAV,EAAP;AAXR;AAaH;AACJ,SAhBM,EAgBJgF,QAhBI,EAgBM,IAhBN,CAAP;AAiBH,OAnByD,CAA9C,CAAZ;;AAqBA,eAASI,MAAT,CAAgBC,GAAhB,EAAqBC,GAArB,EAA0B;AACtB,eAAOP,KAAK,CAAC9E,KAAN,CAAY,IAAZ,EAAkB7I,SAAlB,CAAP;AACH;;AAED,aAAOgO,MAAP;AACH,KA3BM;AAFN,GAAD,EA8BD;AACCnO,IAAAA,GAAG,EAAE,mCADN;AAECgB,IAAAA,KAAK,EAAE,SAASuK,iCAAT,CAA2CF,CAA3C,EAA8CC,CAA9C,EAAiDJ,KAAjD,EAAwD;AAC3D,UAAIG,CAAC,CAACiD,WAAF,IAAiBhD,CAAC,CAACgD,WAAvB,EAAoC;AAChC,YAAIjD,CAAC,CAACiD,WAAF,CAAcC,WAAd,IAA6BjD,CAAC,CAACgD,WAAF,CAAcC,WAA/C,EAA4D;AACxD,cAAIlD,CAAC,CAACiD,WAAF,CAAcC,WAAd,CAA0BC,OAA1B,KAAsClD,CAAC,CAACgD,WAAF,CAAcC,WAAd,CAA0BC,OAA1B,EAA1C,EAA+E;AAC3E,mBAAOtD,KAAK,KAAK,WAAV,GAAwB,CAAC,CAAzB,GAA6B,CAApC;AACH,WAFD,MAEO;AACH,mBAAOA,KAAK,KAAK,WAAV,GAAwB,CAAxB,GAA4B,CAAC,CAApC;AACH;AACJ,SAND,MAMO;AACH,cAAIG,CAAC,CAACiD,WAAF,CAAcC,WAAlB,EAA+B;AAC3B,mBAAO,CAAC,CAAR;AACH,WAFD,MAEO,IAAIjD,CAAC,CAACgD,WAAF,CAAcC,WAAlB,EAA+B;AAClC,mBAAO,CAAP;AACH;AACJ;AACJ;;AACD,UAAIlD,CAAC,CAACiD,WAAN,EAAmB;AACf,eAAO,CAAC,CAAR;AACH,OAFD,MAEO,IAAIhD,CAAC,CAACgD,WAAN,EAAmB;AACtB,eAAO,CAAP;AACH;;AACD,aAAO,CAAP;AACH;AAxBF,GA9BC,EAuDD;AACCtO,IAAAA,GAAG,EAAE,sCADN;AAECgB,IAAAA,KAAK,EAAE,SAASwK,oCAAT,CAA8CiD,IAA9C,EAAoDC,IAApD,EAA0DxD,KAA1D,EAAiE;AACpE,UAAIuD,IAAI,IAAIC,IAAZ,EAAkB;AACd,eAAOxD,KAAK,KAAK,WAAV,GAAwBuD,IAAI,CAACE,aAAL,CAAmBD,IAAnB,CAAxB,GAAmD,CAAC,CAAD,GAAKD,IAAI,CAACE,aAAL,CAAmBD,IAAnB,CAA/D;AACH,OAFD,MAEO,IAAID,IAAJ,EAAU;AACb,eAAO,CAAC,CAAR;AACH,OAFM,MAEA,IAAIC,IAAJ,EAAU;AACb,eAAO,CAAP;AACH;;AACD,aAAO,CAAP;AACH;AAXF,GAvDC,EAmED;AACC1O,IAAAA,GAAG,EAAE,+BADN;AAECgB,IAAAA,KAAK,EAAE,SAAS4N,6BAAT,CAAuCC,IAAvC,EAA6C;AAChD,UAAI7D,MAAM,GAAG,EAAb;;AACA,WAAK,IAAIhL,GAAT,IAAgBkB,MAAM,CAAC4N,uBAAvB,EAAgD;AAC5C,YAAI,OAAOD,IAAI,CAAC7O,GAAD,CAAX,KAAqB,WAArB,IAAoC6O,IAAI,CAAC7O,GAAD,CAAJ,KAAc,IAAtD,EAA4D;AACxD,cAAIA,GAAG,KAAK,eAAZ,EAA6B;AACzB,gBAAIuC,MAAM,CAACwM,aAAP,CAAqBF,IAAI,CAAC7O,GAAD,CAAzB,MAAoC,IAAxC,EAA8C;AAC1CgL,cAAAA,MAAM,CAAC9J,MAAM,CAAC4N,uBAAP,CAA+B9O,GAA/B,CAAD,CAAN,GAA8CgP,MAAM,CAACH,IAAI,CAAC7O,GAAD,CAAL,CAApD;AACH;AACJ,WAJD,MAIO;AACHgL,YAAAA,MAAM,CAAC9J,MAAM,CAAC4N,uBAAP,CAA+B9O,GAA/B,CAAD,CAAN,GAA8C6O,IAAI,CAAC7O,GAAD,CAAlD;AACH;AACJ;AACJ;;AACD,aAAOgL,MAAP;AACH;AACD;AACR;AACA;AACA;AACA;;AArBO,GAnEC,EA0FD;AACChL,IAAAA,GAAG,EAAE,uBADN;AAECgB,IAAAA,KAAK,EAAE,SAASwC,qBAAT,CAA+BuJ,mBAA/B,EAAoD;AACvDtK,MAAAA,GAAG,CAACyK,KAAJ,CAAU,6CAAV,EAAyDH,mBAAzD,EADuD,CAEvD;;AACA,UAAI,OAAOA,mBAAmB,CAACkC,GAA3B,KAAmC,WAAvC,EAAoD;AAChD,YAAI,CAAClC,mBAAmB,CAACmC,gBAAzB,EAA2C;AACvC,gBAAM,IAAI5K,KAAJ,CAAU,8FAAV,CAAN;AACH;;AACD,YAAIuK,IAAI,GAAG3N,MAAM,CAAC0N,6BAAP,CAAqC7B,mBAArC,CAAX;AACA,YAAIoC,UAAU,GAAGpC,mBAAmB,CAACkC,GAArC;AACA,YAAIG,IAAI,GAAG,IAAX;AACA,YAAIC,KAAK,GAAG,IAAZ;;AACA,YAAI,OAAOF,UAAU,CAACG,KAAlB,KAA4B,QAAhC,EAA0C;AACtCF,UAAAA,IAAI,GAAGD,UAAU,CAACG,KAAX,IAAoB,IAA3B;AACH,SAFD,MAEO;AACHF,UAAAA,IAAI,GAAGD,UAAU,CAACG,KAAX,CAAiBF,IAAjB,IAAyB,IAAhC;AACAC,UAAAA,KAAK,GAAGF,UAAU,CAACG,KAAX,CAAiBD,KAAjB,IAA0B,IAAlC;AACH;;AACD,eAAO,IAAI/M,kBAAkB,CAACrB,gBAAvB,CAAwC;AAC3CoO,UAAAA,KAAK,EAAEA,KADoC;AAE3CD,UAAAA,IAAI,EAAEA,IAFqC;AAG3CG,UAAAA,KAAK,EAAEJ,UAAU,CAACI,KAAX,IAAoB,IAHgB;AAI3CC,UAAAA,KAAK,EAAEL,UAAU,CAACK,KAAX,IAAoB,IAJgB;AAK3CC,UAAAA,MAAM,EAAEN,UAAU,CAACO,QAAX,IAAuB,IALY;AAM3C1L,UAAAA,IAAI,EAAE+I,mBAAmB,CAACmC,gBANiB;AAO3CL,UAAAA,IAAI,EAAEA;AAPqC,SAAxC,CAAP;AASH,OA1BsD,CA2BvD;;;AACA,UAAI,OAAO9B,mBAAmB,CAAC8B,IAA3B,KAAoC,WAAxC,EAAqD;AACjD,YAAIc,WAAW,GAAG5C,mBAAmB,CAAC8B,IAAtC;;AACA,YAAI,CAACc,WAAW,CAACT,gBAAjB,EAAmC;AAC/B,gBAAM,IAAI5K,KAAJ,CAAU,8FAAV,CAAN;AACH;;AACD,YAAIsL,KAAK,GAAG1O,MAAM,CAAC0N,6BAAP,CAAqC7B,mBAAmB,CAAC8B,IAAzD,CAAZ;;AACA,eAAO,IAAIvM,kBAAkB,CAACrB,gBAAvB,CAAwC;AAC3CoO,UAAAA,KAAK,EAAEM,WAAW,CAACE,SAAZ,IAAyB,IADW;AAE3CT,UAAAA,IAAI,EAAEO,WAAW,CAACG,QAAZ,IAAwB,IAFa;AAG3CP,UAAAA,KAAK,EAAEI,WAAW,CAACI,SAAZ,IAAyB,IAHW;AAI3CP,UAAAA,KAAK,EAAE,IAJoC;AAK3CC,UAAAA,MAAM,EAAEE,WAAW,CAACK,UAAZ,IAA0B,IALS;AAM3ChM,UAAAA,IAAI,EAAE2L,WAAW,CAACT,gBANyB;AAO3CL,UAAAA,IAAI,EAAEe;AAPqC,SAAxC,CAAP;AASH;;AACD,YAAM,IAAItL,KAAJ,CAAU,0EAAV,CAAN;AACH;AA/CF,GA1FC,CAnbJ;AA8jBA,SAAOpD,MAAP;AACH,CAruBY,CAquBXE,QAAQ,CAAC6O,YAruBE,CAAb;;AAuuBA/O,MAAM,CAAC2B,OAAP,GAAiBD,WAAjB;AACA1B,MAAM,CAACuH,qBAAP,GAA+B,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CAA/B;AACAvH,MAAM,CAAC4N,uBAAP,GAAiC;AAC7B,iBAAe,YADc;AAE7B,iBAAe,YAFc;AAG7B,mBAAiB;AAHY,CAAjC;;AAKAlP,UAAU,CAAC,CAAC4C,WAAW,CAAC0N,cAAZ,CAA2B1N,WAAW,CAAC2N,cAAvC,CAAD,EAAyDzP,UAAU,CAAC,aAAD,EAAgB0P,QAAhB,CAAnE,EAA8F1P,UAAU,CAAC,mBAAD,EAAsB,CAAC2P,MAAD,CAAtB,CAAxG,EAAyI3P,UAAU,CAAC,mBAAD,EAAsBpC,SAAS,CAACqB,OAAhC,CAAnJ,CAAD,EAA+LuB,MAAM,CAACoP,SAAtM,EAAiN,aAAjN,EAAgO,IAAhO,CAAV;;AACA1Q,UAAU,CAAC,CAAC4C,WAAW,CAAC0N,cAAZ,CAA2B1N,WAAW,CAAC2N,cAAvC,CAAD,EAAyDzP,UAAU,CAAC,aAAD,EAAgB0P,QAAhB,CAAnE,EAA8F1P,UAAU,CAAC,mBAAD,EAAsB,CAAC2P,MAAD,CAAtB,CAAxG,EAAyI3P,UAAU,CAAC,mBAAD,EAAsBpC,SAAS,CAACqB,OAAhC,CAAnJ,CAAD,EAA+LuB,MAAM,CAACoP,SAAtM,EAAiN,sBAAjN,EAAyO,IAAzO,CAAV;;AACA1Q,UAAU,CAAC,CAAC4C,WAAW,CAAC0N,cAAZ,CAA2B,CAAC,WAAD,EAAc1N,WAAW,CAAC+N,MAAZ,CAAmB,UAAUvP,KAAV,EAAiB;AACrF,MAAIwP,eAAe,GAAG,uBAAtB;;AACA,MAAI,CAAC,OAAOxP,KAAP,KAAiB,WAAjB,GAA+B,WAA/B,GAA6C,CAAC,GAAG1B,QAAQ,CAACK,OAAb,EAAsBqB,KAAtB,CAA9C,MAAgF,QAAhF,IAA4FA,KAAK,KAAK,IAAtG,IAA8GyP,KAAK,CAACC,OAAN,CAAc1P,KAAd,CAAlH,EAAwI;AACpI,WAAO,CAAC,KAAD,EAAQwP,eAAe,GAAG,4BAA1B,CAAP;AACH;;AACD,MAAIG,UAAU,GAAG,IAAI7S,KAAK,CAAC6B,OAAV,CAAkB,CAAC,CAAC,UAAD,EAAa,CAAC,aAAD,EAAgB,cAAhB,CAAb,CAAD,EAAgD,CAAC,OAAD,EAAU,CAAC,WAAD,EAAc,YAAd,CAAV,CAAhD,CAAlB,CAAjB;AACA,MAAIiR,yBAAyB,GAAG,IAAhC;AACA,MAAIC,iBAAiB,GAAG,KAAxB;AACA,MAAIC,cAAc,GAAGjR,SAArB;;AAEA,MAAI;AACA,SAAK,IAAIkR,SAAS,GAAG,CAAC,GAAGtT,aAAa,CAACkC,OAAlB,EAA2BgR,UAAU,CAACK,OAAX,EAA3B,CAAhB,EAAkEC,KAAvE,EAA8E,EAAEL,yBAAyB,GAAG,CAACK,KAAK,GAAGF,SAAS,CAACvI,IAAV,EAAT,EAA2B0I,IAAzD,CAA9E,EAA8IN,yBAAyB,GAAG,IAA1K,EAAgL;AAC5K,UAAIO,MAAM,GAAGF,KAAK,CAACjQ,KAAnB;;AAEA,UAAIoQ,MAAM,GAAG,CAAC,GAAGxT,eAAe,CAAC+B,OAApB,EAA6BwR,MAA7B,EAAqC,CAArC,CAAb;;AAEA,UAAIE,KAAK,GAAGD,MAAM,CAAC,CAAD,CAAlB;AACA,UAAIE,QAAQ,GAAGF,MAAM,CAAC,CAAD,CAArB;;AAEA,UAAIpQ,KAAK,CAACqQ,KAAD,CAAL,KAAiBxR,SAAjB,IAA8B,CAACyR,QAAQ,CAACC,QAAT,CAAkBvQ,KAAK,CAACqQ,KAAD,CAAvB,CAAnC,EAAoE;AAChE,eAAO,CAAC,KAAD,EAAQb,eAAe,GAAG,mBAAlB,GAAwCa,KAAxC,GAAgD,uBAAhD,GAA0EC,QAAQ,CAACE,IAAT,CAAc,MAAd,CAA1E,GAAkG,KAA1G,EAAiH,+CAA+CH,KAA/C,GAAuD,MAAvD,GAAgE7O,WAAW,CAACiP,qBAAZ,CAAkCzQ,KAAK,CAACqQ,KAAD,CAAvC,CAAhE,GAAkH,GAAnO,CAAP;AACH;AACJ;AACJ,GAbD,CAaE,OAAOK,GAAP,EAAY;AACVb,IAAAA,iBAAiB,GAAG,IAApB;AACAC,IAAAA,cAAc,GAAGY,GAAjB;AACH,GAhBD,SAgBU;AACN,QAAI;AACA,UAAI,CAACd,yBAAD,IAA8BG,SAAS,CAACY,MAA5C,EAAoD;AAChDZ,QAAAA,SAAS,CAACY,MAAV;AACH;AACJ,KAJD,SAIU;AACN,UAAId,iBAAJ,EAAuB;AACnB,cAAMC,cAAN;AACH;AACJ;AACJ;;AAED,SAAO,CAAC,IAAD,CAAP;AACH,CAvCoD,CAAd,CAA3B,CAAD,EAuCLpQ,UAAU,CAAC,aAAD,EAAgB0P,QAAhB,CAvCL,EAuCgC1P,UAAU,CAAC,mBAAD,EAAsB,CAACG,MAAD,CAAtB,CAvC1C,EAuC2EH,UAAU,CAAC,mBAAD,EAAsBpC,SAAS,CAACqB,OAAhC,CAvCrF,CAAD,EAuCiIuB,MAAM,CAACoP,SAvCxI,EAuCmJ,uBAvCnJ,EAuC4K,IAvC5K,CAAV;;AAwCA1Q,UAAU,CAAC,CAAC4C,WAAW,CAAC0N,cAAZ,CAA2B,CAAC,WAAD,EAAc1N,WAAW,CAAC+N,MAAZ,CAAmB,UAAUvP,KAAV,EAAiB;AACrF,MAAIwP,eAAe,GAAG,4BAAtB;;AACA,MAAI,CAAC,OAAOxP,KAAP,KAAiB,WAAjB,GAA+B,WAA/B,GAA6C,CAAC,GAAG1B,QAAQ,CAACK,OAAb,EAAsBqB,KAAtB,CAA9C,MAAgF,QAAhF,IAA4FA,KAAK,KAAK,IAAtG,IAA8GyP,KAAK,CAACC,OAAN,CAAc1P,KAAd,CAAlH,EAAwI;AACpI,WAAO,CAAC,KAAD,EAAQwP,eAAe,GAAG,4BAA1B,CAAP;AACH;;AACD,MAAIoB,YAAY,GAAG,IAAI9T,KAAK,CAAC6B,OAAV,CAAkB,CAAC,CAAC,cAAD,EAAiB,QAAjB,CAAD,CAAlB,CAAnB;AACA,MAAIkS,0BAA0B,GAAG,IAAjC;AACA,MAAIC,kBAAkB,GAAG,KAAzB;AACA,MAAIC,eAAe,GAAGlS,SAAtB;;AAEA,MAAI;AACA,SAAK,IAAImS,UAAU,GAAG,CAAC,GAAGvU,aAAa,CAACkC,OAAlB,EAA2BiS,YAAY,CAACZ,OAAb,EAA3B,CAAjB,EAAqEiB,MAA1E,EAAkF,EAAEJ,0BAA0B,GAAG,CAACI,MAAM,GAAGD,UAAU,CAACxJ,IAAX,EAAV,EAA6B0I,IAA5D,CAAlF,EAAqJW,0BAA0B,GAAG,IAAlL,EAAwL;AACpL,UAAIK,MAAM,GAAGD,MAAM,CAACjR,KAApB;;AAEA,UAAImR,MAAM,GAAG,CAAC,GAAGvU,eAAe,CAAC+B,OAApB,EAA6BuS,MAA7B,EAAqC,CAArC,CAAb;;AAEA,UAAIb,KAAK,GAAGc,MAAM,CAAC,CAAD,CAAlB;AACA,UAAInO,IAAI,GAAGmO,MAAM,CAAC,CAAD,CAAjB;;AAEA,UAAInR,KAAK,CAACqQ,KAAD,CAAL,KAAiBxR,SAAjB,IAA8B,CAAC,GAAGP,QAAQ,CAACK,OAAb,EAAsBqB,KAAK,CAACqQ,KAAD,CAA3B,MAAwCrN,IAA1E,EAAgF;AAC5E,eAAO,CAAC,KAAD,EAAQwM,eAAe,GAAG,YAAlB,GAAiCa,KAAjC,GAAyC,qBAAzC,GAAiErN,IAAjE,GAAwE,GAAhF,EAAqF,6CAA6CqN,KAA7C,GAAqD,MAArD,GAA8D7O,WAAW,CAACiP,qBAAZ,CAAkCzQ,KAAK,CAACqQ,KAAD,CAAvC,CAA9D,GAAgH,GAArM,CAAP;AACH;AACJ;AACJ,GAbD,CAaE,OAAOK,GAAP,EAAY;AACVI,IAAAA,kBAAkB,GAAG,IAArB;AACAC,IAAAA,eAAe,GAAGL,GAAlB;AACH,GAhBD,SAgBU;AACN,QAAI;AACA,UAAI,CAACG,0BAAD,IAA+BG,UAAU,CAACL,MAA9C,EAAsD;AAClDK,QAAAA,UAAU,CAACL,MAAX;AACH;AACJ,KAJD,SAIU;AACN,UAAIG,kBAAJ,EAAwB;AACpB,cAAMC,eAAN;AACH;AACJ;AACJ;;AAED,SAAO,CAAC,IAAD,CAAP;AACH,CAvCoD,CAAd,CAA3B,CAAD,EAuCLrR,UAAU,CAAC,aAAD,EAAgB0P,QAAhB,CAvCL,EAuCgC1P,UAAU,CAAC,mBAAD,EAAsB,CAACG,MAAD,CAAtB,CAvC1C,EAuC2EH,UAAU,CAAC,mBAAD,EAAsBpC,SAAS,CAACqB,OAAhC,CAvCrF,CAAD,EAuCiIuB,MAAM,CAACoP,SAvCxI,EAuCmJ,oBAvCnJ,EAuCyK,IAvCzK,CAAV;;AAwCA1Q,UAAU,CAAC,CAAC4C,WAAW,CAAC0N,cAAZ,CAA2B1N,WAAW,CAAC4P,OAAZ,CAAoB,KAApB,EAA2B,KAA3B,EAAkC,KAAlC,CAA3B,EAAqE,QAArE,CAAD,EAAiF1R,UAAU,CAAC,aAAD,EAAgB0P,QAAhB,CAA3F,EAAsH1P,UAAU,CAAC,mBAAD,EAAsB,CAAC2P,MAAD,EAASA,MAAT,CAAtB,CAAhI,EAAyK3P,UAAU,CAAC,mBAAD,EAAsBpC,SAAS,CAACqB,OAAhC,CAAnL,CAAD,EAA+NuB,MAAM,CAACoP,SAAtO,EAAiP,uBAAjP,EAA0Q,IAA1Q,CAAV;;AACA1Q,UAAU,CAAC,CAAC4C,WAAW,CAAC0N,cAAZ,CAA2B1N,WAAW,CAAC4P,OAAZ,CAAoB,KAApB,EAA2B,KAA3B,EAAkC,KAAlC,CAA3B,CAAD,EAAuE1R,UAAU,CAAC,aAAD,EAAgB0P,QAAhB,CAAjF,EAA4G1P,UAAU,CAAC,mBAAD,EAAsB,CAAC2P,MAAD,CAAtB,CAAtH,EAAuJ3P,UAAU,CAAC,mBAAD,EAAsBpC,SAAS,CAACqB,OAAhC,CAAjK,CAAD,EAA6MuB,MAAM,CAACoP,SAApN,EAA+N,yBAA/N,EAA0P,IAA1P,CAAV;;AACA1Q,UAAU,CAAC,CAAC4C,WAAW,CAAC0N,cAAZ,CAA2B1N,WAAW,CAAC6P,UAAvC,CAAD,EAAqD3R,UAAU,CAAC,aAAD,EAAgB0P,QAAhB,CAA/D,EAA0F1P,UAAU,CAAC,mBAAD,EAAsB,CAACG,MAAD,CAAtB,CAApG,EAAqIH,UAAU,CAAC,mBAAD,EAAsBpC,SAAS,CAACqB,OAAhC,CAA/I,CAAD,EAA2LuB,MAAM,CAACoP,SAAlM,EAA6M,wBAA7M,EAAuO,IAAvO,CAAV;;AACA1Q,UAAU,CAAC,CAAC4C,WAAW,CAAC0N,cAAZ,CAA2B1N,WAAW,CAAC2N,cAAvC,CAAD,EAAyDzP,UAAU,CAAC,aAAD,EAAgB0P,QAAhB,CAAnE,EAA8F1P,UAAU,CAAC,mBAAD,EAAsB,CAAC2P,MAAD,CAAtB,CAAxG,EAAyI3P,UAAU,CAAC,mBAAD,EAAsBpC,SAAS,CAACqB,OAAhC,CAAnJ,CAAD,EAA+LuB,MAAM,CAACoP,SAAtM,EAAiN,SAAjN,EAA4N,IAA5N,CAAV;;AACA1Q,UAAU,CAAC,CAAC4C,WAAW,CAAC0N,cAAZ,CAA2B,QAA3B,EAAqC,CAAC,WAAD,EAAc1N,WAAW,CAAC6P,UAA1B,CAArC,CAAD,EAA8E3R,UAAU,CAAC,aAAD,EAAgB0P,QAAhB,CAAxF,EAAmH1P,UAAU,CAAC,mBAAD,EAAsB,CAAC2P,MAAD,EAASxP,MAAT,CAAtB,CAA7H,EAAsKH,UAAU,CAAC,mBAAD,EAAsBpC,SAAS,CAACqB,OAAhC,CAAhL,CAAD,EAA4NuB,MAA5N,EAAoO,QAApO,EAA8O,IAA9O,CAAV;;AACAtB,UAAU,CAAC,CAAC4C,WAAW,CAAC8P,SAAZ,CAAsB9P,WAAW,CAAC6P,UAAlC,CAAD,EAAgD3R,UAAU,CAAC,aAAD,EAAgB0P,QAAhB,CAA1D,EAAqF1P,UAAU,CAAC,mBAAD,EAAsB,CAACG,MAAD,CAAtB,CAA/F,EAAgIH,UAAU,CAAC,mBAAD,EAAsB4B,kBAAkB,CAACrB,gBAAzC,CAA1I,CAAD,EAAwMC,MAAxM,EAAgN,uBAAhN,EAAyO,IAAzO,CAAV;;AACAH,OAAO,CAACG,MAAR,GAAiBA,MAAjB;AACAH,OAAO,CAACpB,OAAR,GAAkBuB,MAAlsourcesContent":["\"use strict\";\n\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _slicedToArray2 = require(\"babel-runtime/helpers/slicedToArray\");\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _map = require(\"babel-runtime/core-js/map\");\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _regenerator = require(\"babel-runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _assign = require(\"babel-runtime/core-js/object/assign\");\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _asyncToGenerator2 = require(\"babel-runtime/helpers/asyncToGenerator\");\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _metadata = require(\"babel-runtime/core-js/reflect/metadata\");\n\nvar _metadata2 = _interopRequireDefault(_metadata);\n\nvar _defineProperty = require(\"babel-runtime/core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _getOwnPropertyDescriptor = require(\"babel-runtime/core-js/object/get-own-property-descriptor\");\n\nvar _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = (0, _getOwnPropertyDescriptor2.default)(target, key) : desc,\n        d;\n    if ((typeof Reflect === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n        if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    }return c > 3 && r && (0, _defineProperty2.default)(target, key, r), r;\n};\nvar __metadata = undefined && undefined.__metadata || function (k, v) {\n    if ((typeof Reflect === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(Reflect)) === \"object\" && typeof _metadata2.default === \"function\") return (0, _metadata2.default)(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PushNotification = exports.Client = exports.User = void 0;\nvar events_1 = require(\"events\");\nvar logger_1 = require(\"./logger\");\nvar configuration_1 = require(\"./configuration\");\nvar user_1 = require(\"./user\");\nObject.defineProperty(exports, \"User\", { enumerable: true, get: function get() {\n        return user_1.User;\n    } });\nvar network_1 = require(\"./services/network\");\nvar notificationtypes_1 = require(\"./interfaces/notificationtypes\");\nvar synclist_1 = require(\"./synclist\");\nvar twilsock_1 = require(\"twilsock\");\nvar twilio_notifications_1 = require(\"twilio-notifications\");\nvar twilio_sync_1 = require(\"twilio-sync\");\nvar twilio_mcs_client_1 = require(\"twilio-mcs-client\");\nvar session_1 = require(\"./session\");\nvar conversations_1 = require(\"./data/conversations\");\nvar users_1 = require(\"./data/users\");\nvar typingindicator_1 = require(\"./services/typingindicator\");\nvar consumptionhorizon_1 = require(\"./services/consumptionhorizon\");\nvar pushnotification_1 = require(\"./pushnotification\");\nObject.defineProperty(exports, \"PushNotification\", { enumerable: true, get: function get() {\n        return pushnotification_1.PushNotification;\n    } });\nvar util_1 = require(\"./util\");\nvar typecheck_1 = require(\"./util/typecheck\");\nvar log = logger_1.Logger.scope('Client');\nvar SDK_VERSION = require('./../package.json').version;\n\nvar ClientServices = function ClientServices() {\n    (0, _classCallCheck3.default)(this, ClientServices);\n};\n/**\n * A Client is a starting point to access Twilio Conversations functionality.\n *\n * @property {Client#ConnectionState} connectionState - Client connection state\n * @property {Boolean} reachabilityEnabled - Client reachability state\n * @property {User} user - Information for logged in user\n * @property {String} version - Current version of Conversations client\n *\n * @fires Client#connectionError\n * @fires Client#connectionStateChanged\n * @fires Client#conversationAdded\n * @fires Client#conversationJoined\n * @fires Client#conversationLeft\n * @fires Client#conversationRemoved\n * @fires Client#conversationUpdated\n * @fires Client#participantJoined\n * @fires Client#participantLeft\n * @fires Client#participantUpdated\n * @fires Client#messageAdded\n * @fires Client#messageRemoved\n * @fires Client#messageUpdated\n * @fires Client#pushNotification\n * @fires Client#tokenAboutToExpire\n * @fires Client#tokenExpired\n * @fires Client#typingEnded\n * @fires Client#typingStarted\n * @fires Client#userSubscribed\n * @fires Client#userUnsubscribed\n * @fires Client#userUpdated\n */\n\n\nvar Client = function (_events_1$EventEmitte) {\n    (0, _inherits3.default)(Client, _events_1$EventEmitte);\n\n    /**\n     * These options can be passed to Client constructor.\n     * @typedef {Object} Client#ClientOptions\n     * @property {String} [logLevel='error'] - The level of logging to enable. Valid options\n     *   (from strictest to broadest): ['silent', 'error', 'warn', 'info', 'debug', 'trace']\n     */\n    /**\n     * These options can be passed to {@link Client#createConversation}.\n     * @typedef {Object} Client#CreateConversationOptions\n     * @property {any} [attributes] - Any custom attributes to attach to the Conversation\n     * @property {String} [friendlyName] - The non-unique display name of the Conversation\n     */\n    /**\n     * Connection state of Client.\n     * @typedef {('connecting'|'connected'|'disconnecting'|'disconnected'|'denied')} Client#ConnectionState\n     */\n    /**\n     * Notifications conversation type.\n     * @typedef {('gcm'|'fcm'|'apn')} Client#NotificationsChannelType\n     */\n    // TODO: uniqueNames @property {('lastMessage'|'friendlyName'|'uniqueName')} [criteria] - Sorting criteria for Channels array\n    /**\n     * These options can be passed to {@link Client#getLocalConversations}.\n     * @typedef {Object} Client#ConversationSortingOptions\n     * @property {('lastMessage'|'friendlyName')} [criteria] - Sorting criteria for Conversations array\n     * @property {('ascending'|'descending')} [order] - Sorting order. If not present, then default is <code>ascending</code>\n     */\n    function Client(token, options) {\n        (0, _classCallCheck3.default)(this, Client);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (Client.__proto__ || (0, _getPrototypeOf2.default)(Client)).call(this));\n\n        _this.connectionState = 'connecting';\n        _this.sessionPromise = null;\n        _this.conversationsPromise = null;\n        _this.version = SDK_VERSION;\n        _this.parsePushNotification = Client.parsePushNotification;\n        _this.options = options || {};\n        if (!_this.options.disableDeepClone) {\n            _this.options = util_1.deepClone(_this.options);\n        }\n        _this.options.logLevel = _this.options.logLevel || 'silent';\n        log.setLevel(_this.options.logLevel);\n        var productId = _this.options.productId = 'ip_messaging';\n        // Filling ClientMetadata\n        _this.options.clientMetadata = _this.options.clientMetadata || {};\n        if (!_this.options.clientMetadata.hasOwnProperty('type')) {\n            _this.options.clientMetadata.type = 'conversations';\n        }\n        if (!_this.options.clientMetadata.hasOwnProperty('sdk')) {\n            _this.options.clientMetadata.sdk = 'JS';\n            _this.options.clientMetadata.sdkv = SDK_VERSION;\n        }\n        // Enable session local storage for Sync\n        _this.options.Sync = _this.options.Sync || {};\n        if (typeof _this.options.Sync.enableSessionStorage === 'undefined') {\n            _this.options.Sync.enableSessionStorage = true;\n        }\n        if (_this.options.region) {\n            _this.options.Sync.region = _this.options.region;\n        }\n        if (!token) {\n            throw new Error('A valid Twilio token should be provided');\n        }\n        _this.services = new ClientServices();\n        _this.config = new configuration_1.Configuration(_this.options);\n        _this.options.twilsockClient = _this.options.twilsockClient || new twilsock_1.Twilsock(token, productId, _this.options);\n        _this.options.transport = _this.options.transport || _this.options.twilsockClient;\n        _this.options.notificationsClient = _this.options.notificationsClient || new twilio_notifications_1.Notifications(token, _this.options);\n        _this.options.syncClient = _this.options.syncClient || new twilio_sync_1.SyncClient(token, _this.options);\n        _this.services.syncClient = _this.options.syncClient;\n        _this.services.transport = _this.options.transport;\n        _this.services.twilsockClient = _this.options.twilsockClient;\n        _this.services.notificationClient = _this.options.notificationsClient;\n        _this.services.session = new session_1.Session(_this.services, _this.config);\n        _this.sessionPromise = _this.services.session.initialize();\n        _this.services.network = new network_1.Network(_this.config, _this.services);\n        _this.services.users = new users_1.Users({\n            session: _this.services.session,\n            network: _this.services.network,\n            syncClient: _this.services.syncClient\n        });\n        _this.services.users.on('userSubscribed', _this.emit.bind(_this, 'userSubscribed'));\n        _this.services.users.on('userUpdated', function (args) {\n            return _this.emit('userUpdated', args);\n        });\n        _this.services.users.on('userUnsubscribed', _this.emit.bind(_this, 'userUnsubscribed'));\n        _this.services.twilsockClient.on('tokenAboutToExpire', function (ttl) {\n            return _this.emit('tokenAboutToExpire', ttl);\n        });\n        _this.services.twilsockClient.on('tokenExpired', function () {\n            return _this.emit('tokenExpired');\n        });\n        _this.services.twilsockClient.on('connectionError', function (error) {\n            return _this.emit('connectionError', error);\n        });\n        _this.services.consumptionHorizon = new consumptionhorizon_1.ConsumptionHorizon(_this.services);\n        _this.services.typingIndicator = new typingindicator_1.TypingIndicator(_this.config, {\n            transport: _this.services.twilsockClient,\n            notificationClient: _this.services.notificationClient\n        }, _this.getConversationBySid.bind(_this));\n        _this.services.syncList = new synclist_1.SyncList(_this.services);\n        _this.conversations = new conversations_1.Conversations(_this.services);\n        _this.conversationsPromise = _this.sessionPromise.then(function () {\n            _this.conversations.on('conversationAdded', _this.emit.bind(_this, 'conversationAdded'));\n            _this.conversations.on('conversationRemoved', _this.emit.bind(_this, 'conversationRemoved'));\n            // this.conversations.on('channelInvited', this.emit.bind(this, 'channelInvited'));\n            _this.conversations.on('conversationJoined', _this.emit.bind(_this, 'conversationJoined'));\n            _this.conversations.on('conversationLeft', _this.emit.bind(_this, 'conversationLeft'));\n            _this.conversations.on('conversationUpdated', function (args) {\n                return _this.emit('conversationUpdated', args);\n            });\n            _this.conversations.on('participantJoined', _this.emit.bind(_this, 'participantJoined'));\n            _this.conversations.on('participantLeft', _this.emit.bind(_this, 'participantLeft'));\n            _this.conversations.on('participantUpdated', function (args) {\n                return _this.emit('participantUpdated', args);\n            });\n            _this.conversations.on('messageAdded', _this.emit.bind(_this, 'messageAdded'));\n            _this.conversations.on('messageUpdated', function (args) {\n                return _this.emit('messageUpdated', args);\n            });\n            _this.conversations.on('messageRemoved', _this.emit.bind(_this, 'messageRemoved'));\n            _this.conversations.on('typingStarted', _this.emit.bind(_this, 'typingStarted'));\n            _this.conversations.on('typingEnded', _this.emit.bind(_this, 'typingEnded'));\n            return _this.conversations.fetchConversations();\n        }).then(function () {\n            return _this.conversations;\n        });\n        _this.services.notificationClient.on('connectionStateChanged', function (state) {\n            var changedConnectionState = null;\n            switch (state) {\n                case 'connected':\n                    changedConnectionState = 'connected';\n                    break;\n                case 'denied':\n                    changedConnectionState = 'denied';\n                    break;\n                case 'disconnecting':\n                    changedConnectionState = 'disconnecting';\n                    break;\n                case 'disconnected':\n                    changedConnectionState = 'disconnected';\n                    break;\n                default:\n                    changedConnectionState = 'connecting';\n            }\n            if (changedConnectionState !== _this.connectionState) {\n                _this.connectionState = changedConnectionState;\n                _this.emit('connectionStateChanged', _this.connectionState);\n            }\n        });\n        _this.fpaToken = token;\n        return _this;\n    }\n    /**\n     * Factory method to create Conversations client instance.\n     *\n     * @param {String} token - Access token\n     * @param {Client#ClientOptions} [options] - Options to customize the Client\n     * @returns {Promise<Client>}\n     */\n\n\n    (0, _createClass3.default)(Client, [{\n        key: \"subscribeToPushNotifications\",\n        value: function subscribeToPushNotifications(channelType) {\n            var _this2 = this;\n\n            var subscriptions = [];\n            [notificationtypes_1.NotificationTypes.NEW_MESSAGE, notificationtypes_1.NotificationTypes.ADDED_TO_CHANNEL,\n            // NotificationTypes.INVITED_TO_CHANNEL,\n            notificationtypes_1.NotificationTypes.REMOVED_FROM_CHANNEL, notificationtypes_1.NotificationTypes.TYPING_INDICATOR, notificationtypes_1.NotificationTypes.CONSUMPTION_UPDATE].forEach(function (messageType) {\n                subscriptions.push(_this2.services.notificationClient.subscribe(messageType, channelType));\n            });\n            return _promise2.default.all(subscriptions);\n        }\n    }, {\n        key: \"unsubscribeFromPushNotifications\",\n        value: function unsubscribeFromPushNotifications(channelType) {\n            var _this3 = this;\n\n            var subscriptions = [];\n            [notificationtypes_1.NotificationTypes.NEW_MESSAGE, notificationtypes_1.NotificationTypes.ADDED_TO_CHANNEL,\n            // NotificationTypes.INVITED_TO_CHANNEL,\n            notificationtypes_1.NotificationTypes.REMOVED_FROM_CHANNEL, notificationtypes_1.NotificationTypes.TYPING_INDICATOR, notificationtypes_1.NotificationTypes.CONSUMPTION_UPDATE].forEach(function (messageType) {\n                subscriptions.push(_this3.services.notificationClient.unsubscribe(messageType, channelType));\n            });\n            return _promise2.default.all(subscriptions);\n        }\n    }, {\n        key: \"initialize\",\n        value: function () {\n            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {\n                var _this4 = this;\n\n                var links, options;\n                return _regenerator2.default.wrap(function _callee$(_context) {\n                    while (1) {\n                        switch (_context.prev = _context.next) {\n                            case 0:\n                                _context.next = 2;\n                                return this.sessionPromise;\n\n                            case 2:\n                                Client.supportedPushChannels.forEach(function (channelType) {\n                                    return _this4.subscribeToPushNotifications(channelType);\n                                });\n                                _context.next = 5;\n                                return this.services.session.getSessionLinks();\n\n                            case 5:\n                                links = _context.sent;\n\n                                // this.services.publicChannels = new PublicConversations(this, this.services, links.publicConversationsUrl);\n                                // this.services.myConversations = new UserConversations(this, this.services, links.myChannelsUrl);\n                                options = (0, _assign2.default)(this.options);\n\n                                options.transport = null;\n                                this.services.mcsClient = new twilio_mcs_client_1.McsClient(this.fpaToken, links.mediaServiceUrl, options);\n                                _context.next = 11;\n                                return this.services.typingIndicator.initialize();\n\n                            case 11:\n                            case \"end\":\n                                return _context.stop();\n                        }\n                    }\n                }, _callee, this);\n            }));\n\n            function initialize() {\n                return _ref.apply(this, arguments);\n            }\n\n            return initialize;\n        }()\n        /**\n         * Gracefully shutting down library instance.\n         * @public\n         * @returns {Promise<void>}\n         */\n\n    }, {\n        key: \"shutdown\",\n        value: function () {\n            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {\n                return _regenerator2.default.wrap(function _callee2$(_context2) {\n                    while (1) {\n                        switch (_context2.prev = _context2.next) {\n                            case 0:\n                                _context2.next = 2;\n                                return this.services.twilsockClient.disconnect();\n\n                            case 2:\n                            case \"end\":\n                                return _context2.stop();\n                        }\n                    }\n                }, _callee2, this);\n            }));\n\n            function shutdown() {\n                return _ref2.apply(this, arguments);\n            }\n\n            return shutdown;\n        }()\n        /**\n         * Update the token used by the Client and re-register with Conversations services.\n         * @param {String} token - Access token\n         * @public\n         * @returns {Promise<Client>}\n         */\n\n    }, {\n        key: \"updateToken\",\n        value: function () {\n            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(token) {\n                var _this5 = this;\n\n                return _regenerator2.default.wrap(function _callee3$(_context3) {\n                    while (1) {\n                        switch (_context3.prev = _context3.next) {\n                            case 0:\n                                log.info('updateToken');\n\n                                if (!(this.fpaToken === token)) {\n                                    _context3.next = 3;\n                                    break;\n                                }\n\n                                return _context3.abrupt(\"return\", this);\n\n                            case 3:\n                                _context3.next = 5;\n                                return this.services.twilsockClient.updateToken(token).then(function () {\n                                    return _this5.fpaToken = token;\n                                }).then(function () {\n                                    return _this5.services.mcsClient.updateToken(token);\n                                }).then(function () {\n                                    return _this5.sessionPromise;\n                                });\n\n                            case 5:\n                                return _context3.abrupt(\"return\", this);\n\n                            case 6:\n                            case \"end\":\n                                return _context3.stop();\n                        }\n                    }\n                }, _callee3, this);\n            }));\n\n            function updateToken(_x) {\n                return _ref3.apply(this, arguments);\n            }\n\n            return updateToken;\n        }()\n        /**\n         * Get a known Conversation by its SID.\n         * @param {String} conversationSid - Conversation sid\n         * @returns {Promise<Conversation>}\n         */\n\n    }, {\n        key: \"getConversationBySid\",\n        value: function () {\n            var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(conversationSid) {\n                var _this6 = this;\n\n                return _regenerator2.default.wrap(function _callee4$(_context4) {\n                    while (1) {\n                        switch (_context4.prev = _context4.next) {\n                            case 0:\n                                return _context4.abrupt(\"return\", this.conversations.syncListRead.promise.then(function () {\n                                    return _this6.conversations.getConversation(conversationSid);\n                                }).then(function (conversation) {\n                                    if (!conversation) {\n                                        throw new Error(\"Conversation with SID \" + conversationSid + \" is not found.\");\n                                    }\n                                    return conversation;\n                                }));\n\n                            case 1:\n                            case \"end\":\n                                return _context4.stop();\n                        }\n                    }\n                }, _callee4, this);\n            }));\n\n            function getConversationBySid(_x2) {\n                return _ref4.apply(this, arguments);\n            }\n\n            return getConversationBySid;\n        }()\n        /*\n         * Get a known Conversation by its unique identifier name.\n         * @param {String} uniqueName - The unique identifier name of the Conversation to get\n         * @returns {Promise<Conversation>}\n         *\n        @asyncTypeCheck('string')\n        async getConversationByUniqueName(uniqueName: string): Promise<Conversation> {\n          throw new Error('Not implemented yet.');\n             /*\n          if (!uniqueName || typeof uniqueName !== 'string') {\n            throw new Error('Client.getConversationByUniqueName requires a <String>uniqueName parameter');\n          }\n             return this.conversations.syncListRead.promise.then(() =>\n            this.services.myConversations.getConversationByUniqueName(uniqueName).then(x => this.conversations.pushConversation(x)));\n        }\n        */\n        /**\n         * Get the current list of all subscribed Conversations.\n         * @returns {Promise<Paginator<Conversation>>}\n         */\n\n    }, {\n        key: \"getSubscribedConversations\",\n        value: function getSubscribedConversations(args) {\n            return this.conversationsPromise.then(function (conversations) {\n                return conversations.getConversations(args);\n            });\n        }\n        /**\n         * Get array of Conversations locally known to Client in provided sorting order.\n         * Locally known conversations are the ones created and/or joined during client runtime and currently logged in User subscribed Conversations.\n         * To ensure full list of subscribed Conversations fetched - call the {@link Client#getSubscribedConversations} method\n         * and fetch all pages with help of {@link Paginator#nextPage} method.\n         * @param {Client#ConversationSortingOptions} [sortingOptions] - Options for the Conversation sorting\n         * @returns {Promise<Array<Conversation>>}\n         */\n\n    }, {\n        key: \"getLocalConversations\",\n        value: function getLocalConversations(sortingOptions) {\n            return this.conversationsPromise.then(function (channels) {\n                var result = [];\n                channels.conversations.forEach(function (value) {\n                    result.push(value);\n                });\n                var sortingOrder = (sortingOptions === null || sortingOptions === void 0 ? void 0 : sortingOptions.order) || 'ascending';\n                if (sortingOptions && sortingOptions.criteria) {\n                    if (sortingOptions.criteria === 'lastMessage') {\n                        result.sort(function (a, b) {\n                            return Client.compareConversationsByLastMessage(a, b, sortingOrder);\n                        });\n                        /*} else if (sortingOptions.criteria === 'uniqueName') {\n                          result.sort((a: Conversation, b: Conversation) =>\n                            Client.compareConversationsByStringProperty(a.uniqueName, b.uniqueName, sortingOrder));*/\n                    } else if (sortingOptions.criteria === 'friendlyName') {\n                        result.sort(function (a, b) {\n                            return Client.compareConversationsByStringProperty(a.friendlyName, b.friendlyName, sortingOrder);\n                        });\n                    }\n                }\n                return result;\n            });\n        }\n    }, {\n        key: \"createConversation\",\n\n        /**\n         * Create a Conversation on the server and subscribe to its events.\n         * The default is a Conversation with an empty friendlyName.\n         * @param {Client#CreateConversationOptions} [options] - Options for the Conversation\n         * @returns {Promise<Conversation>}\n         */\n        value: function createConversation(options) {\n            options = options || {};\n            return this.conversationsPromise.then(function (conversationsEntity) {\n                return conversationsEntity.addConversation(options);\n            });\n        }\n        /**\n         * Registers for push notifications.\n         * @param {Client#NotificationsChannelType} channelType - 'gcm', 'apn' and 'fcm' are supported\n         * @param {string} registrationId - Push notification id provided by platform\n         * @returns {Promise<void>}\n         */\n\n    }, {\n        key: \"setPushRegistrationId\",\n        value: function () {\n            var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(channelType, registrationId) {\n                var _this7 = this;\n\n                return _regenerator2.default.wrap(function _callee5$(_context5) {\n                    while (1) {\n                        switch (_context5.prev = _context5.next) {\n                            case 0:\n                                _context5.next = 2;\n                                return this.subscribeToPushNotifications(channelType).then(function () {\n                                    return _this7.services.notificationClient.setPushRegistrationId(registrationId, channelType);\n                                });\n\n                            case 2:\n                            case \"end\":\n                                return _context5.stop();\n                        }\n                    }\n                }, _callee5, this);\n            }));\n\n            function setPushRegistrationId(_x3, _x4) {\n                return _ref5.apply(this, arguments);\n            }\n\n            return setPushRegistrationId;\n        }()\n        /**\n         * Unregisters from push notifications.\n         * @param {Client#NotificationsChannelType} channelType - 'gcm', 'apn' and 'fcm' are supported\n         * @returns {Promise<void>}\n         */\n\n    }, {\n        key: \"unsetPushRegistrationId\",\n        value: function () {\n            var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(channelType) {\n                return _regenerator2.default.wrap(function _callee6$(_context6) {\n                    while (1) {\n                        switch (_context6.prev = _context6.next) {\n                            case 0:\n                                if (!(Client.supportedPushChannels.indexOf(channelType) === -1)) {\n                                    _context6.next = 2;\n                                    break;\n                                }\n\n                                throw new Error('Invalid or unsupported channelType: ' + channelType);\n\n                            case 2:\n                                _context6.next = 4;\n                                return this.unsubscribeFromPushNotifications(channelType);\n\n                            case 4:\n                            case \"end\":\n                                return _context6.stop();\n                        }\n                    }\n                }, _callee6, this);\n            }));\n\n            function unsetPushRegistrationId(_x5) {\n                return _ref6.apply(this, arguments);\n            }\n\n            return unsetPushRegistrationId;\n        }()\n    }, {\n        key: \"handlePushNotification\",\n\n        /**\n         * Handle push notification payload parsing and emits event {@link Client#event:pushNotification} on this {@link Client} instance.\n         * @param {Object} notificationPayload - Push notification payload\n         * @returns {Promise<void>}\n         */\n        value: function () {\n            var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7(notificationPayload) {\n                return _regenerator2.default.wrap(function _callee7$(_context7) {\n                    while (1) {\n                        switch (_context7.prev = _context7.next) {\n                            case 0:\n                                log.debug('handlePushNotification, notificationPayload=', notificationPayload);\n                                this.emit('pushNotification', Client.parsePushNotification(notificationPayload));\n\n                            case 2:\n                            case \"end\":\n                                return _context7.stop();\n                        }\n                    }\n                }, _callee7, this);\n            }));\n\n            function handlePushNotification(_x6) {\n                return _ref7.apply(this, arguments);\n            }\n\n            return handlePushNotification;\n        }()\n        /**\n         * Gets user for given identity, if it's in subscribed list - then return the user object from it,\n         * if not - then subscribes and adds user to the subscribed list.\n         * @param {String} identity - Identity of User\n         * @returns {Promise<User>} Fully initialized user\n         */\n\n    }, {\n        key: \"getUser\",\n        value: function getUser(identity) {\n            return this.services.users.getUser(identity);\n        }\n        /**\n         * @returns {Promise<Array<User>>} List of subscribed User objects\n         */\n\n    }, {\n        key: \"getSubscribedUsers\",\n        value: function () {\n            var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8() {\n                return _regenerator2.default.wrap(function _callee8$(_context8) {\n                    while (1) {\n                        switch (_context8.prev = _context8.next) {\n                            case 0:\n                                return _context8.abrupt(\"return\", this.services.users.getSubscribedUsers());\n\n                            case 1:\n                            case \"end\":\n                                return _context8.stop();\n                        }\n                    }\n                }, _callee8, this);\n            }));\n\n            function getSubscribedUsers() {\n                return _ref8.apply(this, arguments);\n            }\n\n            return getSubscribedUsers;\n        }()\n    }, {\n        key: \"user\",\n        get: function get() {\n            return this.services.users.myself;\n        }\n    }, {\n        key: \"reachabilityEnabled\",\n        get: function get() {\n            return this.services.session.reachabilityEnabled;\n        }\n    }, {\n        key: \"token\",\n        get: function get() {\n            return this.fpaToken;\n        }\n    }], [{\n        key: \"create\",\n        value: function () {\n            var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9(token, options) {\n                var client;\n                return _regenerator2.default.wrap(function _callee9$(_context9) {\n                    while (1) {\n                        switch (_context9.prev = _context9.next) {\n                            case 0:\n                                client = new Client(token, options);\n                                _context9.next = 3;\n                                return client.initialize();\n\n                            case 3:\n                                return _context9.abrupt(\"return\", client);\n\n                            case 4:\n                            case \"end\":\n                                return _context9.stop();\n                        }\n                    }\n                }, _callee9, this);\n            }));\n\n            function create(_x7, _x8) {\n                return _ref9.apply(this, arguments);\n            }\n\n            return create;\n        }()\n    }, {\n        key: \"compareConversationsByLastMessage\",\n        value: function compareConversationsByLastMessage(a, b, order) {\n            if (a.lastMessage && b.lastMessage) {\n                if (a.lastMessage.dateCreated && b.lastMessage.dateCreated) {\n                    if (a.lastMessage.dateCreated.getTime() < b.lastMessage.dateCreated.getTime()) {\n                        return order === 'ascending' ? -1 : 1;\n                    } else {\n                        return order === 'ascending' ? 1 : -1;\n                    }\n                } else {\n                    if (a.lastMessage.dateCreated) {\n                        return -1;\n                    } else if (b.lastMessage.dateCreated) {\n                        return 1;\n                    }\n                }\n            }\n            if (a.lastMessage) {\n                return -1;\n            } else if (b.lastMessage) {\n                return 1;\n            }\n            return 0;\n        }\n    }, {\n        key: \"compareConversationsByStringProperty\",\n        value: function compareConversationsByStringProperty(str1, str2, order) {\n            if (str1 && str2) {\n                return order === 'ascending' ? str1.localeCompare(str2) : -1 * str1.localeCompare(str2);\n            } else if (str1) {\n                return -1;\n            } else if (str2) {\n                return 1;\n            }\n            return 0;\n        }\n    }, {\n        key: \"parsePushNotificationChatData\",\n        value: function parsePushNotificationChatData(data) {\n            var result = {};\n            for (var key in Client.supportedPushDataFields) {\n                if (typeof data[key] !== 'undefined' && data[key] !== null) {\n                    if (key === 'message_index') {\n                        if (util_1.parseToNumber(data[key]) !== null) {\n                            result[Client.supportedPushDataFields[key]] = Number(data[key]);\n                        }\n                    } else {\n                        result[Client.supportedPushDataFields[key]] = data[key];\n                    }\n                }\n            }\n            return result;\n        }\n        /**\n         * Static method for push notification payload parsing. Returns parsed push as {@link PushNotification} object\n         * @param {Object} notificationPayload - Push notification payload\n         * @returns {PushNotification|Error}\n         */\n\n    }, {\n        key: \"parsePushNotification\",\n        value: function parsePushNotification(notificationPayload) {\n            log.debug('parsePushNotification, notificationPayload=', notificationPayload);\n            // APNS specifics\n            if (typeof notificationPayload.aps !== 'undefined') {\n                if (!notificationPayload.twi_message_type) {\n                    throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');\n                }\n                var data = Client.parsePushNotificationChatData(notificationPayload);\n                var apsPayload = notificationPayload.aps;\n                var body = null;\n                var title = null;\n                if (typeof apsPayload.alert === 'string') {\n                    body = apsPayload.alert || null;\n                } else {\n                    body = apsPayload.alert.body || null;\n                    title = apsPayload.alert.title || null;\n                }\n                return new pushnotification_1.PushNotification({\n                    title: title,\n                    body: body,\n                    sound: apsPayload.sound || null,\n                    badge: apsPayload.badge || null,\n                    action: apsPayload.category || null,\n                    type: notificationPayload.twi_message_type,\n                    data: data\n                });\n            }\n            // FCM/GCM specifics\n            if (typeof notificationPayload.data !== 'undefined') {\n                var dataPayload = notificationPayload.data;\n                if (!dataPayload.twi_message_type) {\n                    throw new Error('Provided push notification payload does not contain Programmable Chat push notification type');\n                }\n                var _data = Client.parsePushNotificationChatData(notificationPayload.data);\n                return new pushnotification_1.PushNotification({\n                    title: dataPayload.twi_title || null,\n                    body: dataPayload.twi_body || null,\n                    sound: dataPayload.twi_sound || null,\n                    badge: null,\n                    action: dataPayload.twi_action || null,\n                    type: dataPayload.twi_message_type,\n                    data: _data\n                });\n            }\n            throw new Error('Provided push notification payload is not Programmable Chat notification');\n        }\n    }]);\n    return Client;\n}(events_1.EventEmitter);\n\nClient.version = SDK_VERSION;\nClient.supportedPushChannels = ['fcm', 'apn', 'gcm'];\nClient.supportedPushDataFields = {\n    'channel_sid': 'channelSid',\n    'message_sid': 'messageSid',\n    'message_index': 'messageIndex'\n};\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"updateToken\", null);\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"getConversationBySid\", null);\n__decorate([typecheck_1.asyncTypeCheck(['undefined', typecheck_1.custom(function (value) {\n    var baseDescription = 'valid sorting options';\n    if ((typeof value === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(value)) !== 'object' || value === null || Array.isArray(value)) {\n        return [false, baseDescription + \" (should be a pure object)\"];\n    }\n    var literalMap = new _map2.default([['criteria', ['lastMessage', 'friendlyName']], ['order', ['ascending', 'descending']]]);\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n        for (var _iterator = (0, _getIterator3.default)(literalMap.entries()), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _ref10 = _step.value;\n\n            var _ref11 = (0, _slicedToArray3.default)(_ref10, 2);\n\n            var field = _ref11[0];\n            var literals = _ref11[1];\n\n            if (value[field] !== undefined && !literals.includes(value[field])) {\n                return [false, baseDescription + \" (sortingOptions.\" + field + \" should be one of: \\\"\" + literals.join('\", \"') + \"\\\")\", \"malformed sorting options (sortingOptions.\" + field + \" is \" + typecheck_1.stringifyReceivedType(value[field]) + \")\"];\n            }\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally {\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n\n    return [true];\n})]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"getLocalConversations\", null);\n__decorate([typecheck_1.asyncTypeCheck(['undefined', typecheck_1.custom(function (value) {\n    var baseDescription = 'valid conversation options';\n    if ((typeof value === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(value)) !== 'object' || value === null || Array.isArray(value)) {\n        return [false, baseDescription + \" (should be a pure object)\"];\n    }\n    var typeCheckMap = new _map2.default([['friendlyName', 'string']]);\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n        for (var _iterator2 = (0, _getIterator3.default)(typeCheckMap.entries()), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var _ref12 = _step2.value;\n\n            var _ref13 = (0, _slicedToArray3.default)(_ref12, 2);\n\n            var field = _ref13[0];\n            var type = _ref13[1];\n\n            if (value[field] !== undefined && (0, _typeof3.default)(value[field]) !== type) {\n                return [false, baseDescription + \" (options.\" + field + \" should be of type \" + type + \")\", \"malformed conversation options (options.\" + field + \" is \" + typecheck_1.stringifyReceivedType(value[field]) + \")\"];\n            }\n        }\n    } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                _iterator2.return();\n            }\n        } finally {\n            if (_didIteratorError2) {\n                throw _iteratorError2;\n            }\n        }\n    }\n\n    return [true];\n})]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"createConversation\", null);\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.literal('gcm', 'fcm', 'apn'), 'string'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String, String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"setPushRegistrationId\", null);\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.literal('gcm', 'fcm', 'apn')), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"unsetPushRegistrationId\", null);\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.pureObject), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"handlePushNotification\", null);\n__decorate([typecheck_1.asyncTypeCheck(typecheck_1.nonEmptyString), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String]), __metadata(\"design:returntype\", _promise2.default)], Client.prototype, \"getUser\", null);\n__decorate([typecheck_1.asyncTypeCheck('string', ['undefined', typecheck_1.pureObject]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String, Object]), __metadata(\"design:returntype\", _promise2.default)], Client, \"create\", null);\n__decorate([typecheck_1.typeCheck(typecheck_1.pureObject), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", pushnotification_1.PushNotification)], Client, \"parsePushNotification\", null);\nexports.Client = Client;\nexports.default = Client;\n/**\n * Fired when a Conversation becomes visible to the Client. The event is also triggered when the client creates a new Conversation.\n * Fired for all conversations Client has joined.\n * @event Client#conversationAdded\n * @type {Conversation}\n */\n/**\n * Fired when the Client joins a Conversation.\n * @event Client#conversationJoined\n * @type {Conversation}\n */\n/**\n * Fired when the Client leaves a Conversation.\n * @event Client#conversationLeft\n * @type {Conversation}\n */\n/**\n * Fired when a Conversation is no longer visible to the Client.\n * @event Client#conversationRemoved\n * @type {Conversation}\n */\n/**\n * Fired when a Conversation's attributes or metadata have been updated.\n * During Conversation's {@link Client.create| creation and initialization} this event might be fired multiple times\n * for same joined or created Conversation as new data is arriving from different sources.\n * @event Client#conversationUpdated\n * @type {Object}\n * @property {Conversation} conversation - Updated Conversation\n * @property {Conversation#UpdateReason[]} updateReasons - Array of Conversation's updated event reasons\n */\n/**\n * Fired when Client's connection state has been changed.\n * @event Client#connectionStateChanged\n * @type {Client#ConnectionState}\n */\n/**\n * Fired when a Participant has joined the Conversation.\n * @event Client#participantJoined\n * @type {Participant}\n */\n/**\n * Fired when a Participant has left the Conversation.\n * @event Client#participantLeft\n * @type {Participant}\n */\n/**\n * Fired when a Participant's fields has been updated.\n * @event Client#participantUpdated\n * @type {Object}\n * @property {Participant} participant - Updated Participant\n * @property {Participant#UpdateReason[]} updateReasons - Array of Participant's updated event reasons\n */\n/**\n * Fired when a new Message has been added to the Conversation on the server.\n * @event Client#messageAdded\n * @type {Message}\n */\n/**\n * Fired when Message is removed from Conversation's message list.\n * @event Client#messageRemoved\n * @type {Message}\n */\n/**\n * Fired when an existing Message's fields are updated with new values.\n * @event Client#messageUpdated\n * @type {Object}\n * @property {Message} message - Updated Message\n * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons\n */\n/**\n * Fired when token is about to expire and needs to be updated.\n * @event Client#tokenAboutToExpire\n * @type {void}\n */\n/**\n * Fired when token is expired.\n * @event Client#tokenExpired\n * @type {void}\n */\n/**\n * Fired when a Participant has stopped typing.\n * @event Client#typingEnded\n * @type {Participant}\n */\n/**\n * Fired when a Participant has started typing.\n * @event Client#typingStarted\n * @type {Participant}\n */\n/**\n * Fired when client received (and parsed) push notification via one of push conversations (apn, gcm, fcm).\n * @event Client#pushNotification\n * @type {PushNotification}\n */\n/**\n * Fired when the Client is subscribed to a User.\n * @event Client#userSubscribed\n * @type {User}\n */\n/**\n * Fired when the Client is unsubscribed from a User.\n * @event Client#userUnsubscribed\n * @type {User}\n */\n/**\n * Fired when the User's properties or reachability status have been updated.\n * @event Client#userUpdated\n * @type {Object}\n * @property {User} user - Updated User\n * @property {User#UpdateReason[]} updateReasons - Array of User's updated event reasons\n */\n/**\n * Fired when connection is interrupted by unexpected reason\n * @event Client#connectionError\n * @type {Object}\n * @property {Boolean} terminal - twilsock will stop connection attempts\n * @property {String} message - root cause\n * @property {Number} [httpStatusCode] - http status code if available\n * @property {Number} [errorCode] - Twilio public error code if available\n */"]},"metadata":{},"sourceType":"script"}