{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RegistrarConnector = exports.Connector = void 0;\n\nvar operation_retrier_1 = require(\"operation-retrier\");\n\nvar logger_1 = require(\"./logger\");\n\nvar connector_1 = require(\"./connector\");\n\nObject.defineProperty(exports, \"Connector\", {\n  enumerable: true,\n  get: function get() {\n    return connector_1.Connector;\n  }\n});\nvar retrierConfig = {\n  min: 2000,\n  max: 120000,\n  randomness: 0.2\n};\n/**\n * Manages the registrations on ERS service.\n * Deduplicates registrations and manages them automatically\n */\n\nvar RegistrarConnector = /*#__PURE__*/function (_connector_1$Connecto) {\n  _inherits(RegistrarConnector, _connector_1$Connecto);\n\n  var _super = _createSuper(RegistrarConnector);\n\n  /**\n   * Creates new instance of the ERS registrar\n   *\n   * @param Object configuration\n   * @param string notificationId\n   * @param string channelType\n   * @param Array messageTypes\n   */\n  function RegistrarConnector(channelType, context, transport, config) {\n    var _this;\n\n    _classCallCheck(this, RegistrarConnector);\n\n    _this = _super.call(this, config);\n    _this.channelType = channelType;\n    _this.context = context;\n    _this.transport = transport;\n    return _this;\n  }\n\n  _createClass(RegistrarConnector, [{\n    key: \"updateRegistration\",\n    value: function () {\n      var _updateRegistration = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(registration, reasons) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!reasons.has('notificationId')) {\n                  _context.next = 3;\n                  break;\n                }\n\n                _context.next = 3;\n                return this.removeRegistration();\n\n              case 3:\n                if (!(!registration.notificationId || !registration.notificationId.length)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", registration);\n\n              case 5:\n                _context.next = 7;\n                return this.register(registration);\n\n              case 7:\n                return _context.abrupt(\"return\", registration);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function updateRegistration(_x, _x2) {\n        return _updateRegistration.apply(this, arguments);\n      }\n\n      return updateRegistration;\n    }()\n  }, {\n    key: \"removeRegistration\",\n    value: function () {\n      var _removeRegistration = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        var url, headers;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.registrationId) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                url = \"\".concat(this.config.registrarUrl, \"/\").concat(this.registrationId, \"?productId=\").concat(this.context.productId);\n                headers = {\n                  'Content-Type': 'application/json',\n                  'X-Twilio-Token': this.config.token\n                };\n                _context2.prev = 4;\n                logger_1.log.trace('Removing registration for ', this.channelType);\n                _context2.next = 8;\n                return new operation_retrier_1.Retrier(Object.assign(retrierConfig, {\n                  maxAttemptsCount: 3\n                })).run(function () {\n                  return _this2.transport.delete(url, headers);\n                });\n\n              case 8:\n                logger_1.log.debug('Registration removed for', this.channelType);\n                _context2.next = 15;\n                break;\n\n              case 11:\n                _context2.prev = 11;\n                _context2.t0 = _context2[\"catch\"](4);\n                logger_1.log.error('Failed to remove of registration ', this.channelType, _context2.t0);\n                throw _context2.t0;\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[4, 11]]);\n      }));\n\n      function removeRegistration() {\n        return _removeRegistration.apply(this, arguments);\n      }\n\n      return removeRegistration;\n    }()\n  }, {\n    key: \"register\",\n    value: function () {\n      var _register = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(registration) {\n        var _this3 = this;\n\n        var registrarRequest, url, headers, response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                logger_1.log.trace('Registering', this.channelType, registration);\n                registrarRequest = {\n                  endpoint_platform: this.context.platform,\n                  channel_type: this.channelType,\n                  version: this.context.protocolVersion.toString(),\n                  message_types: Array.from(registration.messageTypes),\n                  data: {\n                    registration_id: registration.notificationId\n                  },\n                  ttl: 'PT24H'\n                };\n                url = \"\".concat(this.config.registrarUrl, \"?productId=\").concat(this.context.productId);\n                headers = {\n                  'Content-Type': 'application/json',\n                  'X-Twilio-Token': registration.token\n                };\n                logger_1.log.trace('Creating registration for channel ', this.channelType);\n                _context3.prev = 5;\n                _context3.next = 8;\n                return new operation_retrier_1.Retrier(retrierConfig).run(function () {\n                  return _this3.transport.post(url, headers, registrarRequest);\n                });\n\n              case 8:\n                response = _context3.sent;\n                this.registrationId = response.body.id;\n                logger_1.log.debug('Registration created: ', response);\n                _context3.next = 17;\n                break;\n\n              case 13:\n                _context3.prev = 13;\n                _context3.t0 = _context3[\"catch\"](5);\n                logger_1.log.error('Registration failed: ', _context3.t0);\n                throw _context3.t0;\n\n              case 17:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[5, 13]]);\n      }));\n\n      function register(_x3) {\n        return _register.apply(this, arguments);\n      }\n\n      return register;\n    }()\n  }]);\n\n  return RegistrarConnector;\n}(connector_1.Connector);\n\nexports.RegistrarConnector = RegistrarConnector;","map":{"version":3,"sources":["/Users/stefanpjanic/Desktop/mango_dev/node_modules/twilio-notifications/lib/registrar.connector.js"],"names":["Object","defineProperty","exports","value","RegistrarConnector","Connector","operation_retrier_1","require","logger_1","connector_1","enumerable","get","retrierConfig","min","max","randomness","channelType","context","transport","config","registration","reasons","has","removeRegistration","notificationId","length","register","registrationId","url","registrarUrl","productId","headers","token","log","trace","Retrier","assign","maxAttemptsCount","run","delete","debug","error","registrarRequest","endpoint_platform","platform","channel_type","version","protocolVersion","toString","message_types","Array","from","messageTypes","data","registration_id","ttl","post","response","body","id"],"mappings":"AAAA;;;;;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,kBAAR,GAA6BF,OAAO,CAACG,SAAR,GAAoB,KAAK,CAAtD;;AACA,IAAMC,mBAAmB,GAAGC,OAAO,CAAC,mBAAD,CAAnC;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAME,WAAW,GAAGF,OAAO,CAAC,aAAD,CAA3B;;AACAP,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,WAA/B,EAA4C;AAAEQ,EAAAA,UAAU,EAAE,IAAd;AAAoBC,EAAAA,GAAG,EAAE,eAAY;AAAE,WAAOF,WAAW,CAACJ,SAAnB;AAA+B;AAAtE,CAA5C;AACA,IAAIO,aAAa,GAAG;AAChBC,EAAAA,GAAG,EAAE,IADW;AAEhBC,EAAAA,GAAG,EAAE,MAFW;AAGhBC,EAAAA,UAAU,EAAE;AAHI,CAApB;AAKA;AACA;AACA;AACA;;IACMX,kB;;;;;AACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACI,8BAAYY,WAAZ,EAAyBC,OAAzB,EAAkCC,SAAlC,EAA6CC,MAA7C,EAAqD;AAAA;;AAAA;;AACjD,8BAAMA,MAAN;AACA,UAAKH,WAAL,GAAmBA,WAAnB;AACA,UAAKC,OAAL,GAAeA,OAAf;AACA,UAAKC,SAAL,GAAiBA,SAAjB;AAJiD;AAKpD;;;;;yFACD,iBAAyBE,YAAzB,EAAuCC,OAAvC;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQA,OAAO,CAACC,GAAR,CAAY,gBAAZ,CADR;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAEc,KAAKC,kBAAL,EAFd;;AAAA;AAAA,sBAIQ,CAACH,YAAY,CAACI,cAAd,IAAgC,CAACJ,YAAY,CAACI,cAAb,CAA4BC,MAJrE;AAAA;AAAA;AAAA;;AAAA,iDAKeL,YALf;;AAAA;AAAA;AAAA,uBAOU,KAAKM,QAAL,CAAcN,YAAd,CAPV;;AAAA;AAAA,iDAQWA,YARX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;yFAUA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACS,KAAKO,cADd;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAIUC,gBAAAA,GAJV,aAImB,KAAKT,MAAL,CAAYU,YAJ/B,cAI+C,KAAKF,cAJpD,wBAIgF,KAAKV,OAAL,CAAaa,SAJ7F;AAKUC,gBAAAA,OALV,GAKoB;AACZ,kCAAgB,kBADJ;AAEZ,oCAAkB,KAAKZ,MAAL,CAAYa;AAFlB,iBALpB;AAAA;AAUQxB,gBAAAA,QAAQ,CAACyB,GAAT,CAAaC,KAAb,CAAmB,4BAAnB,EAAiD,KAAKlB,WAAtD;AAVR;AAAA,uBAWc,IAAIV,mBAAmB,CAAC6B,OAAxB,CAAgCnC,MAAM,CAACoC,MAAP,CAAcxB,aAAd,EAA6B;AAAEyB,kBAAAA,gBAAgB,EAAE;AAApB,iBAA7B,CAAhC,EACDC,GADC,CACG;AAAA,yBAAM,MAAI,CAACpB,SAAL,CAAeqB,MAAf,CAAsBX,GAAtB,EAA2BG,OAA3B,CAAN;AAAA,iBADH,CAXd;;AAAA;AAaQvB,gBAAAA,QAAQ,CAACyB,GAAT,CAAaO,KAAb,CAAmB,0BAAnB,EAA+C,KAAKxB,WAApD;AAbR;AAAA;;AAAA;AAAA;AAAA;AAgBQR,gBAAAA,QAAQ,CAACyB,GAAT,CAAaQ,KAAb,CAAmB,mCAAnB,EAAwD,KAAKzB,WAA7D;AAhBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;+EAoBA,kBAAeI,YAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACIZ,gBAAAA,QAAQ,CAACyB,GAAT,CAAaC,KAAb,CAAmB,aAAnB,EAAkC,KAAKlB,WAAvC,EAAoDI,YAApD;AACIsB,gBAAAA,gBAFR,GAE2B;AACnBC,kBAAAA,iBAAiB,EAAE,KAAK1B,OAAL,CAAa2B,QADb;AAEnBC,kBAAAA,YAAY,EAAE,KAAK7B,WAFA;AAGnB8B,kBAAAA,OAAO,EAAE,KAAK7B,OAAL,CAAa8B,eAAb,CAA6BC,QAA7B,EAHU;AAInBC,kBAAAA,aAAa,EAAEC,KAAK,CAACC,IAAN,CAAW/B,YAAY,CAACgC,YAAxB,CAJI;AAKnBC,kBAAAA,IAAI,EAAE;AACFC,oBAAAA,eAAe,EAAElC,YAAY,CAACI;AAD5B,mBALa;AAQnB+B,kBAAAA,GAAG,EAAE;AARc,iBAF3B;AAYU3B,gBAAAA,GAZV,aAYmB,KAAKT,MAAL,CAAYU,YAZ/B,wBAYyD,KAAKZ,OAAL,CAAaa,SAZtE;AAaUC,gBAAAA,OAbV,GAaoB;AACZ,kCAAgB,kBADJ;AAEZ,oCAAkBX,YAAY,CAACY;AAFnB,iBAbpB;AAiBIxB,gBAAAA,QAAQ,CAACyB,GAAT,CAAaC,KAAb,CAAmB,oCAAnB,EAAyD,KAAKlB,WAA9D;AAjBJ;AAAA;AAAA,uBAmB6B,IAAIV,mBAAmB,CAAC6B,OAAxB,CAAgCvB,aAAhC,EAChB0B,GADgB,CACZ;AAAA,yBAAM,MAAI,CAACpB,SAAL,CAAesC,IAAf,CAAoB5B,GAApB,EAAyBG,OAAzB,EAAkCW,gBAAlC,CAAN;AAAA,iBADY,CAnB7B;;AAAA;AAmBYe,gBAAAA,QAnBZ;AAqBQ,qBAAK9B,cAAL,GAAsB8B,QAAQ,CAACC,IAAT,CAAcC,EAApC;AACAnD,gBAAAA,QAAQ,CAACyB,GAAT,CAAaO,KAAb,CAAmB,wBAAnB,EAA6CiB,QAA7C;AAtBR;AAAA;;AAAA;AAAA;AAAA;AAyBQjD,gBAAAA,QAAQ,CAACyB,GAAT,CAAaQ,KAAb,CAAmB,uBAAnB;AAzBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;EA7C6BhC,WAAW,CAACJ,S;;AA2E7CH,OAAO,CAACE,kBAAR,GAA6BA,kBAA7B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RegistrarConnector = exports.Connector = void 0;\nconst operation_retrier_1 = require(\"operation-retrier\");\nconst logger_1 = require(\"./logger\");\nconst connector_1 = require(\"./connector\");\nObject.defineProperty(exports, \"Connector\", { enumerable: true, get: function () { return connector_1.Connector; } });\nlet retrierConfig = {\n    min: 2000,\n    max: 120000,\n    randomness: 0.2\n};\n/**\n * Manages the registrations on ERS service.\n * Deduplicates registrations and manages them automatically\n */\nclass RegistrarConnector extends connector_1.Connector {\n    /**\n     * Creates new instance of the ERS registrar\n     *\n     * @param Object configuration\n     * @param string notificationId\n     * @param string channelType\n     * @param Array messageTypes\n     */\n    constructor(channelType, context, transport, config) {\n        super(config);\n        this.channelType = channelType;\n        this.context = context;\n        this.transport = transport;\n    }\n    async updateRegistration(registration, reasons) {\n        if (reasons.has('notificationId')) {\n            await this.removeRegistration();\n        }\n        if (!registration.notificationId || !registration.notificationId.length) {\n            return registration;\n        }\n        await this.register(registration);\n        return registration;\n    }\n    async removeRegistration() {\n        if (!this.registrationId) {\n            return;\n        }\n        const url = `${this.config.registrarUrl}/${this.registrationId}?productId=${this.context.productId}`;\n        const headers = {\n            'Content-Type': 'application/json',\n            'X-Twilio-Token': this.config.token\n        };\n        try {\n            logger_1.log.trace('Removing registration for ', this.channelType);\n            await new operation_retrier_1.Retrier(Object.assign(retrierConfig, { maxAttemptsCount: 3 }))\n                .run(() => this.transport.delete(url, headers));\n            logger_1.log.debug('Registration removed for', this.channelType);\n        }\n        catch (err) {\n            logger_1.log.error('Failed to remove of registration ', this.channelType, err);\n            throw err;\n        }\n    }\n    async register(registration) {\n        logger_1.log.trace('Registering', this.channelType, registration);\n        let registrarRequest = {\n            endpoint_platform: this.context.platform,\n            channel_type: this.channelType,\n            version: this.context.protocolVersion.toString(),\n            message_types: Array.from(registration.messageTypes),\n            data: {\n                registration_id: registration.notificationId\n            },\n            ttl: 'PT24H'\n        };\n        const url = `${this.config.registrarUrl}?productId=${this.context.productId}`;\n        const headers = {\n            'Content-Type': 'application/json',\n            'X-Twilio-Token': registration.token\n        };\n        logger_1.log.trace('Creating registration for channel ', this.channelType);\n        try {\n            let response = await new operation_retrier_1.Retrier(retrierConfig)\n                .run(() => this.transport.post(url, headers, registrarRequest));\n            this.registrationId = response.body.id;\n            logger_1.log.debug('Registration created: ', response);\n        }\n        catch (err) {\n            logger_1.log.error('Registration failed: ', err);\n            throw err;\n        }\n    }\n}\nexports.RegistrarConnector = RegistrarConnector;\n"]},"metadata":{},"sourceType":"script"}