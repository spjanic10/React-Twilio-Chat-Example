{"ast":null,"code":"\"use strict\";\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _map = require(\"babel-runtime/core-js/map\");\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypingIndicator = void 0;\n\nvar logger_1 = require(\"../logger\");\n\nvar notificationtypes_1 = require(\"../interfaces/notificationtypes\");\n\nvar log = logger_1.Logger.scope('TypingIndicator');\n/**\n * An important note in regards to typing timeout timers. There are two places that the SDK can get the \"typing_timeout\" attribute from. The first\n * place that the attribute appears in is the response received from POST -> /v1/typing REST call. In the body of that response, the value of the\n * \"typing_timeout\" attribute will be exactly the same as defined in the console. The second place that the attribute appears in is from a\n * notification of type \"twilio.ipmsg.typing_indicator\". In this case, the \"typing_timeout\" value will be +1 of that in the console. This\n * intentional. The timeout returned from the POST -> /v1/typing call should be used to disable further calls for that period of time. On contrary,\n * the timeout returned from the notification should be used as the timeout for the \"typingEnded\" event, +1 is to account for latency.\n *\n * @private\n */\n\n/**\n * @class TypingIndicator\n *\n * @constructor\n * @private\n */\n\nvar TypingIndicator = function () {\n  function TypingIndicator(config, services, getConversation) {\n    (0, _classCallCheck3.default)(this, TypingIndicator);\n    this.config = config;\n    this.services = services;\n    this.getConversation = getConversation;\n    this.serviceTypingTimeout = null;\n    this.sentUpdates = new _map2.default();\n  }\n\n  (0, _createClass3.default)(TypingIndicator, [{\n    key: \"initialize\",\n\n    /**\n     * Initialize TypingIndicator controller\n     * Registers for needed message types and sets listeners\n     * @private\n     */\n    value: function initialize() {\n      var _this = this;\n\n      this.services.notificationClient.subscribe(notificationtypes_1.NotificationTypes.TYPING_INDICATOR, 'twilsock');\n      this.services.notificationClient.on('message', function (type, message) {\n        if (type === notificationtypes_1.NotificationTypes.TYPING_INDICATOR) {\n          _this.handleRemoteTyping(message);\n        }\n      });\n    }\n    /**\n     * Remote participants typing events handler\n     * @private\n     */\n\n  }, {\n    key: \"handleRemoteTyping\",\n    value: function handleRemoteTyping(message) {\n      var _this2 = this;\n\n      log.trace('Got new typing indicator ', message);\n      this.getConversation(message.channel_sid).then(function (conversation) {\n        if (!conversation) {\n          return;\n        }\n\n        conversation.participants.forEach(function (participant) {\n          if (participant.identity !== message.identity) {\n            return;\n          }\n\n          var timeout = _this2.config.typingIndicatorTimeoutOverride + 1000 || message.typing_timeout * 1000;\n\n          participant._startTyping(timeout);\n        });\n      }).catch(function (err) {\n        log.error(err);\n        throw err;\n      });\n    }\n    /**\n     * Send typing event for the given conversation sid\n     * @param {String} conversationSid\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(conversationSid) {\n      var lastUpdate = this.sentUpdates.get(conversationSid);\n\n      if (lastUpdate && lastUpdate > Date.now() - this.typingTimeout) {\n        return _promise2.default.resolve();\n      }\n\n      this.sentUpdates.set(conversationSid, Date.now());\n      return this._send(conversationSid);\n    }\n  }, {\n    key: \"_send\",\n    value: function _send(conversationSid) {\n      var _this3 = this;\n\n      log.trace('Sending typing indicator');\n      var url = this.config.typingIndicatorUri;\n      var headers = {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      };\n      var body = 'ChannelSid=' + conversationSid;\n      return this.services.transport.post(url, headers, body).then(function (response) {\n        if (response.body.hasOwnProperty('typing_timeout')) {\n          _this3.serviceTypingTimeout = response.body.typing_timeout * 1000;\n        }\n      }).catch(function (err) {\n        log.error('Failed to send typing indicator:', err);\n        throw err;\n      });\n    }\n  }, {\n    key: \"typingTimeout\",\n    get: function get() {\n      return this.config.typingIndicatorTimeoutOverride || this.serviceTypingTimeout || this.config.typingIndicatorTimeoutDefault;\n    }\n  }]);\n  return TypingIndicator;\n}();\n\nexports.TypingIndicator = TypingIndicator;","map":{"version":3,"sources":["/Users/stefanpjanic/Desktop/mango_dev/node_modules/@twilio/conversations/browser/services/typingindicator.js"],"names":["_promise","require","_promise2","_interopRequireDefault","_map","_map2","_classCallCheck2","_classCallCheck3","_createClass2","_createClass3","obj","__esModule","default","Object","defineProperty","exports","value","TypingIndicator","logger_1","notificationtypes_1","log","Logger","scope","config","services","getConversation","serviceTypingTimeout","sentUpdates","key","initialize","_this","notificationClient","subscribe","NotificationTypes","TYPING_INDICATOR","on","type","message","handleRemoteTyping","_this2","trace","channel_sid","then","conversation","participants","forEach","participant","identity","timeout","typingIndicatorTimeoutOverride","typing_timeout","_startTyping","catch","err","error","send","conversationSid","lastUpdate","get","Date","now","typingTimeout","resolve","set","_send","_this3","url","typingIndicatorUri","headers","body","transport","post","response","hasOwnProperty","typingIndicatorTimeoutDefault"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _map = require(\"babel-runtime/core-js/map\");\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TypingIndicator = void 0;\nvar logger_1 = require(\"../logger\");\nvar notificationtypes_1 = require(\"../interfaces/notificationtypes\");\nvar log = logger_1.Logger.scope('TypingIndicator');\n/**\n * An important note in regards to typing timeout timers. There are two places that the SDK can get the \"typing_timeout\" attribute from. The first\n * place that the attribute appears in is the response received from POST -> /v1/typing REST call. In the body of that response, the value of the\n * \"typing_timeout\" attribute will be exactly the same as defined in the console. The second place that the attribute appears in is from a\n * notification of type \"twilio.ipmsg.typing_indicator\". In this case, the \"typing_timeout\" value will be +1 of that in the console. This\n * intentional. The timeout returned from the POST -> /v1/typing call should be used to disable further calls for that period of time. On contrary,\n * the timeout returned from the notification should be used as the timeout for the \"typingEnded\" event, +1 is to account for latency.\n *\n * @private\n */\n/**\n * @class TypingIndicator\n *\n * @constructor\n * @private\n */\n\nvar TypingIndicator = function () {\n    function TypingIndicator(config, services, getConversation) {\n        (0, _classCallCheck3.default)(this, TypingIndicator);\n\n        this.config = config;\n        this.services = services;\n        this.getConversation = getConversation;\n        this.serviceTypingTimeout = null;\n        this.sentUpdates = new _map2.default();\n    }\n\n    (0, _createClass3.default)(TypingIndicator, [{\n        key: \"initialize\",\n\n        /**\n         * Initialize TypingIndicator controller\n         * Registers for needed message types and sets listeners\n         * @private\n         */\n        value: function initialize() {\n            var _this = this;\n\n            this.services.notificationClient.subscribe(notificationtypes_1.NotificationTypes.TYPING_INDICATOR, 'twilsock');\n            this.services.notificationClient.on('message', function (type, message) {\n                if (type === notificationtypes_1.NotificationTypes.TYPING_INDICATOR) {\n                    _this.handleRemoteTyping(message);\n                }\n            });\n        }\n        /**\n         * Remote participants typing events handler\n         * @private\n         */\n\n    }, {\n        key: \"handleRemoteTyping\",\n        value: function handleRemoteTyping(message) {\n            var _this2 = this;\n\n            log.trace('Got new typing indicator ', message);\n            this.getConversation(message.channel_sid).then(function (conversation) {\n                if (!conversation) {\n                    return;\n                }\n                conversation.participants.forEach(function (participant) {\n                    if (participant.identity !== message.identity) {\n                        return;\n                    }\n                    var timeout = _this2.config.typingIndicatorTimeoutOverride + 1000 || message.typing_timeout * 1000;\n                    participant._startTyping(timeout);\n                });\n            }).catch(function (err) {\n                log.error(err);\n                throw err;\n            });\n        }\n        /**\n         * Send typing event for the given conversation sid\n         * @param {String} conversationSid\n         */\n\n    }, {\n        key: \"send\",\n        value: function send(conversationSid) {\n            var lastUpdate = this.sentUpdates.get(conversationSid);\n            if (lastUpdate && lastUpdate > Date.now() - this.typingTimeout) {\n                return _promise2.default.resolve();\n            }\n            this.sentUpdates.set(conversationSid, Date.now());\n            return this._send(conversationSid);\n        }\n    }, {\n        key: \"_send\",\n        value: function _send(conversationSid) {\n            var _this3 = this;\n\n            log.trace('Sending typing indicator');\n            var url = this.config.typingIndicatorUri;\n            var headers = {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            };\n            var body = 'ChannelSid=' + conversationSid;\n            return this.services.transport.post(url, headers, body).then(function (response) {\n                if (response.body.hasOwnProperty('typing_timeout')) {\n                    _this3.serviceTypingTimeout = response.body.typing_timeout * 1000;\n                }\n            }).catch(function (err) {\n                log.error('Failed to send typing indicator:', err);\n                throw err;\n            });\n        }\n    }, {\n        key: \"typingTimeout\",\n        get: function get() {\n            return this.config.typingIndicatorTimeoutOverride || this.serviceTypingTimeout || this.config.typingIndicatorTimeoutDefault;\n        }\n    }]);\n    return TypingIndicator;\n}();\n\nexports.TypingIndicator = TypingIndicator;"]},"metadata":{},"sourceType":"script"}