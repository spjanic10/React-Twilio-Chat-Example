{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _createClass = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _classCallCheck = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar events_1 = require(\"events\");\n\nvar logger_1 = require(\"./logger\");\n\nvar configuration_1 = require(\"./configuration\");\n\nvar twilsock_1 = require(\"./twilsock\");\n\nvar packetinterface_1 = require(\"./packetinterface\");\n\nvar websocketchannel_1 = require(\"./websocketchannel\");\n\nvar registrations_1 = require(\"./services/registrations\");\n\nvar upstream_1 = require(\"./services/upstream\");\n\nvar deferred_1 = require(\"./deferred\");\n\nvar twilsockerror_1 = require(\"./error/twilsockerror\");\n\nvar offlinestorage_1 = require(\"./offlinestorage\");\n\nvar tokenStorage_1 = require(\"./tokenStorage\");\n\nvar telemetrytracker_1 = require(\"./services/telemetrytracker\");\n\nvar TelemetryEvents = function TelemetryEvents() {\n  _classCallCheck(this, TelemetryEvents);\n};\n\nexports.TelemetryEvents = TelemetryEvents;\nTelemetryEvents.TWILSOCK_CONNECT = 'twilsock.sdk.connect'; // establish WebSocket connection (with WebSocket handshake finished)\n\nTelemetryEvents.TWILSOCK_INIT = 'twilsock.sdk.init'; // send \"init\" message and receive reply\n\n/**\n * @alias Twilsock\n * @classdesc Client library for the Twilsock service\n * It allows to recevie service-generated updates as well as bi-directional transport\n * @fires Twilsock#message\n * @fires Twilsock#connected\n * @fires Twilsock#disconnected\n * @fires Twilsock#tokenAboutToExpire\n * @fires Twilsock#stateChanged\n * @fires Twilsock#connectionError\n */\n\nvar TwilsockClient = /*#__PURE__*/function (_events_1$EventEmitte) {\n  _inherits(TwilsockClient, _events_1$EventEmitte);\n\n  var _super = _createSuper(TwilsockClient);\n\n  /**\n   * @param {string} token Twilio access token\n   * @param {string} productId Product identifier. Should be the same as a grant name in token\n   */\n  function TwilsockClient(token, productId) {\n    var _this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, TwilsockClient);\n\n    _this = _super.call(this);\n    _this.offlineStorageDeferred = new deferred_1.Deferred();\n    options.continuationToken = options.continuationToken ? options.continuationToken : tokenStorage_1.TokenStorage.getStoredToken(productId);\n    var config = _this.config = new configuration_1.Configuration(token, productId, options);\n    logger_1.log.setLevel(config.logLevel);\n    var websocket = new websocketchannel_1.WebSocketChannel(config.url);\n    var transport = options.transport ? options.transport : new packetinterface_1.PacketInterface(websocket, config);\n    _this.channel = options.channel ? options.channel : new twilsock_1.TwilsockImpl(websocket, transport, config);\n    _this.registrations = options.registrations ? options.registrations : new registrations_1.Registrations(transport);\n    _this.upstream = new upstream_1.Upstream(transport, _this.channel, config); // Send telemetry only when connected and initialised\n\n    _this.telemetryTracker = new telemetrytracker_1.TelemetryTracker(config, transport);\n\n    _this.channel.on('initialized', function () {\n      return _this.telemetryTracker.canSendTelemetry = true;\n    });\n\n    websocket.on('disconnected', function () {\n      return _this.telemetryTracker.canSendTelemetry = false;\n    });\n\n    _this.registrations.on('registered', function (id) {\n      return _this.emit('registered', id);\n    });\n\n    _this.channel.on('message', function (type, message) {\n      return setTimeout(function () {\n        return _this.emit('message', type, message);\n      }, 0);\n    });\n\n    _this.channel.on('stateChanged', function (state) {\n      return setTimeout(function () {\n        return _this.emit('stateChanged', state);\n      }, 0);\n    });\n\n    _this.channel.on('connectionError', function (connectionError) {\n      return setTimeout(function () {\n        return _this.emit('connectionError', connectionError);\n      }, 0);\n    });\n\n    _this.channel.on('tokenAboutToExpire', function () {\n      return setTimeout(function () {\n        return _this.emit('tokenAboutToExpire');\n      }, 0);\n    });\n\n    _this.channel.on('tokenExpired', function () {\n      return setTimeout(function () {\n        return _this.emit('tokenExpired');\n      }, 0);\n    });\n\n    _this.channel.on('connected', function () {\n      return _this.registrations.updateRegistrations();\n    });\n\n    _this.channel.on('connected', function () {\n      return _this.upstream.sendPendingMessages();\n    });\n\n    _this.channel.on('connected', function () {\n      return setTimeout(function () {\n        return _this.emit('connected');\n      }, 0);\n    }); // Twilsock telemetry events\n\n\n    _this.channel.on('beforeConnect', function () {\n      return _this.telemetryTracker.addPartialEvent(new telemetrytracker_1.TelemetryEventDescription('Establish WebSocket connection', '', new Date()), TelemetryEvents.TWILSOCK_CONNECT, telemetrytracker_1.TelemetryPoint.Start);\n    });\n\n    _this.channel.on('connected', function () {\n      return _this.telemetryTracker.addPartialEvent(new telemetrytracker_1.TelemetryEventDescription('Establish WebSocket connection', '', new Date(), new Date()), TelemetryEvents.TWILSOCK_CONNECT, telemetrytracker_1.TelemetryPoint.End);\n    });\n\n    _this.channel.on('beforeSendInit', function () {\n      return _this.telemetryTracker.addPartialEvent(new telemetrytracker_1.TelemetryEventDescription('Send Twilsock init', '', new Date()), TelemetryEvents.TWILSOCK_INIT, telemetrytracker_1.TelemetryPoint.Start);\n    });\n\n    _this.channel.on('initialized', function () {\n      return _this.telemetryTracker.addPartialEvent(new telemetrytracker_1.TelemetryEventDescription('Send Twilsock init', 'Succeeded', new Date(), new Date()), TelemetryEvents.TWILSOCK_INIT, telemetrytracker_1.TelemetryPoint.End);\n    });\n\n    _this.channel.on('sendInitFailed', function () {\n      return _this.telemetryTracker.addPartialEvent(new telemetrytracker_1.TelemetryEventDescription('Send Twilsock init', 'Failed', new Date(), new Date()), TelemetryEvents.TWILSOCK_INIT, telemetrytracker_1.TelemetryPoint.End);\n    });\n\n    _this.channel.on('initialized', function (initReply) {\n      _this.handleStorageId(productId, initReply);\n\n      tokenStorage_1.TokenStorage.storeToken(initReply.continuationToken, productId);\n      setTimeout(function () {\n        return _this.emit('initialized', initReply);\n      }, 0);\n    });\n\n    _this.channel.on('disconnected', function () {\n      return setTimeout(function () {\n        return _this.emit('disconnected');\n      }, 0);\n    });\n\n    _this.channel.on('disconnected', function () {\n      return _this.upstream.rejectPendingMessages();\n    });\n\n    _this.channel.on('disconnected', function () {\n      return _this.offlineStorageDeferred.fail(new twilsockerror_1.TwilsockError('Client disconnected'));\n    });\n\n    _this.offlineStorageDeferred.promise.catch(function () {});\n\n    return _this;\n  }\n\n  _createClass(TwilsockClient, [{\n    key: \"emit\",\n    value: function emit(event) {\n      var _get2;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      logger_1.log.debug(\"Emitting \".concat(event.toString(), \"(\").concat(args.map(function (a) {\n        return JSON.stringify(a);\n      }).join(', '), \")\"));\n      return (_get2 = _get(_getPrototypeOf(TwilsockClient.prototype), \"emit\", this)).call.apply(_get2, [this, event].concat(args));\n    }\n  }, {\n    key: \"handleStorageId\",\n    value: function handleStorageId(productId, initReply) {\n      if (!initReply.offlineStorage) {\n        this.offlineStorageDeferred.fail(new twilsockerror_1.TwilsockError('No offline storage id'));\n      } else if (initReply.offlineStorage.hasOwnProperty(productId)) {\n        try {\n          this.offlineStorageDeferred.set(offlinestorage_1.OfflineProductStorage.create(initReply.offlineStorage[productId]));\n          logger_1.log.debug(\"Offline storage for '\".concat(productId, \"' product: \").concat(JSON.stringify(initReply.offlineStorage[productId]), \".\"));\n        } catch (e) {\n          this.offlineStorageDeferred.fail(new twilsockerror_1.TwilsockError(\"Failed to parse offline storage for \".concat(productId, \" \").concat(JSON.stringify(initReply.offlineStorage[productId]), \". \").concat(e, \".\")));\n        }\n      } else {\n        this.offlineStorageDeferred.fail(new twilsockerror_1.TwilsockError(\"No offline storage id for '\".concat(productId, \"' product: \").concat(JSON.stringify(initReply.offlineStorage))));\n      }\n    }\n    /**\n     * Get offline storage ID\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"storageId\",\n    value: function storageId() {\n      return this.offlineStorageDeferred.promise;\n    }\n    /**\n     * Indicates if twilsock is connected now\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"isConnected\",\n    get: function get() {\n      return this.channel.isConnected;\n    }\n    /**\n     * Current state\n     * @returns {String}\n     */\n\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this.channel.state;\n    }\n    /**\n     * Update token\n     * @param {String} token\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"updateToken\",\n    value: function () {\n      var _updateToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(token) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                logger_1.log.trace(\"updating token '\".concat(token, \"'\"));\n\n                if (!(this.config.token === token)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 3:\n                this.config.updateToken(token);\n                return _context.abrupt(\"return\", this.channel.updateToken(token));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function updateToken(_x) {\n        return _updateToken.apply(this, arguments);\n      }\n\n      return updateToken;\n    }()\n    /**\n     * Updates notification context.\n     * This method shouldn't be used anyone except twilio notifications library\n     * @param contextId id of notification context\n     * @param context value of notification context\n     * @private\n     */\n\n  }, {\n    key: \"setNotificationsContext\",\n    value: function setNotificationsContext(contextId, context) {\n      this.registrations.setNotificationsContext(contextId, context);\n    }\n    /**\n     * Remove notification context.\n     * This method shouldn't be used anyone except twilio notifications library\n     * @param contextId id of notification context\n     * @private\n     */\n\n  }, {\n    key: \"removeNotificationsContext\",\n    value: function removeNotificationsContext(contextId) {\n      this.registrations.removeNotificationsContext(contextId);\n    }\n    /**\n     * Connect to the server\n     * @fires Twilsock#connected\n     * @public\n     * @returns {void}\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      return this.channel.connect();\n    }\n    /**\n     * Disconnect from the server\n     * @fires Twilsock#disconnected\n     * @public\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      this.telemetryTracker.sendTelemetry(telemetrytracker_1.EventSendingLimitation.AnyEventsIncludingUnfinished);\n      return this.channel.disconnect();\n    }\n    /**\n     * Get HTTP request to upstream service\n     * @param {string} url Upstream service url\n     * @param {headers} headers Set of custom headers\n     * @param {string} [grant] The product grant\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(url, headers, grant) {\n      this.telemetryTracker.sendTelemetry(telemetrytracker_1.EventSendingLimitation.AnyEvents); // send collected telemetry (if any) before upstream message shipment\n\n      return this.upstream.send('GET', url, headers, undefined, grant);\n    }\n    /**\n     * Post HTTP request to upstream service\n     * @param {string} url Upstream service url\n     * @param {headers} headers Set of custom headers\n     * @param {body} body Body to send\n     * @param {string} [grant] The product grant\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"post\",\n    value: function post(url, headers, body, grant) {\n      this.telemetryTracker.sendTelemetry(telemetrytracker_1.EventSendingLimitation.AnyEvents); // send collected telemetry (if any) before upstream message shipment\n\n      return this.upstream.send('POST', url, headers, body, grant);\n    }\n    /**\n     * Put HTTP request to upstream service\n     * @param {string} url Upstream service url\n     * @param {headers} headers Set of custom headers\n     * @param {body} body Body to send\n     * @param {string} [grant] The product grant\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"put\",\n    value: function put(url, headers, body, grant) {\n      this.telemetryTracker.sendTelemetry(telemetrytracker_1.EventSendingLimitation.AnyEvents); // send collected telemetry (if any) before upstream message shipment\n\n      return this.upstream.send('PUT', url, headers, body, grant);\n    }\n    /**\n     * Delete HTTP request to upstream service\n     * @param {string} url Upstream service url\n     * @param {headers} headers Set of custom headers\n     * @param {string} [grant] The product grant\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(url, headers, grant) {\n      this.telemetryTracker.sendTelemetry(telemetrytracker_1.EventSendingLimitation.AnyEvents); // send collected telemetry (if any) before upstream message shipment\n\n      return this.upstream.send('DELETE', url, headers, undefined, grant);\n    }\n    /**\n     * Submits internal telemetry event. Not to be used for any customer and/or sensitive data.\n     * @param {TelemetryEventDescription} event Event details.\n     * @returns {void}\n     */\n\n  }, {\n    key: \"addTelemetryEvent\",\n    value: function addTelemetryEvent(event) {\n      this.telemetryTracker.addTelemetryEvent(event);\n      this.telemetryTracker.sendTelemetryIfMinimalPortionCollected(); // send telemetry if need\n    }\n    /**\n     * Submits internal telemetry event. Not to be used for any customer and/or sensitive data.\n     * @param {TelemetryEventDescription} event Event details.\n     * @param {string} eventKey Unique event key.\n     * @param {TelemetryPoint} point Is this partial event for start or end of measurement.\n     * @returns {void}\n     */\n\n  }, {\n    key: \"addPartialTelemetryEvent\",\n    value: function addPartialTelemetryEvent(event, eventKey, point) {\n      this.telemetryTracker.addPartialEvent(event, eventKey, point);\n\n      if (point === telemetrytracker_1.TelemetryPoint.End) {\n        // this telemetry event is complete, so minimal portion could become ready to send\n        this.telemetryTracker.sendTelemetryIfMinimalPortionCollected(); // send telemetry if need\n      }\n    }\n  }]);\n\n  return TwilsockClient;\n}(events_1.EventEmitter);\n\nexports.TwilsockClient = TwilsockClient;\nexports.Twilsock = TwilsockClient;\n/**\n * Twilsock destination address descriptor\n * @typedef {Object} Twilsock#Address\n * @property {String} method - HTTP method. (POST, PUT, etc)\n * @property {String} host - host name without path. (e.g. my.company.com)\n * @property {String} path - path on the host (e.g. /my/app/to/call.php)\n */\n\n/**\n * Twilsock upstream message\n * @typedef {Object} Twilsock#Message\n * @property {Twilsock#Address} to - destination address\n * @property {Object} headers - HTTP headers\n * @property {Object} body - Body\n */\n\n/**\n * Fired when new message received\n * @param {Twilsock#Message} message\n * @event Twilsock#message\n */\n\n/**\n * Fired when socket connected\n * @param {String} URI of endpoint\n * @event Twilsock#connected\n */\n\n/**\n * Fired when socket disconnected\n * @event Twilsock#disconnected\n */\n\n/**\n * Fired when token is about to expire and should be updated\n * @event Twilsock#tokenAboutToExpire\n */\n\n/**\n* Fired when socket connected\n* @param {('connecting'|'connected'|'rejected'|'disconnecting'|'disconnected')} state - general twilsock state\n* @event Twilsock#stateChanged\n*/\n\n/**\n * Fired when connection is interrupted by unexpected reason\n * @type {Object}\n * @property {Boolean} terminal - twilsock will stop connection attempts\n * @property {String} message - root cause\n * @property {Number} [httpStatusCode] - http status code if available\n * @property {Number} [errorCode] - Twilio public error code if available\n * @event Twilsock#connectionError\n */","map":{"version":3,"sources":["/Users/stefanpjanic/Desktop/mango_dev/node_modules/twilio-notifications/node_modules/twilsock/lib/client.js"],"names":["Object","defineProperty","exports","value","events_1","require","logger_1","configuration_1","twilsock_1","packetinterface_1","websocketchannel_1","registrations_1","upstream_1","deferred_1","twilsockerror_1","offlinestorage_1","tokenStorage_1","telemetrytracker_1","TelemetryEvents","TWILSOCK_CONNECT","TWILSOCK_INIT","TwilsockClient","token","productId","options","offlineStorageDeferred","Deferred","continuationToken","TokenStorage","getStoredToken","config","Configuration","log","setLevel","logLevel","websocket","WebSocketChannel","url","transport","PacketInterface","channel","TwilsockImpl","registrations","Registrations","upstream","Upstream","telemetryTracker","TelemetryTracker","on","canSendTelemetry","id","emit","type","message","setTimeout","state","connectionError","updateRegistrations","sendPendingMessages","addPartialEvent","TelemetryEventDescription","Date","TelemetryPoint","Start","End","initReply","handleStorageId","storeToken","rejectPendingMessages","fail","TwilsockError","promise","catch","event","args","debug","toString","map","a","JSON","stringify","join","offlineStorage","hasOwnProperty","set","OfflineProductStorage","create","e","isConnected","trace","updateToken","contextId","context","setNotificationsContext","removeNotificationsContext","connect","sendTelemetry","EventSendingLimitation","AnyEventsIncludingUnfinished","disconnect","headers","grant","AnyEvents","send","undefined","body","addTelemetryEvent","sendTelemetryIfMinimalPortionCollected","eventKey","point","EventEmitter","Twilsock"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst events_1 = require(\"events\");\nconst logger_1 = require(\"./logger\");\nconst configuration_1 = require(\"./configuration\");\nconst twilsock_1 = require(\"./twilsock\");\nconst packetinterface_1 = require(\"./packetinterface\");\nconst websocketchannel_1 = require(\"./websocketchannel\");\nconst registrations_1 = require(\"./services/registrations\");\nconst upstream_1 = require(\"./services/upstream\");\nconst deferred_1 = require(\"./deferred\");\nconst twilsockerror_1 = require(\"./error/twilsockerror\");\nconst offlinestorage_1 = require(\"./offlinestorage\");\nconst tokenStorage_1 = require(\"./tokenStorage\");\nconst telemetrytracker_1 = require(\"./services/telemetrytracker\");\nclass TelemetryEvents {\n}\nexports.TelemetryEvents = TelemetryEvents;\nTelemetryEvents.TWILSOCK_CONNECT = 'twilsock.sdk.connect'; // establish WebSocket connection (with WebSocket handshake finished)\nTelemetryEvents.TWILSOCK_INIT = 'twilsock.sdk.init'; // send \"init\" message and receive reply\n/**\n * @alias Twilsock\n * @classdesc Client library for the Twilsock service\n * It allows to recevie service-generated updates as well as bi-directional transport\n * @fires Twilsock#message\n * @fires Twilsock#connected\n * @fires Twilsock#disconnected\n * @fires Twilsock#tokenAboutToExpire\n * @fires Twilsock#stateChanged\n * @fires Twilsock#connectionError\n */\nclass TwilsockClient extends events_1.EventEmitter {\n    /**\n     * @param {string} token Twilio access token\n     * @param {string} productId Product identifier. Should be the same as a grant name in token\n     */\n    constructor(token, productId, options = {}) {\n        super();\n        this.offlineStorageDeferred = new deferred_1.Deferred();\n        options.continuationToken = options.continuationToken ? options.continuationToken : tokenStorage_1.TokenStorage.getStoredToken(productId);\n        let config = this.config = new configuration_1.Configuration(token, productId, options);\n        logger_1.log.setLevel(config.logLevel);\n        let websocket = new websocketchannel_1.WebSocketChannel(config.url);\n        let transport = options.transport\n            ? options.transport\n            : new packetinterface_1.PacketInterface(websocket, config);\n        this.channel = options.channel\n            ? options.channel\n            : new twilsock_1.TwilsockImpl(websocket, transport, config);\n        this.registrations = options.registrations\n            ? options.registrations\n            : new registrations_1.Registrations(transport);\n        this.upstream = new upstream_1.Upstream(transport, this.channel, config);\n        // Send telemetry only when connected and initialised\n        this.telemetryTracker = new telemetrytracker_1.TelemetryTracker(config, transport);\n        this.channel.on('initialized', () => this.telemetryTracker.canSendTelemetry = true);\n        websocket.on('disconnected', () => this.telemetryTracker.canSendTelemetry = false);\n        this.registrations.on('registered', (id) => this.emit('registered', id));\n        this.channel.on('message', (type, message) => setTimeout(() => this.emit('message', type, message), 0));\n        this.channel.on('stateChanged', state => setTimeout(() => this.emit('stateChanged', state), 0));\n        this.channel.on('connectionError', (connectionError) => setTimeout(() => this.emit('connectionError', connectionError), 0));\n        this.channel.on('tokenAboutToExpire', () => setTimeout(() => this.emit('tokenAboutToExpire'), 0));\n        this.channel.on('tokenExpired', () => setTimeout(() => this.emit('tokenExpired'), 0));\n        this.channel.on('connected', () => this.registrations.updateRegistrations());\n        this.channel.on('connected', () => this.upstream.sendPendingMessages());\n        this.channel.on('connected', () => setTimeout(() => this.emit('connected'), 0));\n        // Twilsock telemetry events\n        this.channel.on('beforeConnect', () => this.telemetryTracker.addPartialEvent(new telemetrytracker_1.TelemetryEventDescription('Establish WebSocket connection', '', new Date()), TelemetryEvents.TWILSOCK_CONNECT, telemetrytracker_1.TelemetryPoint.Start));\n        this.channel.on('connected', () => this.telemetryTracker.addPartialEvent(new telemetrytracker_1.TelemetryEventDescription('Establish WebSocket connection', '', new Date(), new Date()), TelemetryEvents.TWILSOCK_CONNECT, telemetrytracker_1.TelemetryPoint.End));\n        this.channel.on('beforeSendInit', () => this.telemetryTracker.addPartialEvent(new telemetrytracker_1.TelemetryEventDescription('Send Twilsock init', '', new Date()), TelemetryEvents.TWILSOCK_INIT, telemetrytracker_1.TelemetryPoint.Start));\n        this.channel.on('initialized', () => this.telemetryTracker.addPartialEvent(new telemetrytracker_1.TelemetryEventDescription('Send Twilsock init', 'Succeeded', new Date(), new Date()), TelemetryEvents.TWILSOCK_INIT, telemetrytracker_1.TelemetryPoint.End));\n        this.channel.on('sendInitFailed', () => this.telemetryTracker.addPartialEvent(new telemetrytracker_1.TelemetryEventDescription('Send Twilsock init', 'Failed', new Date(), new Date()), TelemetryEvents.TWILSOCK_INIT, telemetrytracker_1.TelemetryPoint.End));\n        this.channel.on('initialized', (initReply) => {\n            this.handleStorageId(productId, initReply);\n            tokenStorage_1.TokenStorage.storeToken(initReply.continuationToken, productId);\n            setTimeout(() => this.emit('initialized', initReply), 0);\n        });\n        this.channel.on('disconnected', () => setTimeout(() => this.emit('disconnected'), 0));\n        this.channel.on('disconnected', () => this.upstream.rejectPendingMessages());\n        this.channel.on('disconnected', () => this.offlineStorageDeferred.fail(new twilsockerror_1.TwilsockError('Client disconnected')));\n        this.offlineStorageDeferred.promise.catch(() => { });\n    }\n    emit(event, ...args) {\n        logger_1.log.debug(`Emitting ${event.toString()}(${args.map(a => JSON.stringify(a)).join(', ')})`);\n        return super.emit(event, ...args);\n    }\n    handleStorageId(productId, initReply) {\n        if (!initReply.offlineStorage) {\n            this.offlineStorageDeferred.fail(new twilsockerror_1.TwilsockError('No offline storage id'));\n        }\n        else if (initReply.offlineStorage.hasOwnProperty(productId)) {\n            try {\n                this.offlineStorageDeferred.set(offlinestorage_1.OfflineProductStorage.create(initReply.offlineStorage[productId]));\n                logger_1.log.debug(`Offline storage for '${productId}' product: ${JSON.stringify(initReply.offlineStorage[productId])}.`);\n            }\n            catch (e) {\n                this.offlineStorageDeferred.fail(new twilsockerror_1.TwilsockError(`Failed to parse offline storage for ${productId} ${JSON.stringify(initReply.offlineStorage[productId])}. ${e}.`));\n            }\n        }\n        else {\n            this.offlineStorageDeferred.fail(new twilsockerror_1.TwilsockError(`No offline storage id for '${productId}' product: ${JSON.stringify(initReply.offlineStorage)}`));\n        }\n    }\n    /**\n     * Get offline storage ID\n     * @returns {Promise}\n     */\n    storageId() {\n        return this.offlineStorageDeferred.promise;\n    }\n    /**\n     * Indicates if twilsock is connected now\n     * @returns {Boolean}\n     */\n    get isConnected() {\n        return this.channel.isConnected;\n    }\n    /**\n     * Current state\n     * @returns {String}\n     */\n    get state() {\n        return this.channel.state;\n    }\n    /**\n     * Update token\n     * @param {String} token\n     * @returns {Promise}\n     */\n    async updateToken(token) {\n        logger_1.log.trace(`updating token '${token}'`);\n        if (this.config.token === token) {\n            return;\n        }\n        this.config.updateToken(token);\n        return this.channel.updateToken(token);\n    }\n    /**\n     * Updates notification context.\n     * This method shouldn't be used anyone except twilio notifications library\n     * @param contextId id of notification context\n     * @param context value of notification context\n     * @private\n     */\n    setNotificationsContext(contextId, context) {\n        this.registrations.setNotificationsContext(contextId, context);\n    }\n    /**\n     * Remove notification context.\n     * This method shouldn't be used anyone except twilio notifications library\n     * @param contextId id of notification context\n     * @private\n     */\n    removeNotificationsContext(contextId) {\n        this.registrations.removeNotificationsContext(contextId);\n    }\n    /**\n     * Connect to the server\n     * @fires Twilsock#connected\n     * @public\n     * @returns {void}\n     */\n    connect() {\n        return this.channel.connect();\n    }\n    /**\n     * Disconnect from the server\n     * @fires Twilsock#disconnected\n     * @public\n     * @returns {Promise}\n     */\n    disconnect() {\n        this.telemetryTracker.sendTelemetry(telemetrytracker_1.EventSendingLimitation.AnyEventsIncludingUnfinished);\n        return this.channel.disconnect();\n    }\n    /**\n     * Get HTTP request to upstream service\n     * @param {string} url Upstream service url\n     * @param {headers} headers Set of custom headers\n     * @param {string} [grant] The product grant\n     * @returns {Promise}\n     */\n    get(url, headers, grant) {\n        this.telemetryTracker.sendTelemetry(telemetrytracker_1.EventSendingLimitation.AnyEvents); // send collected telemetry (if any) before upstream message shipment\n        return this.upstream.send('GET', url, headers, undefined, grant);\n    }\n    /**\n     * Post HTTP request to upstream service\n     * @param {string} url Upstream service url\n     * @param {headers} headers Set of custom headers\n     * @param {body} body Body to send\n     * @param {string} [grant] The product grant\n     * @returns {Promise}\n     */\n    post(url, headers, body, grant) {\n        this.telemetryTracker.sendTelemetry(telemetrytracker_1.EventSendingLimitation.AnyEvents); // send collected telemetry (if any) before upstream message shipment\n        return this.upstream.send('POST', url, headers, body, grant);\n    }\n    /**\n     * Put HTTP request to upstream service\n     * @param {string} url Upstream service url\n     * @param {headers} headers Set of custom headers\n     * @param {body} body Body to send\n     * @param {string} [grant] The product grant\n     * @returns {Promise}\n     */\n    put(url, headers, body, grant) {\n        this.telemetryTracker.sendTelemetry(telemetrytracker_1.EventSendingLimitation.AnyEvents); // send collected telemetry (if any) before upstream message shipment\n        return this.upstream.send('PUT', url, headers, body, grant);\n    }\n    /**\n     * Delete HTTP request to upstream service\n     * @param {string} url Upstream service url\n     * @param {headers} headers Set of custom headers\n     * @param {string} [grant] The product grant\n     * @returns {Promise}\n     */\n    delete(url, headers, grant) {\n        this.telemetryTracker.sendTelemetry(telemetrytracker_1.EventSendingLimitation.AnyEvents); // send collected telemetry (if any) before upstream message shipment\n        return this.upstream.send('DELETE', url, headers, undefined, grant);\n    }\n    /**\n     * Submits internal telemetry event. Not to be used for any customer and/or sensitive data.\n     * @param {TelemetryEventDescription} event Event details.\n     * @returns {void}\n     */\n    addTelemetryEvent(event) {\n        this.telemetryTracker.addTelemetryEvent(event);\n        this.telemetryTracker.sendTelemetryIfMinimalPortionCollected(); // send telemetry if need\n    }\n    /**\n     * Submits internal telemetry event. Not to be used for any customer and/or sensitive data.\n     * @param {TelemetryEventDescription} event Event details.\n     * @param {string} eventKey Unique event key.\n     * @param {TelemetryPoint} point Is this partial event for start or end of measurement.\n     * @returns {void}\n     */\n    addPartialTelemetryEvent(event, eventKey, point) {\n        this.telemetryTracker.addPartialEvent(event, eventKey, point);\n        if (point === telemetrytracker_1.TelemetryPoint.End) {\n            // this telemetry event is complete, so minimal portion could become ready to send\n            this.telemetryTracker.sendTelemetryIfMinimalPortionCollected(); // send telemetry if need\n        }\n    }\n}\nexports.TwilsockClient = TwilsockClient;\nexports.Twilsock = TwilsockClient;\n/**\n * Twilsock destination address descriptor\n * @typedef {Object} Twilsock#Address\n * @property {String} method - HTTP method. (POST, PUT, etc)\n * @property {String} host - host name without path. (e.g. my.company.com)\n * @property {String} path - path on the host (e.g. /my/app/to/call.php)\n */\n/**\n * Twilsock upstream message\n * @typedef {Object} Twilsock#Message\n * @property {Twilsock#Address} to - destination address\n * @property {Object} headers - HTTP headers\n * @property {Object} body - Body\n */\n/**\n * Fired when new message received\n * @param {Twilsock#Message} message\n * @event Twilsock#message\n */\n/**\n * Fired when socket connected\n * @param {String} URI of endpoint\n * @event Twilsock#connected\n */\n/**\n * Fired when socket disconnected\n * @event Twilsock#disconnected\n */\n/**\n * Fired when token is about to expire and should be updated\n * @event Twilsock#tokenAboutToExpire\n */\n/**\n* Fired when socket connected\n* @param {('connecting'|'connected'|'rejected'|'disconnecting'|'disconnected')} state - general twilsock state\n* @event Twilsock#stateChanged\n*/\n/**\n * Fired when connection is interrupted by unexpected reason\n * @type {Object}\n * @property {Boolean} terminal - twilsock will stop connection attempts\n * @property {String} message - root cause\n * @property {Number} [httpStatusCode] - http status code if available\n * @property {Number} [errorCode] - Twilio public error code if available\n * @event Twilsock#connectionError\n */\n"]},"metadata":{},"sourceType":"script"}