{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NetworkService = void 0;\n\nvar uuid = require(\"uuid\");\n\nvar syncerror_1 = require(\"../utils/syncerror\");\n\nvar logger_1 = require(\"../utils/logger\");\n\nvar operation_retrier_1 = require(\"operation-retrier\");\n\nvar twilsock_1 = require(\"twilsock\");\n\nvar MINIMUM_RETRY_DELAY = 4000;\nvar MAXIMUM_RETRY_DELAY = 60000;\nvar MAXIMUM_ATTEMPTS_TIME = 90000;\nvar RETRY_DELAY_RANDOMNESS = 0.2;\n\nfunction messageFromErrorBody(transportError) {\n  if (transportError.body) {\n    if (transportError.body.message) {\n      return transportError.body.message;\n    }\n  }\n\n  switch (transportError.status) {\n    case 429:\n      return 'Throttled by server';\n\n    case 404:\n      return 'Not found from server';\n\n    default:\n      return 'Error from server';\n  }\n}\n\nfunction codeFromErrorBody(trasportError) {\n  if (trasportError.body) {\n    return trasportError.body.code;\n  }\n\n  return 0;\n}\n\nfunction mapTransportError(transportError) {\n  if (transportError.status === 409) {\n    return new syncerror_1.SyncNetworkError(messageFromErrorBody(transportError), transportError.status, codeFromErrorBody(transportError), transportError.body);\n  } else if (transportError.status) {\n    return new syncerror_1.SyncError(messageFromErrorBody(transportError), transportError.status, codeFromErrorBody(transportError));\n  } else if (transportError instanceof twilsock_1.TransportUnavailableError) {\n    return transportError;\n  } else {\n    return new syncerror_1.SyncError(transportError.message, 0, 0);\n  }\n}\n/**\n * @classdesc Incapsulates network operations to make it possible to add some optimization/caching strategies\n */\n\n\nvar NetworkService = /*#__PURE__*/function () {\n  function NetworkService(clientInfo, config, transport) {\n    _classCallCheck(this, NetworkService);\n\n    this.clientInfo = clientInfo;\n    this.config = config;\n    this.transport = transport;\n  }\n\n  _createClass(NetworkService, [{\n    key: \"createHeaders\",\n    value: function createHeaders() {\n      return {\n        'Content-Type': 'application/json',\n        'Twilio-Sync-Client-Info': JSON.stringify(this.clientInfo),\n        'Twilio-Request-Id': 'RQ' + uuid.v4().replace(/-/g, '')\n      };\n    }\n  }, {\n    key: \"backoffConfig\",\n    value: function backoffConfig() {\n      return Object.assign({\n        min: MINIMUM_RETRY_DELAY,\n        max: MAXIMUM_RETRY_DELAY,\n        maxAttemptsTime: MAXIMUM_ATTEMPTS_TIME,\n        randomness: RETRY_DELAY_RANDOMNESS\n      }, this.config.backoffConfig);\n    }\n  }, {\n    key: \"executeWithRetry\",\n    value: function executeWithRetry(request) {\n      var _this = this;\n\n      var retryWhenThrottled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return new Promise(function (resolve, reject) {\n        var codesToRetryOn = [502, 503, 504];\n\n        if (retryWhenThrottled) {\n          codesToRetryOn.push(429);\n        }\n\n        var retrier = new operation_retrier_1.Retrier(_this.backoffConfig());\n        retrier.on('attempt', function () {\n          request().then(function (result) {\n            return retrier.succeeded(result);\n          }).catch(function (err) {\n            if (codesToRetryOn.includes(err.status)) {\n              var delayOverride = parseInt(err.headers ? err.headers['Retry-After'] : null);\n              retrier.failed(mapTransportError(err), isNaN(delayOverride) ? null : delayOverride * 1000);\n            } else if (err.message === 'Twilsock disconnected') {\n              // Ugly hack. We must make a proper exceptions for twilsock\n              retrier.failed(mapTransportError(err));\n            } else {\n              // Fatal error\n              retrier.removeAllListeners();\n              retrier.cancel();\n              reject(mapTransportError(err));\n            }\n          });\n        });\n        retrier.on('succeeded', function (result) {\n          resolve(result);\n        });\n        retrier.on('cancelled', function (err) {\n          return reject(mapTransportError(err));\n        });\n        retrier.on('failed', function (err) {\n          return reject(mapTransportError(err));\n        });\n        retrier.start();\n      });\n    }\n    /**\n     * Make a GET request by given URI\n     * @Returns Promise<Response> Result of successful get request\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(uri) {\n      var _this2 = this;\n\n      var headers = this.createHeaders();\n      logger_1.default.debug('GET', uri, 'ID:', headers['Twilio-Request-Id']);\n      return this.executeWithRetry(function () {\n        return _this2.transport.get(uri, headers);\n      }, true);\n    }\n  }, {\n    key: \"post\",\n    value: function post(uri, body, revision) {\n      var _this3 = this;\n\n      var retryWhenThrottled = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var headers = this.createHeaders();\n\n      if (typeof revision !== 'undefined' && revision !== null) {\n        headers['If-Match'] = revision;\n      }\n\n      logger_1.default.debug('POST', uri, 'ID:', headers['Twilio-Request-Id']);\n      return this.executeWithRetry(function () {\n        return _this3.transport.post(uri, headers, body);\n      }, retryWhenThrottled);\n    }\n  }, {\n    key: \"put\",\n    value: function put(uri, body, revision) {\n      var _this4 = this;\n\n      var headers = this.createHeaders();\n\n      if (typeof revision !== 'undefined' && revision !== null) {\n        headers['If-Match'] = revision;\n      }\n\n      logger_1.default.debug('PUT', uri, 'ID:', headers['Twilio-Request-Id']);\n      return this.executeWithRetry(function () {\n        return _this4.transport.put(uri, headers, body);\n      }, false);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(uri) {\n      var _this5 = this;\n\n      var headers = this.createHeaders();\n      logger_1.default.debug('DELETE', uri, 'ID:', headers['Twilio-Request-Id']);\n      return this.executeWithRetry(function () {\n        return _this5.transport.delete(uri, headers);\n      }, false);\n    }\n  }]);\n\n  return NetworkService;\n}();\n\nexports.NetworkService = NetworkService;","map":{"version":3,"sources":["/Users/stefanpjanic/Desktop/mango_dev/node_modules/twilio-sync/lib/services/network.js"],"names":["Object","defineProperty","exports","value","NetworkService","uuid","require","syncerror_1","logger_1","operation_retrier_1","twilsock_1","MINIMUM_RETRY_DELAY","MAXIMUM_RETRY_DELAY","MAXIMUM_ATTEMPTS_TIME","RETRY_DELAY_RANDOMNESS","messageFromErrorBody","transportError","body","message","status","codeFromErrorBody","trasportError","code","mapTransportError","SyncNetworkError","SyncError","TransportUnavailableError","clientInfo","config","transport","JSON","stringify","v4","replace","assign","min","max","maxAttemptsTime","randomness","backoffConfig","request","retryWhenThrottled","Promise","resolve","reject","codesToRetryOn","push","retrier","Retrier","on","then","result","succeeded","catch","err","includes","delayOverride","parseInt","headers","failed","isNaN","removeAllListeners","cancel","start","uri","createHeaders","default","debug","executeWithRetry","get","revision","post","put","delete"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NetworkService = void 0;\nconst uuid = require(\"uuid\");\nconst syncerror_1 = require(\"../utils/syncerror\");\nconst logger_1 = require(\"../utils/logger\");\nconst operation_retrier_1 = require(\"operation-retrier\");\nconst twilsock_1 = require(\"twilsock\");\nconst MINIMUM_RETRY_DELAY = 4000;\nconst MAXIMUM_RETRY_DELAY = 60000;\nconst MAXIMUM_ATTEMPTS_TIME = 90000;\nconst RETRY_DELAY_RANDOMNESS = 0.2;\nfunction messageFromErrorBody(transportError) {\n    if (transportError.body) {\n        if (transportError.body.message) {\n            return transportError.body.message;\n        }\n    }\n    switch (transportError.status) {\n        case 429:\n            return 'Throttled by server';\n        case 404:\n            return 'Not found from server';\n        default:\n            return 'Error from server';\n    }\n}\nfunction codeFromErrorBody(trasportError) {\n    if (trasportError.body) {\n        return trasportError.body.code;\n    }\n    return 0;\n}\nfunction mapTransportError(transportError) {\n    if (transportError.status === 409) {\n        return new syncerror_1.SyncNetworkError(messageFromErrorBody(transportError), transportError.status, codeFromErrorBody(transportError), transportError.body);\n    }\n    else if (transportError.status) {\n        return new syncerror_1.SyncError(messageFromErrorBody(transportError), transportError.status, codeFromErrorBody(transportError));\n    }\n    else if (transportError instanceof twilsock_1.TransportUnavailableError) {\n        return transportError;\n    }\n    else {\n        return new syncerror_1.SyncError(transportError.message, 0, 0);\n    }\n}\n/**\n * @classdesc Incapsulates network operations to make it possible to add some optimization/caching strategies\n */\nclass NetworkService {\n    constructor(clientInfo, config, transport) {\n        this.clientInfo = clientInfo;\n        this.config = config;\n        this.transport = transport;\n    }\n    createHeaders() {\n        return {\n            'Content-Type': 'application/json',\n            'Twilio-Sync-Client-Info': JSON.stringify(this.clientInfo),\n            'Twilio-Request-Id': 'RQ' + uuid.v4().replace(/-/g, '')\n        };\n    }\n    backoffConfig() {\n        return Object.assign({\n            min: MINIMUM_RETRY_DELAY,\n            max: MAXIMUM_RETRY_DELAY,\n            maxAttemptsTime: MAXIMUM_ATTEMPTS_TIME,\n            randomness: RETRY_DELAY_RANDOMNESS\n        }, this.config.backoffConfig);\n    }\n    executeWithRetry(request, retryWhenThrottled = true) {\n        return new Promise((resolve, reject) => {\n            let codesToRetryOn = [502, 503, 504];\n            if (retryWhenThrottled) {\n                codesToRetryOn.push(429);\n            }\n            let retrier = new operation_retrier_1.Retrier(this.backoffConfig());\n            retrier.on('attempt', () => {\n                request()\n                    .then(result => retrier.succeeded(result))\n                    .catch(err => {\n                    if (codesToRetryOn.includes(err.status)) {\n                        let delayOverride = parseInt(err.headers ? err.headers['Retry-After'] : null);\n                        retrier.failed(mapTransportError(err), isNaN(delayOverride) ? null : delayOverride * 1000);\n                    }\n                    else if (err.message === 'Twilsock disconnected') {\n                        // Ugly hack. We must make a proper exceptions for twilsock\n                        retrier.failed(mapTransportError(err));\n                    }\n                    else {\n                        // Fatal error\n                        retrier.removeAllListeners();\n                        retrier.cancel();\n                        reject(mapTransportError(err));\n                    }\n                });\n            });\n            retrier.on('succeeded', result => {\n                resolve(result);\n            });\n            retrier.on('cancelled', err => reject(mapTransportError(err)));\n            retrier.on('failed', err => reject(mapTransportError(err)));\n            retrier.start();\n        });\n    }\n    /**\n     * Make a GET request by given URI\n     * @Returns Promise<Response> Result of successful get request\n     */\n    get(uri) {\n        let headers = this.createHeaders();\n        logger_1.default.debug('GET', uri, 'ID:', headers['Twilio-Request-Id']);\n        return this.executeWithRetry(() => this.transport.get(uri, headers), true);\n    }\n    post(uri, body, revision, retryWhenThrottled = false) {\n        let headers = this.createHeaders();\n        if (typeof revision !== 'undefined' && revision !== null) {\n            headers['If-Match'] = revision;\n        }\n        logger_1.default.debug('POST', uri, 'ID:', headers['Twilio-Request-Id']);\n        return this.executeWithRetry(() => this.transport.post(uri, headers, body), retryWhenThrottled);\n    }\n    put(uri, body, revision) {\n        let headers = this.createHeaders();\n        if (typeof revision !== 'undefined' && revision !== null) {\n            headers['If-Match'] = revision;\n        }\n        logger_1.default.debug('PUT', uri, 'ID:', headers['Twilio-Request-Id']);\n        return this.executeWithRetry(() => this.transport.put(uri, headers, body), false);\n    }\n    delete(uri) {\n        let headers = this.createHeaders();\n        logger_1.default.debug('DELETE', uri, 'ID:', headers['Twilio-Request-Id']);\n        return this.executeWithRetry(() => this.transport.delete(uri, headers), false);\n    }\n}\nexports.NetworkService = NetworkService;\n"]},"metadata":{},"sourceType":"script"}