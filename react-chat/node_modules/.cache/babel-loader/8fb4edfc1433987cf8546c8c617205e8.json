{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WebSocketChannel = void 0;\n\nvar events_1 = require(\"events\");\n\nvar logger_1 = require(\"./logger\");\n\nvar WebSocketChannel = /*#__PURE__*/function (_events_1$EventEmitte) {\n  _inherits(WebSocketChannel, _events_1$EventEmitte);\n\n  var _super = _createSuper(WebSocketChannel);\n\n  function WebSocketChannel(url) {\n    var _this;\n\n    _classCallCheck(this, WebSocketChannel);\n\n    _this = _super.call(this);\n    _this.url = url;\n    _this.WebSocket = global['WebSocket'] || global['MozWebSocket'] || require('ws');\n    return _this;\n  }\n\n  _createClass(WebSocketChannel, [{\n    key: \"isConnected\",\n    get: function get() {\n      return this.socket && this.socket.readyState === 1;\n    }\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      var _this2 = this;\n\n      logger_1.log.trace('connecting to socket');\n      var socket = new this.WebSocket(this.url);\n      socket.binaryType = 'arraybuffer';\n\n      socket.onopen = function () {\n        logger_1.log.debug(\"socket opened \".concat(_this2.url));\n\n        _this2.emit('connected');\n      };\n\n      socket.onclose = function (e) {\n        logger_1.log.debug('socket closed', e);\n\n        _this2.emit('disconnected', e);\n      };\n\n      socket.onerror = function (e) {\n        logger_1.log.debug('error:', e);\n\n        _this2.emit('socketError', e);\n      };\n\n      socket.onmessage = function (message) {\n        _this2.emit('message', message.data);\n      };\n\n      this.socket = socket;\n    }\n  }, {\n    key: \"send\",\n    value: function send(message) {\n      this.socket.send(message);\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      logger_1.log.trace('closing socket');\n\n      if (this.socket) {\n        this.socket.onopen = null;\n        this.socket.onclose = null;\n        this.socket.onerror = null;\n        this.socket.onmessage = null;\n\n        try {\n          this.socket.close();\n        } finally {}\n      }\n    }\n  }]);\n\n  return WebSocketChannel;\n}(events_1.EventEmitter);\n\nexports.WebSocketChannel = WebSocketChannel;","map":{"version":3,"sources":["/Users/stefanpjanic/Desktop/mango_dev/node_modules/twilsock/lib/websocketchannel.js"],"names":["Object","defineProperty","exports","value","WebSocketChannel","events_1","require","logger_1","url","WebSocket","global","socket","readyState","log","trace","binaryType","onopen","debug","emit","onclose","e","onerror","onmessage","message","data","send","close","EventEmitter"],"mappings":"AAAA;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,gBAAR,GAA2B,KAAK,CAAhC;;AACA,IAAMC,QAAQ,GAAGC,OAAO,CAAC,QAAD,CAAxB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;IACMF,gB;;;;;AACF,4BAAYI,GAAZ,EAAiB;AAAA;;AAAA;;AACb;AACA,UAAKA,GAAL,GAAWA,GAAX;AACA,UAAKC,SAAL,GAAiBC,MAAM,CAAC,WAAD,CAAN,IAAuBA,MAAM,CAAC,cAAD,CAA7B,IAAiDJ,OAAO,CAAC,IAAD,CAAzE;AAHa;AAIhB;;;;SACD,eAAkB;AACd,aAAO,KAAKK,MAAL,IAAe,KAAKA,MAAL,CAAYC,UAAZ,KAA2B,CAAjD;AACH;;;WACD,mBAAU;AAAA;;AACNL,MAAAA,QAAQ,CAACM,GAAT,CAAaC,KAAb,CAAmB,sBAAnB;AACA,UAAIH,MAAM,GAAG,IAAI,KAAKF,SAAT,CAAmB,KAAKD,GAAxB,CAAb;AACAG,MAAAA,MAAM,CAACI,UAAP,GAAoB,aAApB;;AACAJ,MAAAA,MAAM,CAACK,MAAP,GAAgB,YAAM;AAClBT,QAAAA,QAAQ,CAACM,GAAT,CAAaI,KAAb,yBAAoC,MAAI,CAACT,GAAzC;;AACA,QAAA,MAAI,CAACU,IAAL,CAAU,WAAV;AACH,OAHD;;AAIAP,MAAAA,MAAM,CAACQ,OAAP,GAAiB,UAACC,CAAD,EAAO;AACpBb,QAAAA,QAAQ,CAACM,GAAT,CAAaI,KAAb,CAAmB,eAAnB,EAAoCG,CAApC;;AACA,QAAA,MAAI,CAACF,IAAL,CAAU,cAAV,EAA0BE,CAA1B;AACH,OAHD;;AAIAT,MAAAA,MAAM,CAACU,OAAP,GAAiB,UAACD,CAAD,EAAO;AACpBb,QAAAA,QAAQ,CAACM,GAAT,CAAaI,KAAb,CAAmB,QAAnB,EAA6BG,CAA7B;;AACA,QAAA,MAAI,CAACF,IAAL,CAAU,aAAV,EAAyBE,CAAzB;AACH,OAHD;;AAIAT,MAAAA,MAAM,CAACW,SAAP,GAAmB,UAACC,OAAD,EAAa;AAC5B,QAAA,MAAI,CAACL,IAAL,CAAU,SAAV,EAAqBK,OAAO,CAACC,IAA7B;AACH,OAFD;;AAGA,WAAKb,MAAL,GAAcA,MAAd;AACH;;;WACD,cAAKY,OAAL,EAAc;AACV,WAAKZ,MAAL,CAAYc,IAAZ,CAAiBF,OAAjB;AACH;;;WACD,iBAAQ;AACJhB,MAAAA,QAAQ,CAACM,GAAT,CAAaC,KAAb,CAAmB,gBAAnB;;AACA,UAAI,KAAKH,MAAT,EAAiB;AACb,aAAKA,MAAL,CAAYK,MAAZ,GAAqB,IAArB;AACA,aAAKL,MAAL,CAAYQ,OAAZ,GAAsB,IAAtB;AACA,aAAKR,MAAL,CAAYU,OAAZ,GAAsB,IAAtB;AACA,aAAKV,MAAL,CAAYW,SAAZ,GAAwB,IAAxB;;AACA,YAAI;AACA,eAAKX,MAAL,CAAYe,KAAZ;AACH,SAFD,SAGQ,CACP;AACJ;AACJ;;;;EA9C0BrB,QAAQ,CAACsB,Y;;AAgDxCzB,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WebSocketChannel = void 0;\nconst events_1 = require(\"events\");\nconst logger_1 = require(\"./logger\");\nclass WebSocketChannel extends events_1.EventEmitter {\n    constructor(url) {\n        super();\n        this.url = url;\n        this.WebSocket = global['WebSocket'] || global['MozWebSocket'] || require('ws');\n    }\n    get isConnected() {\n        return this.socket && this.socket.readyState === 1;\n    }\n    connect() {\n        logger_1.log.trace('connecting to socket');\n        let socket = new this.WebSocket(this.url);\n        socket.binaryType = 'arraybuffer';\n        socket.onopen = () => {\n            logger_1.log.debug(`socket opened ${this.url}`);\n            this.emit('connected');\n        };\n        socket.onclose = (e) => {\n            logger_1.log.debug('socket closed', e);\n            this.emit('disconnected', e);\n        };\n        socket.onerror = (e) => {\n            logger_1.log.debug('error:', e);\n            this.emit('socketError', e);\n        };\n        socket.onmessage = (message) => {\n            this.emit('message', message.data);\n        };\n        this.socket = socket;\n    }\n    send(message) {\n        this.socket.send(message);\n    }\n    close() {\n        logger_1.log.trace('closing socket');\n        if (this.socket) {\n            this.socket.onopen = null;\n            this.socket.onclose = null;\n            this.socket.onerror = null;\n            this.socket.onmessage = null;\n            try {\n                this.socket.close();\n            }\n            finally {\n            }\n        }\n    }\n}\nexports.WebSocketChannel = WebSocketChannel;\n"]},"metadata":{},"sourceType":"script"}