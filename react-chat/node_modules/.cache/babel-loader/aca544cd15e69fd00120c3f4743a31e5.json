{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar logger_1 = require(\"./logger\");\n\nvar configuration_1 = require(\"./configuration\");\n\nvar media_1 = require(\"./media\");\n\nexports.Media = media_1.Media;\nexports.McsMedia = media_1.Media;\n\nvar transport_1 = require(\"./services/transport\");\n\nvar network_1 = require(\"./services/network\");\n\nvar log = logger_1.Logger.scope(''); //log.setLevel('trace');\n\nvar SDK_VERSION = require('./../package.json').version;\n\nvar MSG_NO_TOKEN = 'A valid Twilio token should be provided';\n/**\n * @classdesc A Client provides an interface for Media Content Service\n */\n\nvar Client = /*#__PURE__*/function () {\n  /**\n   * @param {String} token - Access token\n   * @param {String} baseUrl - Base URL for Media Content Service, i.e. /v1/Services/{serviceSid}/Media\n   * @param {Client#ClientOptions} [options] - Options to customize the Client\n   */\n  function Client(token, baseUrl) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, Client);\n\n    this.options = options;\n    this.options.logLevel = this.options.logLevel || 'silent';\n    this.config = new configuration_1.Configuration(token, baseUrl, this.options);\n\n    if (!token) {\n      throw new Error(MSG_NO_TOKEN);\n    }\n\n    log.setLevel(this.options.logLevel);\n    this.options.transport = this.options.transport || new transport_1.Transport();\n    this.transport = this.options.transport;\n    this.network = new network_1.Network(this.config, this.transport);\n  }\n  /**\n   * These options can be passed to Client constructor\n   * @typedef {Object} Client#ClientOptions\n   * @property {String} [logLevel='error'] - The level of logging to enable. Valid options\n   *   (from strictest to broadest): ['silent', 'error', 'warn', 'info', 'debug', 'trace']\n   */\n\n  /**\n   * Update the token used for Client operations\n   * @param {String} token - The JWT string of the new token\n   * @public\n   * @returns {void}\n   */\n\n\n  _createClass(Client, [{\n    key: \"updateToken\",\n    value: function updateToken(token) {\n      log.info('updateToken');\n\n      if (!token) {\n        throw new Error(MSG_NO_TOKEN);\n      }\n\n      this.config.updateToken(token);\n    }\n    /**\n     * Gets media from media service\n     * @param {String} sid - Media's SID\n     * @public\n     * @returns {Promise<Media>}\n     */\n\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(sid) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.network.get(\"\".concat(this.config.baseUrl, \"/\").concat(sid));\n\n              case 2:\n                response = _context.sent;\n                return _context.abrupt(\"return\", new media_1.Media(this.config, this.network, response.body));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function get(_x) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n    /**\n     * Posts raw content to media service\n     * @param {String} contentType - content type of media\n     * @param {String|Buffer} media - content to post\n     * @public\n     * @returns {Promise<Media>}\n     */\n\n  }, {\n    key: \"post\",\n    value: function () {\n      var _post = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(contentType, media) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.network.post(this.config.baseUrl, media, contentType);\n\n              case 2:\n                response = _context2.sent;\n                return _context2.abrupt(\"return\", new media_1.Media(this.config, this.network, response.body));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function post(_x2, _x3) {\n        return _post.apply(this, arguments);\n      }\n\n      return post;\n    }()\n    /**\n     * Posts FormData to media service. Can be used only with browser engine's FormData.\n     * In non-browser FormData case the method will do promise reject with\n     * new TypeError(\"Posting FormData supported only with browser engine's FormData\")\n     * @param {FormData} formData - form data to post\n     * @public\n     * @returns {Promise<Media>}\n     */\n\n  }, {\n    key: \"postFormData\",\n    value: function () {\n      var _postFormData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(formData) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.network.post(this.config.baseUrl, formData);\n\n              case 2:\n                response = _context3.sent;\n                return _context3.abrupt(\"return\", new media_1.Media(this.config, this.network, response.body));\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function postFormData(_x4) {\n        return _postFormData.apply(this, arguments);\n      }\n\n      return postFormData;\n    }()\n  }]);\n\n  return Client;\n}();\n\nexports.Client = Client;\nexports.McsClient = Client;\nClient.version = SDK_VERSION;\nexports.default = Client;","map":{"version":3,"sources":["/Users/stefanpjanic/Desktop/mango_dev/node_modules/twilio-mcs-client/lib/client.js"],"names":["Object","defineProperty","exports","value","logger_1","require","configuration_1","media_1","Media","McsMedia","transport_1","network_1","log","Logger","scope","SDK_VERSION","version","MSG_NO_TOKEN","Client","token","baseUrl","options","logLevel","config","Configuration","Error","setLevel","transport","Transport","network","Network","info","updateToken","sid","get","response","body","contentType","media","post","formData","McsClient","default"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst logger_1 = require(\"./logger\");\nconst configuration_1 = require(\"./configuration\");\nconst media_1 = require(\"./media\");\nexports.Media = media_1.Media;\nexports.McsMedia = media_1.Media;\nconst transport_1 = require(\"./services/transport\");\nconst network_1 = require(\"./services/network\");\nconst log = logger_1.Logger.scope('');\n//log.setLevel('trace');\nconst SDK_VERSION = require('./../package.json').version;\nconst MSG_NO_TOKEN = 'A valid Twilio token should be provided';\n/**\n * @classdesc A Client provides an interface for Media Content Service\n */\nclass Client {\n    /**\n     * @param {String} token - Access token\n     * @param {String} baseUrl - Base URL for Media Content Service, i.e. /v1/Services/{serviceSid}/Media\n     * @param {Client#ClientOptions} [options] - Options to customize the Client\n     */\n    constructor(token, baseUrl, options = {}) {\n        this.options = options;\n        this.options.logLevel = this.options.logLevel || 'silent';\n        this.config = new configuration_1.Configuration(token, baseUrl, this.options);\n        if (!token) {\n            throw new Error(MSG_NO_TOKEN);\n        }\n        log.setLevel(this.options.logLevel);\n        this.options.transport = this.options.transport || new transport_1.Transport();\n        this.transport = this.options.transport;\n        this.network = new network_1.Network(this.config, this.transport);\n    }\n    /**\n     * These options can be passed to Client constructor\n     * @typedef {Object} Client#ClientOptions\n     * @property {String} [logLevel='error'] - The level of logging to enable. Valid options\n     *   (from strictest to broadest): ['silent', 'error', 'warn', 'info', 'debug', 'trace']\n     */\n    /**\n     * Update the token used for Client operations\n     * @param {String} token - The JWT string of the new token\n     * @public\n     * @returns {void}\n     */\n    updateToken(token) {\n        log.info('updateToken');\n        if (!token) {\n            throw new Error(MSG_NO_TOKEN);\n        }\n        this.config.updateToken(token);\n    }\n    /**\n     * Gets media from media service\n     * @param {String} sid - Media's SID\n     * @public\n     * @returns {Promise<Media>}\n     */\n    async get(sid) {\n        let response = await this.network.get(`${this.config.baseUrl}/${sid}`);\n        return new media_1.Media(this.config, this.network, response.body);\n    }\n    /**\n     * Posts raw content to media service\n     * @param {String} contentType - content type of media\n     * @param {String|Buffer} media - content to post\n     * @public\n     * @returns {Promise<Media>}\n     */\n    async post(contentType, media) {\n        let response = await this.network.post(this.config.baseUrl, media, contentType);\n        return new media_1.Media(this.config, this.network, response.body);\n    }\n    /**\n     * Posts FormData to media service. Can be used only with browser engine's FormData.\n     * In non-browser FormData case the method will do promise reject with\n     * new TypeError(\"Posting FormData supported only with browser engine's FormData\")\n     * @param {FormData} formData - form data to post\n     * @public\n     * @returns {Promise<Media>}\n     */\n    async postFormData(formData) {\n        let response = await this.network.post(this.config.baseUrl, formData);\n        return new media_1.Media(this.config, this.network, response.body);\n    }\n}\nexports.Client = Client;\nexports.McsClient = Client;\nClient.version = SDK_VERSION;\nexports.default = Client;\n"]},"metadata":{},"sourceType":"script"}