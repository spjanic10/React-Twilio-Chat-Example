{"ast":null,"code":"var _classCallCheck = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\n// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType, XMLDOMConfiguration, XMLDOMImplementation, XMLDocument, XMLNode, XMLStringWriter, XMLStringifier, isPlainObject;\n\n  var _require = require('./Utility');\n\n  isPlainObject = _require.isPlainObject;\n  XMLDOMImplementation = require('./XMLDOMImplementation');\n  XMLDOMConfiguration = require('./XMLDOMConfiguration');\n  XMLNode = require('./XMLNode');\n  NodeType = require('./NodeType');\n  XMLStringifier = require('./XMLStringifier');\n  XMLStringWriter = require('./XMLStringWriter'); // Represents an XML builder\n\n  module.exports = XMLDocument = function () {\n    var XMLDocument = /*#__PURE__*/function (_XMLNode) {\n      \"use strict\";\n\n      _inherits(XMLDocument, _XMLNode);\n\n      var _super = _createSuper(XMLDocument);\n\n      // Initializes a new instance of `XMLDocument`\n      // `options.keepNullNodes` whether nodes with null values will be kept\n      //     or ignored: true or false\n      // `options.keepNullAttributes` whether attributes with null values will be\n      //     kept or ignored: true or false\n      // `options.ignoreDecorators` whether decorator strings will be ignored when\n      //     converting JS objects: true or false\n      // `options.separateArrayItems` whether array items are created as separate\n      //     nodes when passed as an object value: true or false\n      // `options.noDoubleEncoding` whether existing html entities are encoded:\n      //     true or false\n      // `options.stringify` a set of functions to use for converting values to\n      //     strings\n      // `options.writer` the default XML writer to use for converting nodes to\n      //     string. If the default writer is not set, the built-in XMLStringWriter\n      //     will be used instead.\n      function XMLDocument(options) {\n        var _this;\n\n        _classCallCheck(this, XMLDocument);\n\n        _this = _super.call(this, null);\n        _this.name = \"#document\";\n        _this.type = NodeType.Document;\n        _this.documentURI = null;\n        _this.domConfig = new XMLDOMConfiguration();\n        options || (options = {});\n\n        if (!options.writer) {\n          options.writer = new XMLStringWriter();\n        }\n\n        _this.options = options;\n        _this.stringify = new XMLStringifier(options);\n        return _this;\n      } // Ends the document and passes it to the given XML writer\n      // `writer` is either an XML writer or a plain object to pass to the\n      // constructor of the default XML writer. The default writer is assigned when\n      // creating the XML document. Following flags are recognized by the\n      // built-in XMLStringWriter:\n      //   `writer.pretty` pretty prints the result\n      //   `writer.indent` indentation for pretty print\n      //   `writer.offset` how many indentations to add to every line for pretty print\n      //   `writer.newline` newline sequence for pretty print\n\n\n      _createClass(XMLDocument, [{\n        key: \"end\",\n        value: function end(writer) {\n          var writerOptions;\n          writerOptions = {};\n\n          if (!writer) {\n            writer = this.options.writer;\n          } else if (isPlainObject(writer)) {\n            writerOptions = writer;\n            writer = this.options.writer;\n          }\n\n          return writer.document(this, writer.filterOptions(writerOptions));\n        } // Converts the XML document to string\n        // `options.pretty` pretty prints the result\n        // `options.indent` indentation for pretty print\n        // `options.offset` how many indentations to add to every line for pretty print\n        // `options.newline` newline sequence for pretty print\n\n      }, {\n        key: \"toString\",\n        value: function toString(options) {\n          return this.options.writer.document(this, this.options.writer.filterOptions(options));\n        } // DOM level 1 functions to be implemented later\n\n      }, {\n        key: \"createElement\",\n        value: function createElement(tagName) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"createDocumentFragment\",\n        value: function createDocumentFragment() {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"createTextNode\",\n        value: function createTextNode(data) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"createComment\",\n        value: function createComment(data) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"createCDATASection\",\n        value: function createCDATASection(data) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"createProcessingInstruction\",\n        value: function createProcessingInstruction(target, data) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"createAttribute\",\n        value: function createAttribute(name) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"createEntityReference\",\n        value: function createEntityReference(name) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"getElementsByTagName\",\n        value: function getElementsByTagName(tagname) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        } // DOM level 2 functions to be implemented later\n\n      }, {\n        key: \"importNode\",\n        value: function importNode(importedNode, deep) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"createElementNS\",\n        value: function createElementNS(namespaceURI, qualifiedName) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"createAttributeNS\",\n        value: function createAttributeNS(namespaceURI, qualifiedName) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"getElementsByTagNameNS\",\n        value: function getElementsByTagNameNS(namespaceURI, localName) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"getElementById\",\n        value: function getElementById(elementId) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        } // DOM level 3 functions to be implemented later\n\n      }, {\n        key: \"adoptNode\",\n        value: function adoptNode(source) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"normalizeDocument\",\n        value: function normalizeDocument() {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"renameNode\",\n        value: function renameNode(node, namespaceURI, qualifiedName) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        } // DOM level 4 functions to be implemented later\n\n      }, {\n        key: \"getElementsByClassName\",\n        value: function getElementsByClassName(classNames) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"createEvent\",\n        value: function createEvent(eventInterface) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"createRange\",\n        value: function createRange() {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"createNodeIterator\",\n        value: function createNodeIterator(root, whatToShow, filter) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }, {\n        key: \"createTreeWalker\",\n        value: function createTreeWalker(root, whatToShow, filter) {\n          throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n        }\n      }]);\n\n      return XMLDocument;\n    }(XMLNode);\n\n    ; // DOM level 1\n\n    Object.defineProperty(XMLDocument.prototype, 'implementation', {\n      value: new XMLDOMImplementation()\n    });\n    Object.defineProperty(XMLDocument.prototype, 'doctype', {\n      get: function get() {\n        var child, i, len, ref;\n        ref = this.children;\n\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n\n          if (child.type === NodeType.DocType) {\n            return child;\n          }\n        }\n\n        return null;\n      }\n    });\n    Object.defineProperty(XMLDocument.prototype, 'documentElement', {\n      get: function get() {\n        return this.rootObject || null;\n      }\n    }); // DOM level 3\n\n    Object.defineProperty(XMLDocument.prototype, 'inputEncoding', {\n      get: function get() {\n        return null;\n      }\n    });\n    Object.defineProperty(XMLDocument.prototype, 'strictErrorChecking', {\n      get: function get() {\n        return false;\n      }\n    });\n    Object.defineProperty(XMLDocument.prototype, 'xmlEncoding', {\n      get: function get() {\n        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n          return this.children[0].encoding;\n        } else {\n          return null;\n        }\n      }\n    });\n    Object.defineProperty(XMLDocument.prototype, 'xmlStandalone', {\n      get: function get() {\n        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n          return this.children[0].standalone === 'yes';\n        } else {\n          return false;\n        }\n      }\n    });\n    Object.defineProperty(XMLDocument.prototype, 'xmlVersion', {\n      get: function get() {\n        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n          return this.children[0].version;\n        } else {\n          return \"1.0\";\n        }\n      }\n    }); // DOM level 4\n\n    Object.defineProperty(XMLDocument.prototype, 'URL', {\n      get: function get() {\n        return this.documentURI;\n      }\n    });\n    Object.defineProperty(XMLDocument.prototype, 'origin', {\n      get: function get() {\n        return null;\n      }\n    });\n    Object.defineProperty(XMLDocument.prototype, 'compatMode', {\n      get: function get() {\n        return null;\n      }\n    });\n    Object.defineProperty(XMLDocument.prototype, 'characterSet', {\n      get: function get() {\n        return null;\n      }\n    });\n    Object.defineProperty(XMLDocument.prototype, 'contentType', {\n      get: function get() {\n        return null;\n      }\n    });\n    return XMLDocument;\n  }.call(this);\n}).call(this);","map":{"version":3,"sources":["/Users/stefanpjanic/Desktop/mango_dev/node_modules/xmlbuilder/lib/XMLDocument.js"],"names":["NodeType","XMLDOMConfiguration","XMLDOMImplementation","XMLDocument","XMLNode","XMLStringWriter","XMLStringifier","isPlainObject","require","module","exports","options","name","type","Document","documentURI","domConfig","writer","stringify","writerOptions","document","filterOptions","tagName","Error","debugInfo","data","target","tagname","importedNode","deep","namespaceURI","qualifiedName","localName","elementId","source","node","classNames","eventInterface","root","whatToShow","filter","Object","defineProperty","prototype","value","get","child","i","len","ref","children","length","DocType","rootObject","Declaration","encoding","standalone","version","call"],"mappings":"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","sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLDOMConfiguration, XMLDOMImplementation, XMLDocument, XMLNode, XMLStringWriter, XMLStringifier, isPlainObject;\n\n  ({isPlainObject} = require('./Utility'));\n\n  XMLDOMImplementation = require('./XMLDOMImplementation');\n\n  XMLDOMConfiguration = require('./XMLDOMConfiguration');\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  XMLStringifier = require('./XMLStringifier');\n\n  XMLStringWriter = require('./XMLStringWriter');\n\n  // Represents an XML builder\n  module.exports = XMLDocument = (function() {\n    class XMLDocument extends XMLNode {\n      // Initializes a new instance of `XMLDocument`\n\n      // `options.keepNullNodes` whether nodes with null values will be kept\n      //     or ignored: true or false\n      // `options.keepNullAttributes` whether attributes with null values will be\n      //     kept or ignored: true or false\n      // `options.ignoreDecorators` whether decorator strings will be ignored when\n      //     converting JS objects: true or false\n      // `options.separateArrayItems` whether array items are created as separate\n      //     nodes when passed as an object value: true or false\n      // `options.noDoubleEncoding` whether existing html entities are encoded:\n      //     true or false\n      // `options.stringify` a set of functions to use for converting values to\n      //     strings\n      // `options.writer` the default XML writer to use for converting nodes to\n      //     string. If the default writer is not set, the built-in XMLStringWriter\n      //     will be used instead.\n      constructor(options) {\n        super(null);\n        this.name = \"#document\";\n        this.type = NodeType.Document;\n        this.documentURI = null;\n        this.domConfig = new XMLDOMConfiguration();\n        options || (options = {});\n        if (!options.writer) {\n          options.writer = new XMLStringWriter();\n        }\n        this.options = options;\n        this.stringify = new XMLStringifier(options);\n      }\n\n      // Ends the document and passes it to the given XML writer\n\n      // `writer` is either an XML writer or a plain object to pass to the\n      // constructor of the default XML writer. The default writer is assigned when\n      // creating the XML document. Following flags are recognized by the\n      // built-in XMLStringWriter:\n      //   `writer.pretty` pretty prints the result\n      //   `writer.indent` indentation for pretty print\n      //   `writer.offset` how many indentations to add to every line for pretty print\n      //   `writer.newline` newline sequence for pretty print\n      end(writer) {\n        var writerOptions;\n        writerOptions = {};\n        if (!writer) {\n          writer = this.options.writer;\n        } else if (isPlainObject(writer)) {\n          writerOptions = writer;\n          writer = this.options.writer;\n        }\n        return writer.document(this, writer.filterOptions(writerOptions));\n      }\n\n      // Converts the XML document to string\n\n      // `options.pretty` pretty prints the result\n      // `options.indent` indentation for pretty print\n      // `options.offset` how many indentations to add to every line for pretty print\n      // `options.newline` newline sequence for pretty print\n      toString(options) {\n        return this.options.writer.document(this, this.options.writer.filterOptions(options));\n      }\n\n      // DOM level 1 functions to be implemented later\n      createElement(tagName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      createDocumentFragment() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      createTextNode(data) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      createComment(data) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      createCDATASection(data) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      createProcessingInstruction(target, data) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      createAttribute(name) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      createEntityReference(name) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getElementsByTagName(tagname) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      // DOM level 2 functions to be implemented later\n      importNode(importedNode, deep) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      createElementNS(namespaceURI, qualifiedName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      createAttributeNS(namespaceURI, qualifiedName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getElementsByTagNameNS(namespaceURI, localName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      getElementById(elementId) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      // DOM level 3 functions to be implemented later\n      adoptNode(source) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      normalizeDocument() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      renameNode(node, namespaceURI, qualifiedName) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      // DOM level 4 functions to be implemented later\n      getElementsByClassName(classNames) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      createEvent(eventInterface) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      createRange() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      createNodeIterator(root, whatToShow, filter) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n      createTreeWalker(root, whatToShow, filter) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n\n    };\n\n    // DOM level 1\n    Object.defineProperty(XMLDocument.prototype, 'implementation', {\n      value: new XMLDOMImplementation()\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'doctype', {\n      get: function() {\n        var child, i, len, ref;\n        ref = this.children;\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n          if (child.type === NodeType.DocType) {\n            return child;\n          }\n        }\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'documentElement', {\n      get: function() {\n        return this.rootObject || null;\n      }\n    });\n\n    // DOM level 3\n    Object.defineProperty(XMLDocument.prototype, 'inputEncoding', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'strictErrorChecking', {\n      get: function() {\n        return false;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'xmlEncoding', {\n      get: function() {\n        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n          return this.children[0].encoding;\n        } else {\n          return null;\n        }\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'xmlStandalone', {\n      get: function() {\n        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n          return this.children[0].standalone === 'yes';\n        } else {\n          return false;\n        }\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'xmlVersion', {\n      get: function() {\n        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n          return this.children[0].version;\n        } else {\n          return \"1.0\";\n        }\n      }\n    });\n\n    // DOM level 4\n    Object.defineProperty(XMLDocument.prototype, 'URL', {\n      get: function() {\n        return this.documentURI;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'origin', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'compatMode', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'characterSet', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'contentType', {\n      get: function() {\n        return null;\n      }\n    });\n\n    return XMLDocument;\n\n  }).call(this);\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}