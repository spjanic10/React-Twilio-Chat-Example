{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EntitiesCache = void 0;\n/**\n * Container for entities which are known by the client\n * It's needed for deduplication when client obtain the same object several times\n */\n\nvar EntitiesCache = /*#__PURE__*/function () {\n  function EntitiesCache() {\n    _classCallCheck(this, EntitiesCache);\n\n    this.names = new Map();\n    this.entities = new Map();\n  }\n\n  _createClass(EntitiesCache, [{\n    key: \"store\",\n    value: function store(entity) {\n      var stored = this.entities.get(entity.sid);\n\n      if (stored) {\n        return stored;\n      }\n\n      this.entities.set(entity.sid, entity);\n\n      if (entity.uniqueName) {\n        this.names.set(entity.type + '::' + entity.uniqueName, entity.sid);\n      }\n\n      return entity;\n    }\n  }, {\n    key: \"getResolved\",\n    value: function getResolved(id, type) {\n      var resolvedSid = this.names.get(type + '::' + id);\n      return resolvedSid ? this.entities.get(resolvedSid) : null;\n    }\n  }, {\n    key: \"get\",\n    value: function get(id, type) {\n      return this.entities.get(id) || this.getResolved(id, type) || null;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(sid) {\n      var cached = this.entities.get(sid);\n\n      if (cached) {\n        this.entities.delete(sid);\n\n        if (cached.uniqueName) {\n          this.names.delete(cached.type + '::' + cached.uniqueName);\n        }\n      }\n    }\n  }]);\n\n  return EntitiesCache;\n}();\n\nexports.EntitiesCache = EntitiesCache;","map":{"version":3,"sources":["/Users/stefanpjanic/Desktop/mango_dev/node_modules/twilio-sync/lib/entitiesCache.js"],"names":["Object","defineProperty","exports","value","EntitiesCache","names","Map","entities","entity","stored","get","sid","set","uniqueName","type","id","resolvedSid","getResolved","cached","delete"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,aAAR,GAAwB,KAAK,CAA7B;AACA;AACA;AACA;AACA;;IACMA,a;AACF,2BAAc;AAAA;;AACV,SAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACA,SAAKC,QAAL,GAAgB,IAAID,GAAJ,EAAhB;AACH;;;;WACD,eAAME,MAAN,EAAc;AACV,UAAIC,MAAM,GAAG,KAAKF,QAAL,CAAcG,GAAd,CAAkBF,MAAM,CAACG,GAAzB,CAAb;;AACA,UAAIF,MAAJ,EAAY;AACR,eAAOA,MAAP;AACH;;AACD,WAAKF,QAAL,CAAcK,GAAd,CAAkBJ,MAAM,CAACG,GAAzB,EAA8BH,MAA9B;;AACA,UAAIA,MAAM,CAACK,UAAX,EAAuB;AACnB,aAAKR,KAAL,CAAWO,GAAX,CAAeJ,MAAM,CAACM,IAAP,GAAc,IAAd,GAAqBN,MAAM,CAACK,UAA3C,EAAuDL,MAAM,CAACG,GAA9D;AACH;;AACD,aAAOH,MAAP;AACH;;;WACD,qBAAYO,EAAZ,EAAgBD,IAAhB,EAAsB;AAClB,UAAIE,WAAW,GAAG,KAAKX,KAAL,CAAWK,GAAX,CAAeI,IAAI,GAAG,IAAP,GAAcC,EAA7B,CAAlB;AACA,aAAOC,WAAW,GAAG,KAAKT,QAAL,CAAcG,GAAd,CAAkBM,WAAlB,CAAH,GAAoC,IAAtD;AACH;;;WACD,aAAID,EAAJ,EAAQD,IAAR,EAAc;AACV,aAAO,KAAKP,QAAL,CAAcG,GAAd,CAAkBK,EAAlB,KAAyB,KAAKE,WAAL,CAAiBF,EAAjB,EAAqBD,IAArB,CAAzB,IAAuD,IAA9D;AACH;;;WACD,gBAAOH,GAAP,EAAY;AACR,UAAIO,MAAM,GAAG,KAAKX,QAAL,CAAcG,GAAd,CAAkBC,GAAlB,CAAb;;AACA,UAAIO,MAAJ,EAAY;AACR,aAAKX,QAAL,CAAcY,MAAd,CAAqBR,GAArB;;AACA,YAAIO,MAAM,CAACL,UAAX,EAAuB;AACnB,eAAKR,KAAL,CAAWc,MAAX,CAAkBD,MAAM,CAACJ,IAAP,GAAc,IAAd,GAAqBI,MAAM,CAACL,UAA9C;AACH;AACJ;AACJ;;;;;;AAELX,OAAO,CAACE,aAAR,GAAwBA,aAAxB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntitiesCache = void 0;\n/**\n * Container for entities which are known by the client\n * It's needed for deduplication when client obtain the same object several times\n */\nclass EntitiesCache {\n    constructor() {\n        this.names = new Map();\n        this.entities = new Map();\n    }\n    store(entity) {\n        let stored = this.entities.get(entity.sid);\n        if (stored) {\n            return stored;\n        }\n        this.entities.set(entity.sid, entity);\n        if (entity.uniqueName) {\n            this.names.set(entity.type + '::' + entity.uniqueName, entity.sid);\n        }\n        return entity;\n    }\n    getResolved(id, type) {\n        let resolvedSid = this.names.get(type + '::' + id);\n        return resolvedSid ? this.entities.get(resolvedSid) : null;\n    }\n    get(id, type) {\n        return this.entities.get(id) || this.getResolved(id, type) || null;\n    }\n    remove(sid) {\n        let cached = this.entities.get(sid);\n        if (cached) {\n            this.entities.delete(sid);\n            if (cached.uniqueName) {\n                this.names.delete(cached.type + '::' + cached.uniqueName);\n            }\n        }\n    }\n}\nexports.EntitiesCache = EntitiesCache;\n"]},"metadata":{},"sourceType":"script"}