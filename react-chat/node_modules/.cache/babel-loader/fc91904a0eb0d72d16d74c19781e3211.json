{"ast":null,"code":"var _classCallCheck = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\n// Generated by CoffeeScript 2.4.1\n(function () {\n  var NodeType, XMLDTDNotation, XMLNode;\n  XMLNode = require('./XMLNode');\n  NodeType = require('./NodeType'); // Represents a NOTATION entry in the DTD\n\n  module.exports = XMLDTDNotation = function () {\n    var XMLDTDNotation = /*#__PURE__*/function (_XMLNode) {\n      \"use strict\";\n\n      _inherits(XMLDTDNotation, _XMLNode);\n\n      var _super = _createSuper(XMLDTDNotation);\n\n      // Initializes a new instance of `XMLDTDNotation`\n      // `parent` the parent `XMLDocType` element\n      // `name` the name of the notation\n      // `value` an object with external entity details\n      // `value.pubID` public identifier\n      // `value.sysID` system identifier\n      function XMLDTDNotation(parent, name, value) {\n        var _this;\n\n        _classCallCheck(this, XMLDTDNotation);\n\n        _this = _super.call(this, parent);\n\n        if (name == null) {\n          throw new Error(\"Missing DTD notation name. \" + _this.debugInfo(name));\n        }\n\n        if (!value.pubID && !value.sysID) {\n          throw new Error(\"Public or system identifiers are required for an external entity. \" + _this.debugInfo(name));\n        }\n\n        _this.name = _this.stringify.name(name);\n        _this.type = NodeType.NotationDeclaration;\n\n        if (value.pubID != null) {\n          _this.pubID = _this.stringify.dtdPubID(value.pubID);\n        }\n\n        if (value.sysID != null) {\n          _this.sysID = _this.stringify.dtdSysID(value.sysID);\n        }\n\n        return _this;\n      } // Converts the XML fragment to string\n      // `options.pretty` pretty prints the result\n      // `options.indent` indentation for pretty print\n      // `options.offset` how many indentations to add to every line for pretty print\n      // `options.newline` newline sequence for pretty print\n\n\n      _createClass(XMLDTDNotation, [{\n        key: \"toString\",\n        value: function toString(options) {\n          return this.options.writer.dtdNotation(this, this.options.writer.filterOptions(options));\n        }\n      }]);\n\n      return XMLDTDNotation;\n    }(XMLNode);\n\n    ; // DOM level 1\n\n    Object.defineProperty(XMLDTDNotation.prototype, 'publicId', {\n      get: function get() {\n        return this.pubID;\n      }\n    });\n    Object.defineProperty(XMLDTDNotation.prototype, 'systemId', {\n      get: function get() {\n        return this.sysID;\n      }\n    });\n    return XMLDTDNotation;\n  }.call(this);\n}).call(this);","map":{"version":3,"sources":["/Users/stefanpjanic/Desktop/mango_dev/node_modules/xmlbuilder/lib/XMLDTDNotation.js"],"names":["NodeType","XMLDTDNotation","XMLNode","require","module","exports","parent","name","value","Error","debugInfo","pubID","sysID","stringify","type","NotationDeclaration","dtdPubID","dtdSysID","options","writer","dtdNotation","filterOptions","Object","defineProperty","prototype","get","call"],"mappings":";;;;;;;;AAAA;AACA,CAAC,YAAW;AACV,MAAIA,QAAJ,EAAcC,cAAd,EAA8BC,OAA9B;AAEAA,EAAAA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAjB;AAEAH,EAAAA,QAAQ,GAAGG,OAAO,CAAC,YAAD,CAAlB,CALU,CAOV;;AACAC,EAAAA,MAAM,CAACC,OAAP,GAAiBJ,cAAc,GAAI,YAAW;AAAA,QACtCA,cADsC;AAAA;;AAAA;;AAAA;;AAE1C;AAEA;AACA;AACA;AACA;AACA;AACA,8BAAYK,MAAZ,EAAoBC,IAApB,EAA0BC,KAA1B,EAAiC;AAAA;;AAAA;;AAC/B,kCAAMF,MAAN;;AACA,YAAIC,IAAI,IAAI,IAAZ,EAAkB;AAChB,gBAAM,IAAIE,KAAJ,CAAU,gCAAgC,MAAKC,SAAL,CAAeH,IAAf,CAA1C,CAAN;AACD;;AACD,YAAI,CAACC,KAAK,CAACG,KAAP,IAAgB,CAACH,KAAK,CAACI,KAA3B,EAAkC;AAChC,gBAAM,IAAIH,KAAJ,CAAU,uEAAuE,MAAKC,SAAL,CAAeH,IAAf,CAAjF,CAAN;AACD;;AACD,cAAKA,IAAL,GAAY,MAAKM,SAAL,CAAeN,IAAf,CAAoBA,IAApB,CAAZ;AACA,cAAKO,IAAL,GAAYd,QAAQ,CAACe,mBAArB;;AACA,YAAIP,KAAK,CAACG,KAAN,IAAe,IAAnB,EAAyB;AACvB,gBAAKA,KAAL,GAAa,MAAKE,SAAL,CAAeG,QAAf,CAAwBR,KAAK,CAACG,KAA9B,CAAb;AACD;;AACD,YAAIH,KAAK,CAACI,KAAN,IAAe,IAAnB,EAAyB;AACvB,gBAAKA,KAAL,GAAa,MAAKC,SAAL,CAAeI,QAAf,CAAwBT,KAAK,CAACI,KAA9B,CAAb;AACD;;AAf8B;AAgBhC,OAzByC,CA2B1C;AAEA;AACA;AACA;AACA;;;AAhC0C;AAAA;AAAA,eAiC1C,kBAASM,OAAT,EAAkB;AAChB,iBAAO,KAAKA,OAAL,CAAaC,MAAb,CAAoBC,WAApB,CAAgC,IAAhC,EAAsC,KAAKF,OAAL,CAAaC,MAAb,CAAoBE,aAApB,CAAkCH,OAAlC,CAAtC,CAAP;AACD;AAnCyC;;AAAA;AAAA,MACfhB,OADe;;AAqC3C,KArC2C,CAuC5C;;AACAoB,IAAAA,MAAM,CAACC,cAAP,CAAsBtB,cAAc,CAACuB,SAArC,EAAgD,UAAhD,EAA4D;AAC1DC,MAAAA,GAAG,EAAE,eAAW;AACd,eAAO,KAAKd,KAAZ;AACD;AAHyD,KAA5D;AAMAW,IAAAA,MAAM,CAACC,cAAP,CAAsBtB,cAAc,CAACuB,SAArC,EAAgD,UAAhD,EAA4D;AAC1DC,MAAAA,GAAG,EAAE,eAAW;AACd,eAAO,KAAKb,KAAZ;AACD;AAHyD,KAA5D;AAMA,WAAOX,cAAP;AAED,GAtDiC,CAsD/ByB,IAtD+B,CAsD1B,IAtD0B,CAAlC;AAwDD,CAhED,EAgEGA,IAhEH,CAgEQ,IAhER","sourcesContent":["// Generated by CoffeeScript 2.4.1\n(function() {\n  var NodeType, XMLDTDNotation, XMLNode;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  // Represents a NOTATION entry in the DTD\n  module.exports = XMLDTDNotation = (function() {\n    class XMLDTDNotation extends XMLNode {\n      // Initializes a new instance of `XMLDTDNotation`\n\n      // `parent` the parent `XMLDocType` element\n      // `name` the name of the notation\n      // `value` an object with external entity details\n      // `value.pubID` public identifier\n      // `value.sysID` system identifier\n      constructor(parent, name, value) {\n        super(parent);\n        if (name == null) {\n          throw new Error(\"Missing DTD notation name. \" + this.debugInfo(name));\n        }\n        if (!value.pubID && !value.sysID) {\n          throw new Error(\"Public or system identifiers are required for an external entity. \" + this.debugInfo(name));\n        }\n        this.name = this.stringify.name(name);\n        this.type = NodeType.NotationDeclaration;\n        if (value.pubID != null) {\n          this.pubID = this.stringify.dtdPubID(value.pubID);\n        }\n        if (value.sysID != null) {\n          this.sysID = this.stringify.dtdSysID(value.sysID);\n        }\n      }\n\n      // Converts the XML fragment to string\n\n      // `options.pretty` pretty prints the result\n      // `options.indent` indentation for pretty print\n      // `options.offset` how many indentations to add to every line for pretty print\n      // `options.newline` newline sequence for pretty print\n      toString(options) {\n        return this.options.writer.dtdNotation(this, this.options.writer.filterOptions(options));\n      }\n\n    };\n\n    // DOM level 1\n    Object.defineProperty(XMLDTDNotation.prototype, 'publicId', {\n      get: function() {\n        return this.pubID;\n      }\n    });\n\n    Object.defineProperty(XMLDTDNotation.prototype, 'systemId', {\n      get: function() {\n        return this.sysID;\n      }\n    });\n\n    return XMLDTDNotation;\n\n  }).call(this);\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}