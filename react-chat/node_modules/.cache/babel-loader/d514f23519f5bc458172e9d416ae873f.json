{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/stefanpjanic/Desktop/mango_dev/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar logger_1 = require(\"../logger\");\n\nvar events_1 = require(\"events\");\n\nvar uuid_1 = require(\"uuid\");\n\nvar twilsockerror_1 = require(\"../error/twilsockerror\");\n/**\n * Registrations module handles all operations with registration contexts through twilsock\n * Main role: it automatically refreshes all registrations after reconnect.\n */\n\n\nvar Registrations = /*#__PURE__*/function (_events_1$EventEmitte) {\n  _inherits(Registrations, _events_1$EventEmitte);\n\n  var _super = _createSuper(Registrations);\n\n  function Registrations(transport) {\n    var _this;\n\n    _classCallCheck(this, Registrations);\n\n    _this = _super.call(this);\n    _this.transport = transport;\n    _this.registrations = new Map();\n    _this.registrationsInProgress = new Map();\n    return _this;\n  }\n\n  _createClass(Registrations, [{\n    key: \"putNotificationContext\",\n    value: function () {\n      var _putNotificationContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(contextId, context) {\n        var header, reply;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                header = {\n                  method: 'put_notification_ctx',\n                  notification_ctx_id: contextId\n                };\n                _context.next = 3;\n                return this.transport.sendWithReply(header, context);\n\n              case 3:\n                reply = _context.sent;\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function putNotificationContext(_x, _x2) {\n        return _putNotificationContext.apply(this, arguments);\n      }\n\n      return putNotificationContext;\n    }()\n  }, {\n    key: \"deleteNotificationContext\",\n    value: function () {\n      var _deleteNotificationContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(contextId) {\n        var message, reply;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                message = {\n                  method: 'delete_notification_ctx',\n                  notification_ctx_id: contextId\n                };\n                _context2.next = 3;\n                return this.transport.sendWithReply(message);\n\n              case 3:\n                reply = _context2.sent;\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function deleteNotificationContext(_x3) {\n        return _deleteNotificationContext.apply(this, arguments);\n      }\n\n      return deleteNotificationContext;\n    }()\n  }, {\n    key: \"updateRegistration\",\n    value: function () {\n      var _updateRegistration = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(contextId, context) {\n        var registrationAttempts, attemptId;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                logger_1.log.debug('update registration for context', contextId);\n                registrationAttempts = this.registrationsInProgress.get(contextId);\n\n                if (!registrationAttempts) {\n                  registrationAttempts = new Set();\n                  this.registrationsInProgress.set(contextId, registrationAttempts);\n                }\n\n                attemptId = uuid_1.v4();\n                registrationAttempts.add(attemptId);\n                _context3.prev = 5;\n                _context3.next = 8;\n                return this.putNotificationContext(contextId, context);\n\n              case 8:\n                logger_1.log.debug('registration attempt succeeded for context', context);\n                registrationAttempts.delete(attemptId);\n\n                if (registrationAttempts.size === 0) {\n                  this.registrationsInProgress.delete(contextId);\n                  this.emit('registered', contextId);\n                }\n\n                _context3.next = 19;\n                break;\n\n              case 13:\n                _context3.prev = 13;\n                _context3.t0 = _context3[\"catch\"](5);\n                logger_1.log.warn('registration attempt failed for context', context);\n                logger_1.log.debug(_context3.t0);\n                registrationAttempts.delete(attemptId);\n\n                if (registrationAttempts.size === 0) {\n                  this.registrationsInProgress.delete(contextId);\n                  this.emit('registrationFailed', contextId, _context3.t0);\n                }\n\n              case 19:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[5, 13]]);\n      }));\n\n      function updateRegistration(_x4, _x5) {\n        return _updateRegistration.apply(this, arguments);\n      }\n\n      return updateRegistration;\n    }()\n  }, {\n    key: \"updateRegistrations\",\n    value: function updateRegistrations() {\n      var _this2 = this;\n\n      logger_1.log.trace(\"refreshing \".concat(this.registrations.size, \" registrations\"));\n      this.registrations.forEach(function (context, id) {\n        _this2.updateRegistration(id, context);\n      });\n    }\n  }, {\n    key: \"setNotificationsContext\",\n    value: function setNotificationsContext(contextId, context) {\n      if (!contextId || !context) {\n        throw new twilsockerror_1.TwilsockError('Invalid arguments provided');\n      }\n\n      this.registrations.set(contextId, context);\n\n      if (this.transport.isConnected) {\n        this.updateRegistration(contextId, context);\n      }\n    }\n  }, {\n    key: \"removeNotificationsContext\",\n    value: function () {\n      var _removeNotificationsContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(contextId) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this.registrations.has(contextId)) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 2:\n                _context4.next = 4;\n                return this.deleteNotificationContext(contextId);\n\n              case 4:\n                if (this.transport.isConnected) {\n                  this.registrations.delete(contextId);\n                }\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function removeNotificationsContext(_x6) {\n        return _removeNotificationsContext.apply(this, arguments);\n      }\n\n      return removeNotificationsContext;\n    }()\n  }]);\n\n  return Registrations;\n}(events_1.EventEmitter);\n\nexports.Registrations = Registrations;","map":{"version":3,"sources":["/Users/stefanpjanic/Desktop/mango_dev/node_modules/twilio-notifications/node_modules/twilsock/lib/services/registrations.js"],"names":["Object","defineProperty","exports","value","logger_1","require","events_1","uuid_1","twilsockerror_1","Registrations","transport","registrations","Map","registrationsInProgress","contextId","context","header","method","notification_ctx_id","sendWithReply","reply","message","log","debug","registrationAttempts","get","Set","set","attemptId","v4","add","putNotificationContext","delete","size","emit","warn","trace","forEach","id","updateRegistration","TwilsockError","isConnected","has","deleteNotificationContext","EventEmitter"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst logger_1 = require(\"../logger\");\nconst events_1 = require(\"events\");\nconst uuid_1 = require(\"uuid\");\nconst twilsockerror_1 = require(\"../error/twilsockerror\");\n/**\n * Registrations module handles all operations with registration contexts through twilsock\n * Main role: it automatically refreshes all registrations after reconnect.\n */\nclass Registrations extends events_1.EventEmitter {\n    constructor(transport) {\n        super();\n        this.transport = transport;\n        this.registrations = new Map();\n        this.registrationsInProgress = new Map();\n    }\n    async putNotificationContext(contextId, context) {\n        const header = { method: 'put_notification_ctx', notification_ctx_id: contextId };\n        let reply = await this.transport.sendWithReply(header, context);\n    }\n    async deleteNotificationContext(contextId) {\n        let message = { method: 'delete_notification_ctx',\n            notification_ctx_id: contextId };\n        let reply = await this.transport.sendWithReply(message);\n    }\n    async updateRegistration(contextId, context) {\n        logger_1.log.debug('update registration for context', contextId);\n        let registrationAttempts = this.registrationsInProgress.get(contextId);\n        if (!registrationAttempts) {\n            registrationAttempts = new Set();\n            this.registrationsInProgress.set(contextId, registrationAttempts);\n        }\n        const attemptId = uuid_1.v4();\n        registrationAttempts.add(attemptId);\n        try {\n            await this.putNotificationContext(contextId, context);\n            logger_1.log.debug('registration attempt succeeded for context', context);\n            registrationAttempts.delete(attemptId);\n            if (registrationAttempts.size === 0) {\n                this.registrationsInProgress.delete(contextId);\n                this.emit('registered', contextId);\n            }\n        }\n        catch (err) {\n            logger_1.log.warn('registration attempt failed for context', context);\n            logger_1.log.debug(err);\n            registrationAttempts.delete(attemptId);\n            if (registrationAttempts.size === 0) {\n                this.registrationsInProgress.delete(contextId);\n                this.emit('registrationFailed', contextId, err);\n            }\n        }\n    }\n    updateRegistrations() {\n        logger_1.log.trace(`refreshing ${this.registrations.size} registrations`);\n        this.registrations.forEach((context, id) => {\n            this.updateRegistration(id, context);\n        });\n    }\n    setNotificationsContext(contextId, context) {\n        if (!contextId || !context) {\n            throw new twilsockerror_1.TwilsockError('Invalid arguments provided');\n        }\n        this.registrations.set(contextId, context);\n        if (this.transport.isConnected) {\n            this.updateRegistration(contextId, context);\n        }\n    }\n    async removeNotificationsContext(contextId) {\n        if (!this.registrations.has(contextId)) {\n            return;\n        }\n        await this.deleteNotificationContext(contextId);\n        if (this.transport.isConnected) {\n            this.registrations.delete(contextId);\n        }\n    }\n}\nexports.Registrations = Registrations;\n"]},"metadata":{},"sourceType":"script"}